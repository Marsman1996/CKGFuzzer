{
  "src": {
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/json_patch_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static cJSON *parse_test_file(const char * const filename)\n{\n    char *file = NULL;\n    cJSON *json = NULL;\n\n    file = read_file(filename);\n    TEST_ASSERT_NOT_NULL_MESSAGE(file, \"Failed to read file.\");\n\n    json = cJSON_Parse(file);\n    TEST_ASSERT_NOT_NULL_MESSAGE(json, \"Failed to parse test json.\");\n    TEST_ASSERT_TRUE_MESSAGE(cJSON_IsArray(json), \"Json is not an array.\");\n\n    free(file);\n\n    return json;\n}",
          "fn_code_pos": [
            [
              31,
              0
            ],
            [
              46,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "parse_test_file",
            "parameters": {
              "filename": "char"
            },
            "return_type": "cJSON"
          }
        },
        {
          "fn_code": "static cJSON_bool test_apply_patch(const cJSON * const test)\n{\n    cJSON *doc = NULL;\n    cJSON *patch = NULL;\n    cJSON *expected = NULL;\n    cJSON *error_element = NULL;\n    cJSON *comment = NULL;\n    cJSON *disabled = NULL;\n\n    cJSON *object = NULL;\n    cJSON_bool successful = false;\n\n    /* extract all the data out of the test */\n    comment = cJSON_GetObjectItemCaseSensitive(test, \"comment\");\n    if (cJSON_IsString(comment))\n    {\n        printf(\"Testing \\\"%s\\\"\\n\", comment->valuestring);\n    }\n    else\n    {\n        printf(\"Testing unknown\\n\");\n    }\n\n    disabled = cJSON_GetObjectItemCaseSensitive(test, \"disabled\");\n    if (cJSON_IsTrue(disabled))\n    {\n        printf(\"SKIPPED\\n\");\n        return true;\n    }\n\n    doc = cJSON_GetObjectItemCaseSensitive(test, \"doc\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(doc, \"No \\\"doc\\\" in the test.\");\n    patch = cJSON_GetObjectItemCaseSensitive(test, \"patch\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(patch, \"No \\\"patch\\\"in the test.\");\n    /* Make a working copy of 'doc' */\n    object = cJSON_Duplicate(doc, true);\n    TEST_ASSERT_NOT_NULL(object);\n\n    expected = cJSON_GetObjectItemCaseSensitive(test, \"expected\");\n    error_element = cJSON_GetObjectItemCaseSensitive(test, \"error\");\n    if (error_element != NULL)\n    {\n        /* excepting an error */\n        TEST_ASSERT_TRUE_MESSAGE(0 != cJSONUtils_ApplyPatchesCaseSensitive(object, patch), \"Test didn't fail as it's supposed to.\");\n\n        successful = true;\n    }\n    else\n    {\n        /* apply the patch */\n        TEST_ASSERT_EQUAL_INT_MESSAGE(0, cJSONUtils_ApplyPatchesCaseSensitive(object, patch), \"Failed to apply patches.\");\n        successful = true;\n\n        if (expected != NULL)\n        {\n            successful = cJSON_Compare(object, expected, true);\n        }\n    }\n\n    cJSON_Delete(object);\n\n    if (successful)\n    {\n        printf(\"OK\\n\");\n    }\n    else\n    {\n        printf(\"FAILED\\n\");\n    }\n\n    return successful;\n}",
          "fn_code_pos": [
            [
              48,
              0
            ],
            [
              119,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_apply_patch",
            "parameters": {
              "test": "cJSON"
            },
            "return_type": "cJSON_bool"
          }
        },
        {
          "fn_code": "static cJSON_bool test_generate_test(cJSON *test)\n{\n    cJSON *doc = NULL;\n    cJSON *patch = NULL;\n    cJSON *expected = NULL;\n    cJSON *disabled = NULL;\n\n    cJSON *object = NULL;\n    cJSON_bool successful = false;\n\n    char *printed_patch = NULL;\n\n    disabled = cJSON_GetObjectItemCaseSensitive(test, \"disabled\");\n    if (cJSON_IsTrue(disabled))\n    {\n        printf(\"SKIPPED\\n\");\n        return true;\n    }\n\n    doc = cJSON_GetObjectItemCaseSensitive(test, \"doc\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(doc, \"No \\\"doc\\\" in the test.\");\n\n    /* Make a working copy of 'doc' */\n    object = cJSON_Duplicate(doc, true);\n    TEST_ASSERT_NOT_NULL(object);\n\n    expected = cJSON_GetObjectItemCaseSensitive(test, \"expected\");\n    if (expected == NULL)\n    {\n        cJSON_Delete(object);\n        /* if there is no expected output, this test doesn't make sense */\n        return true;\n    }\n\n    patch = cJSONUtils_GeneratePatchesCaseSensitive(doc, expected);\n    TEST_ASSERT_NOT_NULL_MESSAGE(patch, \"Failed to generate patches.\");\n\n    printed_patch = cJSON_Print(patch);\n    printf(\"%s\\n\", printed_patch);\n    free(printed_patch);\n\n    /* apply the generated patch */\n    TEST_ASSERT_EQUAL_INT_MESSAGE(0, cJSONUtils_ApplyPatchesCaseSensitive(object, patch), \"Failed to apply generated patch.\");\n\n    successful = cJSON_Compare(object, expected, true);\n\n    cJSON_Delete(patch);\n    cJSON_Delete(object);\n\n    if (successful)\n    {\n        printf(\"generated patch: OK\\n\");\n    }\n    else\n    {\n        printf(\"generated patch: FAILED\\n\");\n    }\n\n    return successful;\n}",
          "fn_code_pos": [
            [
              121,
              0
            ],
            [
              180,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_generate_test",
            "parameters": {
              "test": "cJSON"
            },
            "return_type": "cJSON_bool"
          }
        },
        {
          "fn_code": "static void cjson_utils_should_pass_json_patch_test_tests(void)\n{\n    cJSON *tests = parse_test_file(\"json-patch-tests/tests.json\");\n    cJSON *test = NULL;\n\n    cJSON_bool failed = false;\n    cJSON_ArrayForEach(test, tests)\n    {\n        failed |= !test_apply_patch(test);\n        failed |= !test_generate_test(test);\n    }\n\n    cJSON_Delete(tests);\n\n    TEST_ASSERT_FALSE_MESSAGE(failed, \"Some tests failed.\");\n}",
          "fn_code_pos": [
            [
              182,
              0
            ],
            [
              197,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_utils_should_pass_json_patch_test_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "cJSON_ArrayForEach(test, tests)\n    {\n        failed |= !test_apply_patch(test);\n        failed |= !test_generate_test(test);\n    }",
          "fn_code_pos": [
            [
              188,
              4
            ],
            [
              192,
              5
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cJSON_ArrayForEach",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "static void cjson_utils_should_pass_json_patch_test_spec_tests(void)\n{\n    cJSON *tests = parse_test_file(\"json-patch-tests/spec_tests.json\");\n    cJSON *test = NULL;\n\n    cJSON_bool failed = false;\n    cJSON_ArrayForEach(test, tests)\n    {\n        failed |= !test_apply_patch(test);\n        failed |= !test_generate_test(test);\n    }\n\n    cJSON_Delete(tests);\n\n    TEST_ASSERT_FALSE_MESSAGE(failed, \"Some tests failed.\");\n}",
          "fn_code_pos": [
            [
              199,
              0
            ],
            [
              214,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_utils_should_pass_json_patch_test_spec_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "cJSON_ArrayForEach(test, tests)\n    {\n        failed |= !test_apply_patch(test);\n        failed |= !test_generate_test(test);\n    }",
          "fn_code_pos": [
            [
              205,
              4
            ],
            [
              209,
              5
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cJSON_ArrayForEach",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "static void cjson_utils_should_pass_json_patch_test_cjson_utils_tests(void)\n{\n    cJSON *tests = parse_test_file(\"json-patch-tests/cjson-utils-tests.json\");\n    cJSON *test = NULL;\n\n    cJSON_bool failed = false;\n    cJSON_ArrayForEach(test, tests)\n    {\n        failed |= !test_apply_patch(test);\n        failed |= !test_generate_test(test);\n    }\n\n    cJSON_Delete(tests);\n\n    TEST_ASSERT_FALSE_MESSAGE(failed, \"Some tests failed.\");\n}",
          "fn_code_pos": [
            [
              216,
              0
            ],
            [
              231,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_utils_should_pass_json_patch_test_cjson_utils_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "cJSON_ArrayForEach(test, tests)\n    {\n        failed |= !test_apply_patch(test);\n        failed |= !test_generate_test(test);\n    }",
          "fn_code_pos": [
            [
              222,
              4
            ],
            [
              226,
              5
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cJSON_ArrayForEach",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "int main(void)\n{\n    UNITY_BEGIN();\n\n    RUN_TEST(cjson_utils_should_pass_json_patch_test_tests);\n    RUN_TEST(cjson_utils_should_pass_json_patch_test_spec_tests);\n    RUN_TEST(cjson_utils_should_pass_json_patch_test_cjson_utils_tests);\n\n    return UNITY_END();\n}",
          "fn_code_pos": [
            [
              233,
              0
            ],
            [
              242,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "parse_test_file(const char * const filename)",
          "fn_dec_pos": [
            [
              31,
              14
            ],
            [
              31,
              58
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "parse_test_file",
            "parameters": {
              "filename": "char"
            },
            "return_type": null
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"unity/examples/unity_config.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"unity/src/unity.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"common.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"../cJSON_Utils.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/minify_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static void cjson_minify_should_not_overflow_buffer(void)\n{\n    char unclosed_multiline_comment[] = \"/* bla\";\n    char pending_escape[] = \"\\\"\\\\\";\n\n    cJSON_Minify(unclosed_multiline_comment);\n    TEST_ASSERT_EQUAL_STRING(\"\", unclosed_multiline_comment);\n\n    cJSON_Minify(pending_escape);\n    TEST_ASSERT_EQUAL_STRING(\"\\\"\\\\\", pending_escape);\n}",
          "fn_code_pos": [
            [
              31,
              0
            ],
            [
              41,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_not_overflow_buffer",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_minify_should_remove_single_line_comments(void)\n{\n    const char to_minify[] = \"{// this is {} \\\"some kind\\\" of [] comment /*, don't you see\\n}\";\n\n    char* minified = (char*) malloc(sizeof(to_minify));\n    TEST_ASSERT_NOT_NULL(minified);\n    strcpy(minified, to_minify);\n\n    cJSON_Minify(minified);\n    TEST_ASSERT_EQUAL_STRING(\"{}\", minified);\n\n    free(minified);\n}",
          "fn_code_pos": [
            [
              43,
              0
            ],
            [
              55,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_remove_single_line_comments",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_minify_should_remove_spaces(void)\n{\n    const char to_minify[] = \"{ \\\"key\\\":\\ttrue\\r\\n    }\";\n\n    char* minified = (char*) malloc(sizeof(to_minify));\n    TEST_ASSERT_NOT_NULL(minified);\n    strcpy(minified, to_minify);\n\n    cJSON_Minify(minified);\n    TEST_ASSERT_EQUAL_STRING(\"{\\\"key\\\":true}\", minified);\n\n    free(minified);\n}",
          "fn_code_pos": [
            [
              57,
              0
            ],
            [
              69,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_remove_spaces",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_minify_should_remove_multiline_comments(void)\n{\n    const char to_minify[] = \"{/* this is\\n a /* multi\\n //line \\n {comment \\\"\\\\\\\" */}\";\n\n    char* minified = (char*) malloc(sizeof(to_minify));\n    TEST_ASSERT_NOT_NULL(minified);\n    strcpy(minified, to_minify);\n\n    cJSON_Minify(minified);\n    TEST_ASSERT_EQUAL_STRING(\"{}\", minified);\n\n    free(minified);\n}",
          "fn_code_pos": [
            [
              71,
              0
            ],
            [
              83,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_remove_multiline_comments",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_minify_should_not_modify_strings(void)\n{\n    const char to_minify[] = \"\\\"this is a string \\\\\\\" \\\\t bla\\\"\";\n\n    char* minified = (char*) malloc(sizeof(to_minify));\n    TEST_ASSERT_NOT_NULL(minified);\n    strcpy(minified, to_minify);\n\n    cJSON_Minify(minified);\n    TEST_ASSERT_EQUAL_STRING(to_minify, minified);\n\n    free(minified);\n}",
          "fn_code_pos": [
            [
              85,
              0
            ],
            [
              97,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_not_modify_strings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_minify_should_minify_json(void) {\n    const char to_minify[] =\n            \"{\\n\"\n            \"    \\\"glossary\\\": { // comment\\n\"\n            \"        \\\"title\\\": \\\"example glossary\\\",\\n\"\n            \"  /* multi\\n\"\n            \" line */\\n\"\n            \"\t\t\\\"GlossDiv\\\": {\\n\"\n            \"            \\\"title\\\": \\\"S\\\",\\n\"\n            \"\t\t\t\\\"GlossList\\\": {\\n\"\n            \"                \\\"GlossEntry\\\": {\\n\"\n            \"                    \\\"ID\\\": \\\"SGML\\\",\\n\"\n            \"\t\t\t\t\t\\\"SortAs\\\": \\\"SGML\\\",\\n\"\n            \"\t\t\t\t\t\\\"Acronym\\\": \\\"SGML\\\",\\n\"\n            \"\t\t\t\t\t\\\"Abbrev\\\": \\\"ISO 8879:1986\\\",\\n\"\n            \"\t\t\t\t\t\\\"GlossDef\\\": {\\n\"\n            \"\t\t\t\t\t\t\\\"GlossSeeAlso\\\": [\\\"GML\\\", \\\"XML\\\"]\\n\"\n            \"                    },\\n\"\n            \"\t\t\t\t\t\\\"GlossSee\\\": \\\"markup\\\"\\n\"\n            \"                }\\n\"\n            \"            }\\n\"\n            \"        }\\n\"\n            \"    }\\n\"\n            \"}\";\n    const char* minified =\n            \"{\"\n            \"\\\"glossary\\\":{\"\n            \"\\\"title\\\":\\\"example glossary\\\",\"\n            \"\\\"GlossDiv\\\":{\"\n            \"\\\"title\\\":\\\"S\\\",\"\n            \"\\\"GlossList\\\":{\"\n            \"\\\"GlossEntry\\\":{\"\n            \"\\\"ID\\\":\\\"SGML\\\",\"\n            \"\\\"SortAs\\\":\\\"SGML\\\",\"\n            \"\\\"Acronym\\\":\\\"SGML\\\",\"\n            \"\\\"Abbrev\\\":\\\"ISO 8879:1986\\\",\"\n            \"\\\"GlossDef\\\":{\"\n            \"\\\"GlossSeeAlso\\\":[\\\"GML\\\",\\\"XML\\\"]\"\n            \"},\"\n            \"\\\"GlossSee\\\":\\\"markup\\\"\"\n            \"}\"\n            \"}\"\n            \"}\"\n            \"}\"\n            \"}\";\n\n    char *buffer = (char*) malloc(sizeof(to_minify));\n    strcpy(buffer, to_minify);\n\n    cJSON_Minify(buffer);\n    TEST_ASSERT_EQUAL_STRING(minified, buffer);\n\n    free(buffer);\n}",
          "fn_code_pos": [
            [
              99,
              0
            ],
            [
              152,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_minify_json",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_minify_should_not_loop_infinitely(void) {\n    char string[] = { '8', ' ', '/', ' ', '5', '\\n', '\\0' };\n    /* this should not be an infinite loop */\n    cJSON_Minify(string);\n}",
          "fn_code_pos": [
            [
              154,
              0
            ],
            [
              158,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_minify_should_not_loop_infinitely",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int CJSON_CDECL main(void)\n{\n    UNITY_BEGIN();\n\n    RUN_TEST(cjson_minify_should_not_overflow_buffer);\n    RUN_TEST(cjson_minify_should_minify_json);\n    RUN_TEST(cjson_minify_should_remove_single_line_comments);\n    RUN_TEST(cjson_minify_should_remove_multiline_comments);\n    RUN_TEST(cjson_minify_should_remove_spaces);\n    RUN_TEST(cjson_minify_should_not_modify_strings);\n    RUN_TEST(cjson_minify_should_not_loop_infinitely);\n\n    return UNITY_END();\n}",
          "fn_code_pos": [
            [
              160,
              0
            ],
            [
              173,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CJSON_CDECL main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"unity/examples/unity_config.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"unity/src/unity.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"common.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/misc_utils_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static void cjson_utils_functions_shouldnt_crash_with_null_pointers(void)\n{\n    cJSON *item = cJSON_CreateString(\"item\");\n    TEST_ASSERT_NOT_NULL(item);\n\n    TEST_ASSERT_NULL(cJSONUtils_GetPointer(item, NULL));\n    TEST_ASSERT_NULL(cJSONUtils_GetPointer(NULL, \"pointer\"));\n    TEST_ASSERT_NULL(cJSONUtils_GetPointerCaseSensitive(NULL, \"pointer\"));\n    TEST_ASSERT_NULL(cJSONUtils_GetPointerCaseSensitive(item, NULL));\n    TEST_ASSERT_NULL(cJSONUtils_GeneratePatches(item, NULL));\n    TEST_ASSERT_NULL(cJSONUtils_GeneratePatches(NULL, item));\n    TEST_ASSERT_NULL(cJSONUtils_GeneratePatchesCaseSensitive(item, NULL));\n    TEST_ASSERT_NULL(cJSONUtils_GeneratePatchesCaseSensitive(NULL, item));\n    cJSONUtils_AddPatchToArray(item, \"path\", \"add\", NULL);\n    cJSONUtils_AddPatchToArray(item, \"path\", NULL, item);\n    cJSONUtils_AddPatchToArray(item, NULL, \"add\", item);\n    cJSONUtils_AddPatchToArray(NULL, \"path\", \"add\", item);\n    cJSONUtils_ApplyPatches(item, NULL);\n    cJSONUtils_ApplyPatches(NULL, item);\n    cJSONUtils_ApplyPatchesCaseSensitive(item, NULL);\n    cJSONUtils_ApplyPatchesCaseSensitive(NULL, item);\n    TEST_ASSERT_NULL(cJSONUtils_MergePatch(item, NULL));\n    item = cJSON_CreateString(\"item\");\n    TEST_ASSERT_NULL(cJSONUtils_MergePatchCaseSensitive(item, NULL));\n    item = cJSON_CreateString(\"item\");\n    /* these calls are actually valid */\n    /* cJSONUtils_MergePatch(NULL, item); */\n    /* cJSONUtils_MergePatchCaseSensitive(NULL, item);*/\n    /* cJSONUtils_GenerateMergePatch(item, NULL); */\n    /* cJSONUtils_GenerateMergePatch(NULL, item); */\n    /* cJSONUtils_GenerateMergePatchCaseSensitive(item, NULL); */\n    /* cJSONUtils_GenerateMergePatchCaseSensitive(NULL, item); */\n\n    TEST_ASSERT_NULL(cJSONUtils_FindPointerFromObjectTo(item, NULL));\n    TEST_ASSERT_NULL(cJSONUtils_FindPointerFromObjectTo(NULL, item));\n    cJSONUtils_SortObject(NULL);\n    cJSONUtils_SortObjectCaseSensitive(NULL);\n\n    cJSON_Delete(item);\n}",
          "fn_code_pos": [
            [
              31,
              0
            ],
            [
              70,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_utils_functions_shouldnt_crash_with_null_pointers",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n    UNITY_BEGIN();\n\n    RUN_TEST(cjson_utils_functions_shouldnt_crash_with_null_pointers);\n\n    return UNITY_END();\n}",
          "fn_code_pos": [
            [
              72,
              0
            ],
            [
              79,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"unity/examples/unity_config.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"unity/src/unity.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"common.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"../cJSON_Utils.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/old_utils_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static void json_pointer_tests(void)\n{\n    cJSON *root = NULL;\n    const char *json=\n        \"{\"\n        \"\\\"foo\\\": [\\\"bar\\\", \\\"baz\\\"],\"\n        \"\\\"\\\": 0,\"\n        \"\\\"a/b\\\": 1,\"\n        \"\\\"c%d\\\": 2,\"\n        \"\\\"e^f\\\": 3,\"\n        \"\\\"g|h\\\": 4,\"\n        \"\\\"i\\\\\\\\j\\\": 5,\"\n        \"\\\"k\\\\\\\"l\\\": 6,\"\n        \"\\\" \\\": 7,\"\n        \"\\\"m~n\\\": 8\"\n        \"}\";\n\n    root = cJSON_Parse(json);\n\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"\"), root);\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/foo\"), cJSON_GetObjectItem(root, \"foo\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/foo/0\"), cJSON_GetObjectItem(root, \"foo\")->child);\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/foo/0\"), cJSON_GetObjectItem(root, \"foo\")->child);\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/\"), cJSON_GetObjectItem(root, \"\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/a~1b\"), cJSON_GetObjectItem(root, \"a/b\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/c%d\"), cJSON_GetObjectItem(root, \"c%d\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/c^f\"), cJSON_GetObjectItem(root, \"c^f\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/c|f\"), cJSON_GetObjectItem(root, \"c|f\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/i\\\\j\"), cJSON_GetObjectItem(root, \"i\\\\j\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/k\\\"l\"), cJSON_GetObjectItem(root, \"k\\\"l\"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/ \"), cJSON_GetObjectItem(root, \" \"));\n    TEST_ASSERT_EQUAL_PTR(cJSONUtils_GetPointer(root, \"/m~0n\"), cJSON_GetObjectItem(root, \"m~n\"));\n\n    cJSON_Delete(root);\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              85,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "json_pointer_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void misc_tests(void)\n{\n    /* Misc tests */\n    int numbers[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    cJSON *object = NULL;\n    cJSON *object1 = NULL;\n    cJSON *object2 = NULL;\n    cJSON *object3 = NULL;\n    cJSON *object4 = NULL;\n    cJSON *nums = NULL;\n    cJSON *num6 = NULL;\n    char *pointer = NULL;\n\n    printf(\"JSON Pointer construct\\n\");\n    object = cJSON_CreateObject();\n    nums = cJSON_CreateIntArray(numbers, 10);\n    num6 = cJSON_GetArrayItem(nums, 6);\n    cJSON_AddItemToObject(object, \"numbers\", nums);\n\n    pointer = cJSONUtils_FindPointerFromObjectTo(object, num6);\n    TEST_ASSERT_EQUAL_STRING(\"/numbers/6\", pointer);\n    free(pointer);\n\n    pointer = cJSONUtils_FindPointerFromObjectTo(object, nums);\n    TEST_ASSERT_EQUAL_STRING(\"/numbers\", pointer);\n    free(pointer);\n\n    pointer = cJSONUtils_FindPointerFromObjectTo(object, object);\n    TEST_ASSERT_EQUAL_STRING(\"\", pointer);\n    free(pointer);\n\n    object1 = cJSON_CreateObject();\n    object2 = cJSON_CreateString(\"m~n\");\n    cJSON_AddItemToObject(object1, \"m~n\", object2);\n    pointer = cJSONUtils_FindPointerFromObjectTo(object1, object2);\n    TEST_ASSERT_EQUAL_STRING(\"/m~0n\",pointer);\n    free(pointer);\n\n    object3 = cJSON_CreateObject();\n    object4 = cJSON_CreateString(\"m/n\");\n    cJSON_AddItemToObject(object3, \"m/n\", object4);\n    pointer = cJSONUtils_FindPointerFromObjectTo(object3, object4);\n    TEST_ASSERT_EQUAL_STRING(\"/m~1n\",pointer);\n    free(pointer);\n\n    cJSON_Delete(object);\n    cJSON_Delete(object1);\n    cJSON_Delete(object3);\n}",
          "fn_code_pos": [
            [
              87,
              0
            ],
            [
              135,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "misc_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void sort_tests(void)\n{\n    /* Misc tests */\n    const char *random = \"QWERTYUIOPASDFGHJKLZXCVBNM\";\n    char buf[2] = {'\\0', '\\0'};\n    cJSON *sortme = NULL;\n    size_t i = 0;\n    cJSON *current_element = NULL;\n\n    /* JSON Sort test: */\n    sortme = cJSON_CreateObject();\n    for (i = 0; i < 26; i++)\n    {\n        buf[0] = random[i];\n        cJSON_AddItemToObject(sortme, buf, cJSON_CreateNumber(1));\n    }\n\n    cJSONUtils_SortObject(sortme);\n\n    /* check sorting */\n    current_element = sortme->child->next;\n    for (i = 1; (i < 26) && (current_element != NULL) && (current_element->prev != NULL); i++)\n    {\n        TEST_ASSERT_TRUE(current_element->string[0] >= current_element->prev->string[0]);\n        current_element = current_element->next;\n    }\n\n    cJSON_Delete(sortme);\n}",
          "fn_code_pos": [
            [
              137,
              0
            ],
            [
              165,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "sort_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void merge_tests(void)\n{\n    size_t i = 0;\n    char *patchtext = NULL;\n    char *after = NULL;\n\n    /* Merge tests: */\n    printf(\"JSON Merge Patch tests\\n\");\n    for (i = 0; i < 15; i++)\n    {\n        cJSON *object_to_be_merged = cJSON_Parse(merges[i][0]);\n        cJSON *patch = cJSON_Parse(merges[i][1]);\n        patchtext = cJSON_PrintUnformatted(patch);\n        object_to_be_merged = cJSONUtils_MergePatch(object_to_be_merged, patch);\n        after = cJSON_PrintUnformatted(object_to_be_merged);\n        TEST_ASSERT_EQUAL_STRING(merges[i][2], after);\n\n        free(patchtext);\n        free(after);\n        cJSON_Delete(object_to_be_merged);\n        cJSON_Delete(patch);\n    }\n}",
          "fn_code_pos": [
            [
              167,
              0
            ],
            [
              189,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "merge_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void generate_merge_tests(void)\n{\n    size_t i = 0;\n    char *patchedtext = NULL;\n\n    /* Generate Merge tests: */\n    for (i = 0; i < 15; i++)\n    {\n        cJSON *from = cJSON_Parse(merges[i][0]);\n        cJSON *to = cJSON_Parse(merges[i][2]);\n        cJSON *patch = cJSONUtils_GenerateMergePatch(from,to);\n        from = cJSONUtils_MergePatch(from,patch);\n        patchedtext = cJSON_PrintUnformatted(from);\n        TEST_ASSERT_EQUAL_STRING(merges[i][2], patchedtext);\n\n        cJSON_Delete(from);\n        cJSON_Delete(to);\n        cJSON_Delete(patch);\n        free(patchedtext);\n    }\n}",
          "fn_code_pos": [
            [
              191,
              0
            ],
            [
              211,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "generate_merge_tests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n    UNITY_BEGIN();\n\n    RUN_TEST(json_pointer_tests);\n    RUN_TEST(misc_tests);\n    RUN_TEST(sort_tests);\n    RUN_TEST(merge_tests);\n    RUN_TEST(generate_merge_tests);\n\n    return UNITY_END();\n}",
          "fn_code_pos": [
            [
              213,
              0
            ],
            [
              224,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"unity/examples/unity_config.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"unity/src/unity.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"common.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"../cJSON_Utils.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/misc_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static void cjson_array_foreach_should_loop_over_arrays(void)\n{\n    cJSON array[1];\n    cJSON elements[10];\n    cJSON *element_pointer = NULL;\n    size_t i = 0;\n\n    memset(array, 0, sizeof(array));\n    memset(elements, 0, sizeof(elements));\n\n    /* create array */\n    array[0].child = &elements[0];\n    elements[0].prev = NULL;\n    elements[9].next = NULL;\n    for (i = 0; i < 9; i++)\n    {\n        elements[i].next = &elements[i + 1];\n        elements[i + 1].prev = &elements[i];\n    }\n\n    i = 0;\n    cJSON_ArrayForEach(element_pointer, array)\n    {\n        TEST_ASSERT_TRUE_MESSAGE(element_pointer == &elements[i], \"Not iterating over array properly\");\n        i++;\n    }\n}",
          "fn_code_pos": [
            [
              30,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_array_foreach_should_loop_over_arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "cJSON_ArrayForEach(element_pointer, array)\n    {\n        TEST_ASSERT_TRUE_MESSAGE(element_pointer == &elements[i], \"Not iterating over array properly\");\n        i++;\n    }",
          "fn_code_pos": [
            [
              51,
              4
            ],
            [
              55,
              5
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cJSON_ArrayForEach",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "static void cjson_array_foreach_should_not_dereference_null_pointer(void)\n{\n    cJSON *array = NULL;\n    cJSON *element = NULL;\n    cJSON_ArrayForEach(element, array);\n}",
          "fn_code_pos": [
            [
              58,
              0
            ],
            [
              63,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_array_foreach_should_not_dereference_null_pointer",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_get_object_item_should_get_object_items(void)\n{\n    cJSON *item = NULL;\n    cJSON *found = NULL;\n\n    item = cJSON_Parse(\"{\\\"one\\\":1, \\\"Two\\\":2, \\\"tHree\\\":3}\");\n\n    found = cJSON_GetObjectItem(NULL, \"test\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL pointer.\");\n\n    found = cJSON_GetObjectItem(item, NULL);\n    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItem(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItem(item, \"tWo\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItem(item, \"three\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItem(item, \"four\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}",
          "fn_code_pos": [
            [
              65,
              0
            ],
            [
              94,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_get_object_item_should_get_object_items",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_get_object_item_case_sensitive_should_get_object_items(void)\n{\n    cJSON *item = NULL;\n    cJSON *found = NULL;\n\n    item = cJSON_Parse(\"{\\\"one\\\":1, \\\"Two\\\":2, \\\"tHree\\\":3}\");\n\n    found = cJSON_GetObjectItemCaseSensitive(NULL, \"test\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL pointer.\");\n\n    found = cJSON_GetObjectItemCaseSensitive(item, NULL);\n    TEST_ASSERT_NULL_MESSAGE(found, \"Failed to fail on NULL string.\");\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"one\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 1);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"Two\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find first item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 2);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"tHree\");\n    TEST_ASSERT_NOT_NULL_MESSAGE(found, \"Failed to find item.\");\n    TEST_ASSERT_EQUAL_DOUBLE(found->valuedouble, 3);\n\n    found = cJSON_GetObjectItemCaseSensitive(item, \"One\");\n    TEST_ASSERT_NULL_MESSAGE(found, \"Should not find something that isn't there.\");\n\n    cJSON_Delete(item);\n}",
          "fn_code_pos": [
            [
              96,
              0
            ],
            [
              125,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_get_object_item_case_sensitive_should_get_object_items",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_get_object_item_should_not_crash_with_array(void)\n{\n    cJSON *array = NULL;\n    cJSON *found = NULL;\n    array = cJSON_Parse(\"[1]\");\n\n    found = cJSON_GetObjectItem(array, \"name\");\n    TEST_ASSERT_NULL(found);\n\n    cJSON_Delete(array);\n}",
          "fn_code_pos": [
            [
              127,
              0
            ],
            [
              137,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_get_object_item_should_not_crash_with_array",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_get_object_item_case_sensitive_should_not_crash_with_array(void)\n{\n    cJSON *array = NULL;\n    cJSON *found = NULL;\n    array = cJSON_Parse(\"[1]\");\n\n    found = cJSON_GetObjectItemCaseSensitive(array, \"name\");\n    TEST_ASSERT_NULL(found);\n\n    cJSON_Delete(array);\n}",
          "fn_code_pos": [
            [
              139,
              0
            ],
            [
              149,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_get_object_item_case_sensitive_should_not_crash_with_array",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void typecheck_functions_should_check_type(void)\n{\n    cJSON invalid[1];\n    cJSON item[1];\n    invalid->type = cJSON_Invalid;\n    invalid->type |= cJSON_StringIsConst;\n    item->type = cJSON_False;\n    item->type |= cJSON_StringIsConst;\n\n    TEST_ASSERT_FALSE(cJSON_IsInvalid(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsInvalid(item));\n    TEST_ASSERT_TRUE(cJSON_IsInvalid(invalid));\n\n    item->type = cJSON_False | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsFalse(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsFalse(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsFalse(item));\n    TEST_ASSERT_TRUE(cJSON_IsBool(item));\n\n    item->type = cJSON_True | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsTrue(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsTrue(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsTrue(item));\n    TEST_ASSERT_TRUE(cJSON_IsBool(item));\n\n    item->type = cJSON_NULL | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsNull(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsNull(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsNull(item));\n\n    item->type = cJSON_Number | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsNumber(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsNumber(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsNumber(item));\n\n    item->type = cJSON_String | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsString(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsString(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsString(item));\n\n    item->type = cJSON_Array | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsArray(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsArray(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsArray(item));\n\n    item->type = cJSON_Object | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsObject(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsObject(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsObject(item));\n\n    item->type = cJSON_Raw | cJSON_StringIsConst;\n    TEST_ASSERT_FALSE(cJSON_IsRaw(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsRaw(invalid));\n    TEST_ASSERT_TRUE(cJSON_IsRaw(item));\n}",
          "fn_code_pos": [
            [
              151,
              0
            ],
            [
              205,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "typecheck_functions_should_check_type",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_should_not_parse_to_deeply_nested_jsons(void)\n{\n    char deep_json[CJSON_NESTING_LIMIT + 1];\n    size_t position = 0;\n\n    for (position = 0; position < sizeof(deep_json); position++)\n    {\n        deep_json[position] = '[';\n    }\n    deep_json[sizeof(deep_json) - 1] = '\\0';\n\n    TEST_ASSERT_NULL_MESSAGE(cJSON_Parse(deep_json), \"To deep JSONs should not be parsed.\");\n}",
          "fn_code_pos": [
            [
              207,
              0
            ],
            [
              219,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_should_not_parse_to_deeply_nested_jsons",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_set_number_value_should_set_numbers(void)\n{\n    cJSON number[1] = {{NULL, NULL, NULL, cJSON_Number, NULL, 0, 0, NULL}};\n\n    cJSON_SetNumberValue(number, 1.5);\n    TEST_ASSERT_EQUAL(1, number->valueint);\n    TEST_ASSERT_EQUAL_DOUBLE(1.5, number->valuedouble);\n\n    cJSON_SetNumberValue(number, -1.5);\n    TEST_ASSERT_EQUAL(-1, number->valueint);\n    TEST_ASSERT_EQUAL_DOUBLE(-1.5, number->valuedouble);\n\n    cJSON_SetNumberValue(number, 1 + (double)INT_MAX);\n    TEST_ASSERT_EQUAL(INT_MAX, number->valueint);\n    TEST_ASSERT_EQUAL_DOUBLE(1 + (double)INT_MAX, number->valuedouble);\n\n    cJSON_SetNumberValue(number, -1 + (double)INT_MIN);\n    TEST_ASSERT_EQUAL(INT_MIN, number->valueint);\n    TEST_ASSERT_EQUAL_DOUBLE(-1 + (double)INT_MIN, number->valuedouble);\n}",
          "fn_code_pos": [
            [
              221,
              0
            ],
            [
              240,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_set_number_value_should_set_numbers",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_detach_item_via_pointer_should_detach_items(void)\n{\n    cJSON list[4];\n    cJSON parent[1];\n\n    memset(list, '\\0', sizeof(list));\n\n    /* link the list */\n    list[0].next = &(list[1]);\n    list[1].next = &(list[2]);\n    list[2].next = &(list[3]);\n\n    list[3].prev = &(list[2]);\n    list[2].prev = &(list[1]);\n    list[1].prev = &(list[0]);\n    list[0].prev = &(list[3]);\n\n    parent->child = &list[0];\n\n    /* detach in the middle (list[1]) */\n    TEST_ASSERT_TRUE_MESSAGE(cJSON_DetachItemViaPointer(parent, &(list[1])) == &(list[1]), \"Failed to detach in the middle.\");\n    TEST_ASSERT_TRUE_MESSAGE((list[1].prev == NULL) && (list[1].next == NULL), \"Didn't set pointers of detached item to NULL.\");\n    TEST_ASSERT_TRUE((list[0].next == &(list[2])) && (list[2].prev == &(list[0])));\n\n    /* detach beginning (list[0]) */\n    TEST_ASSERT_TRUE_MESSAGE(cJSON_DetachItemViaPointer(parent, &(list[0])) == &(list[0]), \"Failed to detach beginning.\");\n    TEST_ASSERT_TRUE_MESSAGE((list[0].prev == NULL) && (list[0].next == NULL), \"Didn't set pointers of detached item to NULL.\");\n    TEST_ASSERT_TRUE_MESSAGE((list[2].prev == &(list[3])) && (parent->child == &(list[2])), \"Didn't set the new beginning.\");\n\n    /* detach end (list[3])*/\n    TEST_ASSERT_TRUE_MESSAGE(cJSON_DetachItemViaPointer(parent, &(list[3])) == &(list[3]), \"Failed to detach end.\");\n    TEST_ASSERT_TRUE_MESSAGE((list[3].prev == NULL) && (list[3].next == NULL), \"Didn't set pointers of detached item to NULL.\");\n    TEST_ASSERT_TRUE_MESSAGE((list[2].next == NULL) && (parent->child == &(list[2])), \"Didn't set the new end\");\n\n    /* detach single item (list[2]) */\n    TEST_ASSERT_TRUE_MESSAGE(cJSON_DetachItemViaPointer(parent, &list[2]) == &list[2], \"Failed to detach single item.\");\n    TEST_ASSERT_TRUE_MESSAGE((list[2].prev == NULL) && (list[2].next == NULL), \"Didn't set pointers of detached item to NULL.\");\n    TEST_ASSERT_NULL_MESSAGE(parent->child, \"Child of the parent wasn't set to NULL.\");\n}",
          "fn_code_pos": [
            [
              242,
              0
            ],
            [
              280,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_detach_item_via_pointer_should_detach_items",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_detach_item_via_pointer_should_return_null_if_item_prev_is_null(void)\n{\n    cJSON list[2];\n    cJSON parent[1];\n\n    memset(list, '\\0', sizeof(list));\n\n    /* link the list */\n    list[0].next = &(list[1]);\n\n    parent->child = &list[0];\n    TEST_ASSERT_NULL_MESSAGE(cJSON_DetachItemViaPointer(parent, &(list[1])), \"Failed to detach in the middle.\");\n    TEST_ASSERT_TRUE_MESSAGE(cJSON_DetachItemViaPointer(parent, &(list[0])) == &(list[0]), \"Failed to detach in the middle.\");\n}",
          "fn_code_pos": [
            [
              282,
              0
            ],
            [
              295,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_detach_item_via_pointer_should_return_null_if_item_prev_is_null",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_replace_item_via_pointer_should_replace_items(void)\n{\n    cJSON replacements[3];\n    cJSON *beginning = NULL;\n    cJSON *middle = NULL;\n    cJSON *end = NULL;\n    cJSON *array = NULL;\n\n    beginning = cJSON_CreateNull();\n    TEST_ASSERT_NOT_NULL(beginning);\n    middle = cJSON_CreateNull();\n    TEST_ASSERT_NOT_NULL(middle);\n    end = cJSON_CreateNull();\n    TEST_ASSERT_NOT_NULL(end);\n\n    array = cJSON_CreateArray();\n    TEST_ASSERT_NOT_NULL(array);\n\n    cJSON_AddItemToArray(array, beginning);\n    cJSON_AddItemToArray(array, middle);\n    cJSON_AddItemToArray(array, end);\n\n    memset(replacements, '\\0', sizeof(replacements));\n\n    /* replace beginning */\n    TEST_ASSERT_TRUE(cJSON_ReplaceItemViaPointer(array, beginning, &(replacements[0])));\n    TEST_ASSERT_TRUE(replacements[0].prev == end);\n    TEST_ASSERT_TRUE(replacements[0].next == middle);\n    TEST_ASSERT_TRUE(middle->prev == &(replacements[0]));\n    TEST_ASSERT_TRUE(array->child == &(replacements[0]));\n\n    /* replace middle */\n    TEST_ASSERT_TRUE(cJSON_ReplaceItemViaPointer(array, middle, &(replacements[1])));\n    TEST_ASSERT_TRUE(replacements[1].prev == &(replacements[0]));\n    TEST_ASSERT_TRUE(replacements[1].next == end);\n    TEST_ASSERT_TRUE(end->prev == &(replacements[1]));\n\n    /* replace end */\n    TEST_ASSERT_TRUE(cJSON_ReplaceItemViaPointer(array, end, &(replacements[2])));\n    TEST_ASSERT_TRUE(replacements[2].prev == &(replacements[1]));\n    TEST_ASSERT_NULL(replacements[2].next);\n    TEST_ASSERT_TRUE(replacements[1].next == &(replacements[2]));\n\n    cJSON_free(array);\n}",
          "fn_code_pos": [
            [
              297,
              0
            ],
            [
              341,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_replace_item_via_pointer_should_replace_items",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_replace_item_in_object_should_preserve_name(void)\n{\n    cJSON root[1] = {{NULL, NULL, NULL, 0, NULL, 0, 0, NULL}};\n    cJSON *child = NULL;\n    cJSON *replacement = NULL;\n    cJSON_bool flag = false;\n\n    child = cJSON_CreateNumber(1);\n    TEST_ASSERT_NOT_NULL(child);\n    replacement = cJSON_CreateNumber(2);\n    TEST_ASSERT_NOT_NULL(replacement);\n\n    flag = cJSON_AddItemToObject(root, \"child\", child);\n    TEST_ASSERT_TRUE_MESSAGE(flag, \"add item to object failed\");\n    cJSON_ReplaceItemInObject(root, \"child\", replacement);\n\n    TEST_ASSERT_TRUE(root->child == replacement);\n    TEST_ASSERT_EQUAL_STRING(\"child\", replacement->string);\n\n    cJSON_Delete(replacement);\n}",
          "fn_code_pos": [
            [
              343,
              0
            ],
            [
              363,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_replace_item_in_object_should_preserve_name",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_functions_should_not_crash_with_null_pointers(void)\n{\n    char buffer[10];\n    cJSON *item = cJSON_CreateString(\"item\");\n    cJSON *array = cJSON_CreateArray();\n    cJSON *item1 = cJSON_CreateString(\"item1\");\n    cJSON *item2 = cJSON_CreateString(\"corrupted array item3\");\n    cJSON *corruptedString = cJSON_CreateString(\"corrupted\");\n    struct cJSON *originalPrev;\n\n    add_item_to_array(array, item1);\n    add_item_to_array(array, item2);\n\n    originalPrev = item2->prev;\n    item2->prev = NULL;\n    free(corruptedString->valuestring);\n    corruptedString->valuestring = NULL;\n\n    cJSON_InitHooks(NULL);\n    TEST_ASSERT_NULL(cJSON_Parse(NULL));\n    TEST_ASSERT_NULL(cJSON_ParseWithOpts(NULL, NULL, true));\n    TEST_ASSERT_NULL(cJSON_Print(NULL));\n    TEST_ASSERT_NULL(cJSON_PrintUnformatted(NULL));\n    TEST_ASSERT_NULL(cJSON_PrintBuffered(NULL, 10, true));\n    TEST_ASSERT_FALSE(cJSON_PrintPreallocated(NULL, buffer, sizeof(buffer), true));\n    TEST_ASSERT_FALSE(cJSON_PrintPreallocated(item, NULL, 1, true));\n    cJSON_Delete(NULL);\n    cJSON_GetArraySize(NULL);\n    TEST_ASSERT_NULL(cJSON_GetArrayItem(NULL, 0));\n    TEST_ASSERT_NULL(cJSON_GetObjectItem(NULL, \"item\"));\n    TEST_ASSERT_NULL(cJSON_GetObjectItem(item, NULL));\n    TEST_ASSERT_NULL(cJSON_GetObjectItemCaseSensitive(NULL, \"item\"));\n    TEST_ASSERT_NULL(cJSON_GetObjectItemCaseSensitive(item, NULL));\n    TEST_ASSERT_FALSE(cJSON_HasObjectItem(NULL, \"item\"));\n    TEST_ASSERT_FALSE(cJSON_HasObjectItem(item, NULL));\n    TEST_ASSERT_FALSE(cJSON_IsInvalid(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsFalse(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsTrue(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsBool(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsNull(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsNumber(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsString(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsArray(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsObject(NULL));\n    TEST_ASSERT_FALSE(cJSON_IsRaw(NULL));\n    TEST_ASSERT_NULL(cJSON_CreateString(NULL));\n    TEST_ASSERT_NULL(cJSON_CreateRaw(NULL));\n    TEST_ASSERT_NULL(cJSON_CreateIntArray(NULL, 10));\n    TEST_ASSERT_NULL(cJSON_CreateFloatArray(NULL, 10));\n    TEST_ASSERT_NULL(cJSON_CreateDoubleArray(NULL, 10));\n    TEST_ASSERT_NULL(cJSON_CreateStringArray(NULL, 10));\n    cJSON_AddItemToArray(NULL, item);\n    cJSON_AddItemToArray(item, NULL);\n    cJSON_AddItemToObject(item, \"item\", NULL);\n    cJSON_AddItemToObject(item, NULL, item);\n    cJSON_AddItemToObject(NULL, \"item\", item);\n    cJSON_AddItemToObjectCS(item, \"item\", NULL);\n    cJSON_AddItemToObjectCS(item, NULL, item);\n    cJSON_AddItemToObjectCS(NULL, \"item\", item);\n    cJSON_AddItemReferenceToArray(NULL, item);\n    cJSON_AddItemReferenceToArray(item, NULL);\n    cJSON_AddItemReferenceToObject(item, \"item\", NULL);\n    cJSON_AddItemReferenceToObject(item, NULL, item);\n    cJSON_AddItemReferenceToObject(NULL, \"item\", item);\n    TEST_ASSERT_NULL(cJSON_DetachItemViaPointer(NULL, item));\n    TEST_ASSERT_NULL(cJSON_DetachItemViaPointer(item, NULL));\n    TEST_ASSERT_NULL(cJSON_DetachItemFromArray(NULL, 0));\n    cJSON_DeleteItemFromArray(NULL, 0);\n    TEST_ASSERT_NULL(cJSON_DetachItemFromObject(NULL, \"item\"));\n    TEST_ASSERT_NULL(cJSON_DetachItemFromObject(item, NULL));\n    TEST_ASSERT_NULL(cJSON_DetachItemFromObjectCaseSensitive(NULL, \"item\"));\n    TEST_ASSERT_NULL(cJSON_DetachItemFromObjectCaseSensitive(item, NULL));\n    cJSON_DeleteItemFromObject(NULL, \"item\");\n    cJSON_DeleteItemFromObject(item, NULL);\n    cJSON_DeleteItemFromObjectCaseSensitive(NULL, \"item\");\n    cJSON_DeleteItemFromObjectCaseSensitive(item, NULL);\n    TEST_ASSERT_FALSE(cJSON_InsertItemInArray(array, 0, NULL));\n    TEST_ASSERT_FALSE(cJSON_InsertItemInArray(array, 1, item));\n    TEST_ASSERT_FALSE(cJSON_InsertItemInArray(NULL, 0, item));\n    TEST_ASSERT_FALSE(cJSON_InsertItemInArray(item, 0, NULL));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemViaPointer(NULL, item, item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemViaPointer(item, NULL, item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemViaPointer(item, item, NULL));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInArray(item, 0, NULL));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInArray(NULL, 0, item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInObject(NULL, \"item\", item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInObject(item, NULL, item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInObject(item, \"item\", NULL));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInObjectCaseSensitive(NULL, \"item\", item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInObjectCaseSensitive(item, NULL, item));\n    TEST_ASSERT_FALSE(cJSON_ReplaceItemInObjectCaseSensitive(item, \"item\", NULL));\n    TEST_ASSERT_NULL(cJSON_Duplicate(NULL, true));\n    TEST_ASSERT_FALSE(cJSON_Compare(item, NULL, false));\n    TEST_ASSERT_FALSE(cJSON_Compare(NULL, item, false));\n    TEST_ASSERT_NULL(cJSON_SetValuestring(NULL, \"test\"));\n    TEST_ASSERT_NULL(cJSON_SetValuestring(corruptedString, \"test\"));\n    TEST_ASSERT_NULL(cJSON_SetValuestring(item, NULL));\n    cJSON_Minify(NULL);\n    /* skipped because it is only used via a macro that checks for NULL */\n    /* cJSON_SetNumberHelper(NULL, 0); */\n\n    /* restore corrupted item2 to delete it */\n    item2->prev = originalPrev;\n    cJSON_Delete(corruptedString);\n    cJSON_Delete(array);\n    cJSON_Delete(item);\n}",
          "fn_code_pos": [
            [
              365,
              0
            ],
            [
              471,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_functions_should_not_crash_with_null_pointers",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_set_valuestring_should_return_null_if_strings_overlap(void)\n{       \n    cJSON *obj;\n    char* str;\n    char* str2;\n\n    obj =  cJSON_Parse(\"\\\"foo0z\\\"\");\n    \n    str =  cJSON_SetValuestring(obj, \"abcde\");\n    str += 1;\n    /* The string passed to strcpy overlap which is not allowed.*/\n    str2 = cJSON_SetValuestring(obj, str);\n    /* If it overlaps, the string will be messed up.*/\n    TEST_ASSERT_TRUE(strcmp(str, \"bcde\") == 0);\n    TEST_ASSERT_NULL(str2);\n    cJSON_Delete(obj);\n}",
          "fn_code_pos": [
            [
              473,
              0
            ],
            [
              489,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_set_valuestring_should_return_null_if_strings_overlap",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void *CJSON_CDECL failing_realloc(void *pointer, size_t size)\n{\n    (void)size;\n    (void)pointer;\n    return NULL;\n}",
          "fn_code_pos": [
            [
              491,
              0
            ],
            [
              496,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CJSON_CDECL failing_realloc",
            "parameters": {
              "pointer": "void",
              "size": "size_t"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void ensure_should_fail_on_failed_realloc(void)\n{\n    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};\n    buffer.buffer = (unsigned char *)malloc(100);\n    TEST_ASSERT_NOT_NULL(buffer.buffer);\n\n    TEST_ASSERT_NULL_MESSAGE(ensure(&buffer, 200), \"Ensure didn't fail with failing realloc.\");\n}",
          "fn_code_pos": [
            [
              498,
              0
            ],
            [
              505,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ensure_should_fail_on_failed_realloc",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void skip_utf8_bom_should_skip_bom(void)\n{\n    const unsigned char string[] = \"\\xEF\\xBB\\xBF{}\";\n    parse_buffer buffer = {0, 0, 0, 0, {0, 0, 0}};\n    buffer.content = string;\n    buffer.length = sizeof(string);\n    buffer.hooks = global_hooks;\n\n    TEST_ASSERT_TRUE(skip_utf8_bom(&buffer) == &buffer);\n    TEST_ASSERT_EQUAL_UINT(3U, (unsigned int)buffer.offset);\n}",
          "fn_code_pos": [
            [
              507,
              0
            ],
            [
              517,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "skip_utf8_bom_should_skip_bom",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void skip_utf8_bom_should_not_skip_bom_if_not_at_beginning(void)\n{\n    const unsigned char string[] = \" \\xEF\\xBB\\xBF{}\";\n    parse_buffer buffer = {0, 0, 0, 0, {0, 0, 0}};\n    buffer.content = string;\n    buffer.length = sizeof(string);\n    buffer.hooks = global_hooks;\n    buffer.offset = 1;\n\n    TEST_ASSERT_NULL(skip_utf8_bom(&buffer));\n}",
          "fn_code_pos": [
            [
              519,
              0
            ],
            [
              529,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "skip_utf8_bom_should_not_skip_bom_if_not_at_beginning",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_get_string_value_should_get_a_string(void)\n{\n    cJSON *string = cJSON_CreateString(\"test\");\n    cJSON *number = cJSON_CreateNumber(1);\n\n    TEST_ASSERT_TRUE(cJSON_GetStringValue(string) == string->valuestring);\n    TEST_ASSERT_NULL(cJSON_GetStringValue(number));\n    TEST_ASSERT_NULL(cJSON_GetStringValue(NULL));\n\n    cJSON_Delete(number);\n    cJSON_Delete(string);\n}",
          "fn_code_pos": [
            [
              531,
              0
            ],
            [
              542,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_get_string_value_should_get_a_string",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_get_number_value_should_get_a_number(void)\n{\n    cJSON *string = cJSON_CreateString(\"test\");\n    cJSON *number = cJSON_CreateNumber(1);\n\n    TEST_ASSERT_EQUAL_DOUBLE(cJSON_GetNumberValue(number), number->valuedouble);\n    TEST_ASSERT_DOUBLE_IS_NAN(cJSON_GetNumberValue(string));\n    TEST_ASSERT_DOUBLE_IS_NAN(cJSON_GetNumberValue(NULL));\n\n    cJSON_Delete(number);\n    cJSON_Delete(string);\n}",
          "fn_code_pos": [
            [
              544,
              0
            ],
            [
              555,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_get_number_value_should_get_a_number",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_create_string_reference_should_create_a_string_reference(void)\n{\n    const char *string = \"I am a string!\";\n\n    cJSON *string_reference = cJSON_CreateStringReference(string);\n    TEST_ASSERT_TRUE(string_reference->valuestring == string);\n    TEST_ASSERT_EQUAL_INT(cJSON_IsReference | cJSON_String, string_reference->type);\n\n    cJSON_Delete(string_reference);\n}",
          "fn_code_pos": [
            [
              557,
              0
            ],
            [
              566,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_create_string_reference_should_create_a_string_reference",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_create_object_reference_should_create_an_object_reference(void)\n{\n    cJSON *number_reference = NULL;\n    cJSON *number_object = cJSON_CreateObject();\n    cJSON *number = cJSON_CreateNumber(42);\n    const char key[] = \"number\";\n\n    TEST_ASSERT_TRUE(cJSON_IsNumber(number));\n    TEST_ASSERT_TRUE(cJSON_IsObject(number_object));\n    cJSON_AddItemToObjectCS(number_object, key, number);\n\n    number_reference = cJSON_CreateObjectReference(number);\n    TEST_ASSERT_TRUE(number_reference->child == number);\n    TEST_ASSERT_EQUAL_INT(cJSON_Object | cJSON_IsReference, number_reference->type);\n\n    cJSON_Delete(number_object);\n    cJSON_Delete(number_reference);\n}",
          "fn_code_pos": [
            [
              568,
              0
            ],
            [
              585,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_create_object_reference_should_create_an_object_reference",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_create_array_reference_should_create_an_array_reference(void)\n{\n    cJSON *number_reference = NULL;\n    cJSON *number_array = cJSON_CreateArray();\n    cJSON *number = cJSON_CreateNumber(42);\n\n    TEST_ASSERT_TRUE(cJSON_IsNumber(number));\n    TEST_ASSERT_TRUE(cJSON_IsArray(number_array));\n    cJSON_AddItemToArray(number_array, number);\n\n    number_reference = cJSON_CreateArrayReference(number);\n    TEST_ASSERT_TRUE(number_reference->child == number);\n    TEST_ASSERT_EQUAL_INT(cJSON_Array | cJSON_IsReference, number_reference->type);\n\n    cJSON_Delete(number_array);\n    cJSON_Delete(number_reference);\n}",
          "fn_code_pos": [
            [
              587,
              0
            ],
            [
              603,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_create_array_reference_should_create_an_array_reference",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_add_item_to_object_or_array_should_not_add_itself(void)\n{\n    cJSON *object = cJSON_CreateObject();\n    cJSON *array = cJSON_CreateArray();\n    cJSON_bool flag = false;\n\n    flag = cJSON_AddItemToObject(object, \"key\", object);\n    TEST_ASSERT_FALSE_MESSAGE(flag, \"add an object to itself should fail\");\n\n    flag = cJSON_AddItemToArray(array, array);\n    TEST_ASSERT_FALSE_MESSAGE(flag, \"add an array to itself should fail\");\n\n    cJSON_Delete(object);\n    cJSON_Delete(array);\n}",
          "fn_code_pos": [
            [
              605,
              0
            ],
            [
              619,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_add_item_to_object_or_array_should_not_add_itself",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased(void)\n{\n    cJSON *object = cJSON_CreateObject();\n    cJSON *number = cJSON_CreateNumber(42);\n    char *name = (char *)cJSON_strdup((const unsigned char *)\"number\", &global_hooks);\n\n    TEST_ASSERT_NOT_NULL(object);\n    TEST_ASSERT_NOT_NULL(number);\n    TEST_ASSERT_NOT_NULL(name);\n\n    number->string = name;\n\n    /* The following should not have a use after free\n     * that would show up in valgrind or with AddressSanitizer */\n    cJSON_AddItemToObject(object, number->string, number);\n\n    cJSON_Delete(object);\n}",
          "fn_code_pos": [
            [
              621,
              0
            ],
            [
              638,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_delete_item_from_array_should_not_broken_list_structure(void)\n{\n    const char expected_json1[] = \"{\\\"rd\\\":[{\\\"a\\\":\\\"123\\\"}]}\";\n    const char expected_json2[] = \"{\\\"rd\\\":[{\\\"a\\\":\\\"123\\\"},{\\\"b\\\":\\\"456\\\"}]}\";\n    const char expected_json3[] = \"{\\\"rd\\\":[{\\\"b\\\":\\\"456\\\"}]}\";\n    char *str1 = NULL;\n    char *str2 = NULL;\n    char *str3 = NULL;\n\n    cJSON *root = cJSON_Parse(\"{}\");\n\n    cJSON *array = cJSON_AddArrayToObject(root, \"rd\");\n    cJSON *item1 = cJSON_Parse(\"{\\\"a\\\":\\\"123\\\"}\");\n    cJSON *item2 = cJSON_Parse(\"{\\\"b\\\":\\\"456\\\"}\");\n\n    cJSON_AddItemToArray(array, item1);\n    str1 = cJSON_PrintUnformatted(root);\n    TEST_ASSERT_EQUAL_STRING(expected_json1, str1);\n    free(str1);\n\n    cJSON_AddItemToArray(array, item2);\n    str2 = cJSON_PrintUnformatted(root);\n    TEST_ASSERT_EQUAL_STRING(expected_json2, str2);\n    free(str2);\n\n    /* this should not broken list structure */\n    cJSON_DeleteItemFromArray(array, 0);\n    str3 = cJSON_PrintUnformatted(root);\n    TEST_ASSERT_EQUAL_STRING(expected_json3, str3);\n    free(str3);\n\n    cJSON_Delete(root);\n}",
          "fn_code_pos": [
            [
              640,
              0
            ],
            [
              672,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_delete_item_from_array_should_not_broken_list_structure",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_set_valuestring_to_object_should_not_leak_memory(void)\n{\n    cJSON *root = cJSON_Parse(\"{}\");\n    const char *stringvalue = \"valuestring could be changed safely\";\n    const char *reference_valuestring = \"reference item should be freed by yourself\";\n    const char *short_valuestring = \"shorter valuestring\";\n    const char *long_valuestring = \"new valuestring which much longer than previous should be changed safely\";\n    cJSON *item1 = cJSON_CreateString(stringvalue);\n    cJSON *item2 = cJSON_CreateStringReference(reference_valuestring);\n    char *ptr1 = NULL;\n    char *return_value = NULL;\n\n    cJSON_AddItemToObject(root, \"one\", item1);\n    cJSON_AddItemToObject(root, \"two\", item2);\n\n    ptr1 = item1->valuestring;\n    return_value = cJSON_SetValuestring(cJSON_GetObjectItem(root, \"one\"), short_valuestring);\n    TEST_ASSERT_NOT_NULL(return_value);\n    TEST_ASSERT_EQUAL_PTR_MESSAGE(ptr1, return_value, \"new valuestring shorter than old should not reallocate memory\");\n    TEST_ASSERT_EQUAL_STRING(short_valuestring, cJSON_GetObjectItem(root, \"one\")->valuestring);\n\n    /* we needn't to free the original valuestring manually */\n    ptr1 = item1->valuestring;\n    return_value = cJSON_SetValuestring(cJSON_GetObjectItem(root, \"one\"), long_valuestring);\n    TEST_ASSERT_NOT_NULL(return_value);\n    TEST_ASSERT_NOT_EQUAL_MESSAGE(ptr1, return_value, \"new valuestring longer than old should reallocate memory\")\n    TEST_ASSERT_EQUAL_STRING(long_valuestring, cJSON_GetObjectItem(root, \"one\")->valuestring);\n\n    return_value = cJSON_SetValuestring(cJSON_GetObjectItem(root, \"two\"), long_valuestring);\n    TEST_ASSERT_NULL_MESSAGE(return_value, \"valuestring of reference object should not be changed\");\n    TEST_ASSERT_EQUAL_STRING(reference_valuestring, cJSON_GetObjectItem(root, \"two\")->valuestring);\n\n    cJSON_Delete(root);\n}",
          "fn_code_pos": [
            [
              674,
              0
            ],
            [
              707,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_set_valuestring_to_object_should_not_leak_memory",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_set_bool_value_must_not_break_objects(void)\n{\n    cJSON *bobj, *sobj, *oobj, *refobj = NULL;\n\n    TEST_ASSERT_TRUE((cJSON_SetBoolValue(refobj, 1) == cJSON_Invalid));\n\n    bobj = cJSON_CreateFalse();\n    TEST_ASSERT_TRUE(cJSON_IsFalse(bobj));\n    TEST_ASSERT_TRUE((cJSON_SetBoolValue(bobj, 1) == cJSON_True));\n    TEST_ASSERT_TRUE(cJSON_IsTrue(bobj));\n    cJSON_SetBoolValue(bobj, 1);\n    TEST_ASSERT_TRUE(cJSON_IsTrue(bobj));\n    TEST_ASSERT_TRUE((cJSON_SetBoolValue(bobj, 0) == cJSON_False));\n    TEST_ASSERT_TRUE(cJSON_IsFalse(bobj));\n    cJSON_SetBoolValue(bobj, 0);\n    TEST_ASSERT_TRUE(cJSON_IsFalse(bobj));\n\n    sobj = cJSON_CreateString(\"test\");\n    TEST_ASSERT_TRUE(cJSON_IsString(sobj));\n    cJSON_SetBoolValue(sobj, 1);\n    TEST_ASSERT_TRUE(cJSON_IsString(sobj));\n    cJSON_SetBoolValue(sobj, 0);\n    TEST_ASSERT_TRUE(cJSON_IsString(sobj));\n\n    oobj = cJSON_CreateObject();\n    TEST_ASSERT_TRUE(cJSON_IsObject(oobj));\n    cJSON_SetBoolValue(oobj, 1);\n    TEST_ASSERT_TRUE(cJSON_IsObject(oobj));\n    cJSON_SetBoolValue(oobj, 0);\n    TEST_ASSERT_TRUE(cJSON_IsObject(oobj));\n\n    refobj = cJSON_CreateStringReference(\"conststring\");\n    TEST_ASSERT_TRUE(cJSON_IsString(refobj));\n    TEST_ASSERT_TRUE(refobj->type & cJSON_IsReference);\n    cJSON_SetBoolValue(refobj, 1);\n    TEST_ASSERT_TRUE(cJSON_IsString(refobj));\n    TEST_ASSERT_TRUE(refobj->type & cJSON_IsReference);\n    cJSON_SetBoolValue(refobj, 0);\n    TEST_ASSERT_TRUE(cJSON_IsString(refobj));\n    TEST_ASSERT_TRUE(refobj->type & cJSON_IsReference);\n    cJSON_Delete(refobj);\n\n    refobj = cJSON_CreateObjectReference(oobj);\n    TEST_ASSERT_TRUE(cJSON_IsObject(refobj));\n    TEST_ASSERT_TRUE(refobj->type & cJSON_IsReference);\n    cJSON_SetBoolValue(refobj, 1);\n    TEST_ASSERT_TRUE(cJSON_IsObject(refobj));\n    TEST_ASSERT_TRUE(refobj->type & cJSON_IsReference);\n    cJSON_SetBoolValue(refobj, 0);\n    TEST_ASSERT_TRUE(cJSON_IsObject(refobj));\n    TEST_ASSERT_TRUE(refobj->type & cJSON_IsReference);\n    cJSON_Delete(refobj);\n\n    cJSON_Delete(oobj);\n    cJSON_Delete(bobj);\n    cJSON_Delete(sobj);\n}",
          "fn_code_pos": [
            [
              709,
              0
            ],
            [
              765,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_set_bool_value_must_not_break_objects",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int CJSON_CDECL main(void)\n{\n    UNITY_BEGIN();\n\n    RUN_TEST(cjson_array_foreach_should_loop_over_arrays);\n    RUN_TEST(cjson_array_foreach_should_not_dereference_null_pointer);\n    RUN_TEST(cjson_get_object_item_should_get_object_items);\n    RUN_TEST(cjson_get_object_item_case_sensitive_should_get_object_items);\n    RUN_TEST(cjson_get_object_item_should_not_crash_with_array);\n    RUN_TEST(cjson_get_object_item_case_sensitive_should_not_crash_with_array);\n    RUN_TEST(typecheck_functions_should_check_type);\n    RUN_TEST(cjson_should_not_parse_to_deeply_nested_jsons);\n    RUN_TEST(cjson_set_number_value_should_set_numbers);\n    RUN_TEST(cjson_detach_item_via_pointer_should_detach_items);\n    RUN_TEST(cjson_detach_item_via_pointer_should_return_null_if_item_prev_is_null);\n    RUN_TEST(cjson_replace_item_via_pointer_should_replace_items);\n    RUN_TEST(cjson_replace_item_in_object_should_preserve_name);\n    RUN_TEST(cjson_functions_should_not_crash_with_null_pointers);\n    RUN_TEST(cjson_set_valuestring_should_return_null_if_strings_overlap);\n    RUN_TEST(ensure_should_fail_on_failed_realloc);\n    RUN_TEST(skip_utf8_bom_should_skip_bom);\n    RUN_TEST(skip_utf8_bom_should_not_skip_bom_if_not_at_beginning);\n    RUN_TEST(cjson_get_string_value_should_get_a_string);\n    RUN_TEST(cjson_get_number_value_should_get_a_number);\n    RUN_TEST(cjson_create_string_reference_should_create_a_string_reference);\n    RUN_TEST(cjson_create_object_reference_should_create_an_object_reference);\n    RUN_TEST(cjson_create_array_reference_should_create_an_array_reference);\n    RUN_TEST(cjson_add_item_to_object_or_array_should_not_add_itself);\n    RUN_TEST(cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased);\n    RUN_TEST(cjson_delete_item_from_array_should_not_broken_list_structure);\n    RUN_TEST(cjson_set_valuestring_to_object_should_not_leak_memory);\n    RUN_TEST(cjson_set_bool_value_must_not_break_objects);\n\n    return UNITY_END();\n}",
          "fn_code_pos": [
            [
              767,
              0
            ],
            [
              801,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CJSON_CDECL main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "CJSON_CDECL failing_realloc(void *pointer, size_t size)",
          "fn_dec_pos": [
            [
              491,
              13
            ],
            [
              491,
              68
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CJSON_CDECL failing_realloc",
            "parameters": {
              "pointer": "void",
              "size": "size_t"
            },
            "return_type": null
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [
        [
          "struct cJSON",
          {},
          "",
          [
            373,
            4
          ],
          [
            373,
            16
          ]
        ]
      ],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"unity/examples/unity_config.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"unity/src/unity.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"common.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/compare_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static cJSON_bool compare_from_string(const char * const a, const char * const b, const cJSON_bool case_sensitive)\n{\n    cJSON *a_json = NULL;\n    cJSON *b_json = NULL;\n    cJSON_bool result = false;\n\n    a_json = cJSON_Parse(a);\n    TEST_ASSERT_NOT_NULL_MESSAGE(a_json, \"Failed to parse a.\");\n    b_json = cJSON_Parse(b);\n    TEST_ASSERT_NOT_NULL_MESSAGE(b_json, \"Failed to parse b.\");\n\n    result = cJSON_Compare(a_json, b_json, case_sensitive);\n\n    cJSON_Delete(a_json);\n    cJSON_Delete(b_json);\n\n    return result;\n}",
          "fn_code_pos": [
            [
              26,
              0
            ],
            [
              43,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "compare_from_string",
            "parameters": {
              "a": "char",
              "b": "char",
              "case_sensitive": "cJSON_bool"
            },
            "return_type": "cJSON_bool"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_null_pointer_as_not_equal(void)\n{\n    TEST_ASSERT_FALSE(cJSON_Compare(NULL, NULL, true));\n    TEST_ASSERT_FALSE(cJSON_Compare(NULL, NULL, false));\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              49,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_null_pointer_as_not_equal",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_invalid_as_not_equal(void)\n{\n    cJSON invalid[1];\n    memset(invalid, '\\0', sizeof(invalid));\n\n    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, false));\n    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, true));\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              58,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_invalid_as_not_equal",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_numbers(void)\n{\n    TEST_ASSERT_TRUE(compare_from_string(\"1\", \"1\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"1\", \"1\", false));\n    TEST_ASSERT_TRUE(compare_from_string(\"0.0001\", \"0.0001\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"0.0001\", \"0.0001\", false));\n    TEST_ASSERT_TRUE(compare_from_string(\"1E100\", \"10E99\", false));\n\n    TEST_ASSERT_FALSE(compare_from_string(\"0.5E-100\", \"0.5E-101\", false));\n\n    TEST_ASSERT_FALSE(compare_from_string(\"1\", \"2\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"1\", \"2\", false));\n}",
          "fn_code_pos": [
            [
              60,
              0
            ],
            [
              72,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_numbers",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_booleans(void)\n{\n    /* true */\n    TEST_ASSERT_TRUE(compare_from_string(\"true\", \"true\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"true\", \"true\", false));\n\n    /* false */\n    TEST_ASSERT_TRUE(compare_from_string(\"false\", \"false\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"false\", \"false\", false));\n\n    /* mixed */\n    TEST_ASSERT_FALSE(compare_from_string(\"true\", \"false\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"true\", \"false\", false));\n    TEST_ASSERT_FALSE(compare_from_string(\"false\", \"true\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"false\", \"true\", false));\n}",
          "fn_code_pos": [
            [
              74,
              0
            ],
            [
              89,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_booleans",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_null(void)\n{\n    TEST_ASSERT_TRUE(compare_from_string(\"null\", \"null\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"null\", \"null\", false));\n\n    TEST_ASSERT_FALSE(compare_from_string(\"null\", \"true\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"null\", \"true\", false));\n}",
          "fn_code_pos": [
            [
              91,
              0
            ],
            [
              98,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_null",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_not_accept_invalid_types(void)\n{\n    cJSON invalid[1];\n    memset(invalid, '\\0', sizeof(invalid));\n\n    invalid->type = cJSON_Number | cJSON_String;\n\n    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, true));\n    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, false));\n}",
          "fn_code_pos": [
            [
              100,
              0
            ],
            [
              109,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_not_accept_invalid_types",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_strings(void)\n{\n    TEST_ASSERT_TRUE(compare_from_string(\"\\\"abcdefg\\\"\", \"\\\"abcdefg\\\"\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"\\\"abcdefg\\\"\", \"\\\"abcdefg\\\"\", false));\n\n    TEST_ASSERT_FALSE(compare_from_string(\"\\\"ABCDEFG\\\"\", \"\\\"abcdefg\\\"\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"\\\"ABCDEFG\\\"\", \"\\\"abcdefg\\\"\", false));\n}",
          "fn_code_pos": [
            [
              111,
              0
            ],
            [
              118,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_strings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_raw(void)\n{\n    cJSON *raw1 = NULL;\n    cJSON *raw2 = NULL;\n\n    raw1 = cJSON_Parse(\"\\\"[true, false]\\\"\");\n    TEST_ASSERT_NOT_NULL(raw1);\n    raw2 = cJSON_Parse(\"\\\"[true, false]\\\"\");\n    TEST_ASSERT_NOT_NULL(raw2);\n\n    raw1->type = cJSON_Raw;\n    raw2->type = cJSON_Raw;\n\n    TEST_ASSERT_TRUE(cJSON_Compare(raw1, raw2, true));\n    TEST_ASSERT_TRUE(cJSON_Compare(raw1, raw2, false));\n\n    cJSON_Delete(raw1);\n    cJSON_Delete(raw2);\n}",
          "fn_code_pos": [
            [
              120,
              0
            ],
            [
              138,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_raw",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_arrays(void)\n{\n    TEST_ASSERT_TRUE(compare_from_string(\"[]\", \"[]\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"[]\", \"[]\", false));\n\n    TEST_ASSERT_TRUE(compare_from_string(\"[false,true,null,42,\\\"string\\\",[],{}]\", \"[false, true, null, 42, \\\"string\\\", [], {}]\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"[false,true,null,42,\\\"string\\\",[],{}]\", \"[false, true, null, 42, \\\"string\\\", [], {}]\", false));\n\n    TEST_ASSERT_TRUE(compare_from_string(\"[[[1], 2]]\", \"[[[1], 2]]\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"[[[1], 2]]\", \"[[[1], 2]]\", false));\n\n    TEST_ASSERT_FALSE(compare_from_string(\"[true,null,42,\\\"string\\\",[],{}]\", \"[false, true, null, 42, \\\"string\\\", [], {}]\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"[true,null,42,\\\"string\\\",[],{}]\", \"[false, true, null, 42, \\\"string\\\", [], {}]\", false));\n\n    /* Arrays that are a prefix of another array */\n    TEST_ASSERT_FALSE(compare_from_string(\"[1,2,3]\", \"[1,2]\", true));\n    TEST_ASSERT_FALSE(compare_from_string(\"[1,2,3]\", \"[1,2]\", false));\n}",
          "fn_code_pos": [
            [
              140,
              0
            ],
            [
              157,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void cjson_compare_should_compare_objects(void)\n{\n    TEST_ASSERT_TRUE(compare_from_string(\"{}\", \"{}\", true));\n    TEST_ASSERT_TRUE(compare_from_string(\"{}\", \"{}\", false));\n\n    TEST_ASSERT_TRUE(compare_from_string(\n                \"{\\\"false\\\": false, \\\"true\\\": true, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                \"{\\\"true\\\": true, \\\"false\\\": false, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                true));\n    TEST_ASSERT_FALSE(compare_from_string(\n                \"{\\\"False\\\": false, \\\"true\\\": true, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                \"{\\\"true\\\": true, \\\"false\\\": false, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                true));\n    TEST_ASSERT_TRUE(compare_from_string(\n                \"{\\\"False\\\": false, \\\"true\\\": true, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                \"{\\\"true\\\": true, \\\"false\\\": false, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                false));\n    TEST_ASSERT_FALSE(compare_from_string(\n                \"{\\\"Flse\\\": false, \\\"true\\\": true, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                \"{\\\"true\\\": true, \\\"false\\\": false, \\\"null\\\": null, \\\"number\\\": 42, \\\"string\\\": \\\"string\\\", \\\"array\\\": [], \\\"object\\\": {}}\",\n                false));\n    /* test objects that are a subset of each other */\n    TEST_ASSERT_FALSE(compare_from_string(\n                \"{\\\"one\\\": 1, \\\"two\\\": 2}\",\n                \"{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3}\",\n                true))\n    TEST_ASSERT_FALSE(compare_from_string(\n                \"{\\\"one\\\": 1, \\\"two\\\": 2}\",\n                \"{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3}\",\n                false))\n}",
          "fn_code_pos": [
            [
              159,
              0
            ],
            [
              189,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "cjson_compare_should_compare_objects",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int CJSON_CDECL main(void)\n{\n    UNITY_BEGIN();\n\n    RUN_TEST(cjson_compare_should_compare_null_pointer_as_not_equal);\n    RUN_TEST(cjson_compare_should_compare_invalid_as_not_equal);\n    RUN_TEST(cjson_compare_should_compare_numbers);\n    RUN_TEST(cjson_compare_should_compare_booleans);\n    RUN_TEST(cjson_compare_should_compare_null);\n    RUN_TEST(cjson_compare_should_not_accept_invalid_types);\n    RUN_TEST(cjson_compare_should_compare_strings);\n    RUN_TEST(cjson_compare_should_compare_raw);\n    RUN_TEST(cjson_compare_should_compare_arrays);\n    RUN_TEST(cjson_compare_should_compare_objects);\n\n    return UNITY_END();\n}",
          "fn_code_pos": [
            [
              191,
              0
            ],
            [
              207,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CJSON_CDECL main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity/examples/unity_config.h\"\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include \"unity/src/unity.h\"\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"common.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/testRunnerGeneratorSmall.c": {
      "fn_def_list": [
        {
          "fn_code": "void putcharSpy(int c) { (void)putchar(c);}",
          "fn_code_pos": [
            [
              15,
              0
            ],
            [
              15,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "putcharSpy",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void setUp(void)\n{\n    CounterSetup = 1;\n}",
          "fn_code_pos": [
            [
              22,
              0
            ],
            [
              25,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n    CounterTeardown = 1;\n}",
          "fn_code_pos": [
            [
              27,
              0
            ],
            [
              30,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custom_setup(void)\n{\n    CounterSetup = 2;\n}",
          "fn_code_pos": [
            [
              32,
              0
            ],
            [
              35,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_setup",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custom_teardown(void)\n{\n    CounterTeardown = 2;\n}",
          "fn_code_pos": [
            [
              37,
              0
            ],
            [
              40,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_teardown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysPasses(void)\n{\n    TEST_PASS();\n}",
          "fn_code_pos": [
            [
              42,
              0
            ],
            [
              45,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysPasses",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysFails(void)\n{\n    TEST_FAIL_MESSAGE(\"This Test Should Fail\");\n}",
          "fn_code_pos": [
            [
              47,
              0
            ],
            [
              50,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysFails",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysIgnored(void)\n{\n    TEST_IGNORE_MESSAGE(\"This Test Should Be Ignored\");\n}",
          "fn_code_pos": [
            [
              52,
              0
            ],
            [
              55,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysIgnored",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterSetup, \"Normal Setup Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              57,
              0
            ],
            [
              60,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterTeardown, \"Normal Teardown Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              62,
              0
            ],
            [
              65,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            3,
            0
          ],
          [
            4,
            0
          ]
        ],
        [
          "#include \"Defs.h\"\n",
          [
            4,
            0
          ],
          [
            5,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/testRunnerGeneratorWithMocks.c": {
      "fn_def_list": [
        {
          "fn_code": "void putcharSpy(int c) { (void)putchar(c);}",
          "fn_code_pos": [
            [
              24,
              0
            ],
            [
              24,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "putcharSpy",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void setUp(void)\n{\n    CounterSetup = 1;\n}",
          "fn_code_pos": [
            [
              31,
              0
            ],
            [
              34,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n    CounterTeardown = 1;\n}",
          "fn_code_pos": [
            [
              36,
              0
            ],
            [
              39,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custom_setup(void)\n{\n    CounterSetup = 2;\n}",
          "fn_code_pos": [
            [
              41,
              0
            ],
            [
              44,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_setup",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custom_teardown(void)\n{\n    CounterTeardown = 2;\n}",
          "fn_code_pos": [
            [
              46,
              0
            ],
            [
              49,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_teardown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysPasses(void)\n{\n    TEST_PASS();\n}",
          "fn_code_pos": [
            [
              58,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysPasses",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysFails(void)\n{\n    TEST_FAIL_MESSAGE(\"This Test Should Fail\");\n}",
          "fn_code_pos": [
            [
              63,
              0
            ],
            [
              66,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysFails",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysIgnored(void)\n{\n    TEST_IGNORE_MESSAGE(\"This Test Should Be Ignored\");\n}",
          "fn_code_pos": [
            [
              68,
              0
            ],
            [
              71,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysIgnored",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void qwiktest_ThisTestPassesWhenNoSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, CounterSetup, \"Setup Was Unexpectedly Run\");\n}",
          "fn_code_pos": [
            [
              73,
              0
            ],
            [
              76,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "qwiktest_ThisTestPassesWhenNoSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void qwiktest_ThisTestPassesWhenNoTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, CounterTeardown, \"Teardown Was Unexpectedly Run\");\n}",
          "fn_code_pos": [
            [
              78,
              0
            ],
            [
              81,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "qwiktest_ThisTestPassesWhenNoTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalSuiteSetupAndTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, CounterSuiteSetup, \"Suite Setup Was Unexpectedly Run\");\n}",
          "fn_code_pos": [
            [
              83,
              0
            ],
            [
              86,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalSuiteSetupAndTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterSetup, \"Normal Setup Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              88,
              0
            ],
            [
              91,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterTeardown, \"Normal Teardown Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              93,
              0
            ],
            [
              96,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custtest_ThisTestPassesWhenCustomSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(2, CounterSetup, \"Custom Setup Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              98,
              0
            ],
            [
              101,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custtest_ThisTestPassesWhenCustomSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custtest_ThisTestPassesWhenCustomTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(2, CounterTeardown, \"Custom Teardown Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              103,
              0
            ],
            [
              106,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custtest_ThisTestPassesWhenCustomTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_NotBeConfusedByLongComplicatedStrings(void)\n{\n    const char* crazyString = \"GET / HTTP/1.1\\r\\nHost: 127.0.0.1:8081\\r\\nConnection: keep-alive\\r\\nCache-Control: no-cache\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\\r\\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\\r\\nAccept: */*\\r\\nAccept-Encoding: gzip, deflate, sdch\\r\\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\\r\\n\\r\\n\";\n\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(crazyString, crazyString, \"These Strings Are The Same\");\n}",
          "fn_code_pos": [
            [
              113,
              0
            ],
            [
              118,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NotBeConfusedByLongComplicatedStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_NotDisappearJustBecauseTheTestBeforeAndAfterHaveCrazyStrings(void)\n{\n    TEST_ASSERT_TRUE_MESSAGE(1, \"1 Should be True\");\n}",
          "fn_code_pos": [
            [
              120,
              0
            ],
            [
              123,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NotDisappearJustBecauseTheTestBeforeAndAfterHaveCrazyStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_StillNotBeConfusedByLongComplicatedStrings(void)\n{\n    const char* crazyString = \"GET / HTTP/1.1\\r\\nHost: 127.0.0.1:8081\\r\\nConnection: keep-alive\\r\\nCache-Control: no-cache\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\\r\\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\\r\\nAccept: */*\\r\\nAccept-Encoding: gzip, deflate, sdch\\r\\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\\r\\n\\r\\n\";\n\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(crazyString, crazyString, \"These Strings Are Still The Same\");\n}",
          "fn_code_pos": [
            [
              125,
              0
            ],
            [
              130,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_StillNotBeConfusedByLongComplicatedStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void should_RunTestsStartingWithShouldByDefault(void)\n{\n    TEST_ASSERT_TRUE_MESSAGE(1, \"1 Should be True\");\n}",
          "fn_code_pos": [
            [
              132,
              0
            ],
            [
              135,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "should_RunTestsStartingWithShouldByDefault",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleParameterizedTests(int Num)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, (Num % 5), \"All The Values Are Divisible By 5\");\n}",
          "fn_code_pos": [
            [
              140,
              0
            ],
            [
              143,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleParameterizedTests",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleParameterizedTests2(int Num)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(7, Num, \"The Only Call To This Passes\");\n}",
          "fn_code_pos": [
            [
              146,
              0
            ],
            [
              149,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleParameterizedTests2",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleNonParameterizedTestsWhenParameterizationValid(void)\n{\n    TEST_PASS();\n}",
          "fn_code_pos": [
            [
              151,
              0
            ],
            [
              154,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleNonParameterizedTestsWhenParameterizationValid",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleParameterizedTestsThatFail(int Num)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(3, Num, \"This call should fail\");\n}",
          "fn_code_pos": [
            [
              157,
              0
            ],
            [
              160,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleParameterizedTestsThatFail",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void extest_ShouldHandleCExceptionInTest(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CEXCEPTION_BEING_USED, \"Should be pulling in CException\");\n}",
          "fn_code_pos": [
            [
              163,
              0
            ],
            [
              166,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "extest_ShouldHandleCExceptionInTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n    return custom_main();\n}",
          "fn_code_pos": [
            [
              172,
              0
            ],
            [
              175,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "void suitetest_ThisTestPassesWhenCustomSuiteSetupAndTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterSuiteSetup, \"Suite Setup Should Have Run\");\n}",
          "fn_code_pos": [
            [
              178,
              0
            ],
            [
              181,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suitetest_ThisTestPassesWhenCustomSuiteSetupAndTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ShouldCallMockInitAndVerifyFunctionsForEachTest(void)\n{\n    int passesOrIgnores = (int)(Unity.NumberOfTests - Unity.TestFailures);\n    TEST_ASSERT_EQUAL_MESSAGE(Unity.NumberOfTests,     mockMock_Init_Counter,    \"Mock Init Should Be Called Once Per Test Started\");\n    TEST_ASSERT_EQUAL_MESSAGE(passesOrIgnores,         mockMock_Verify_Counter,  \"Mock Verify Should Be Called Once Per Test Passed\");\n    TEST_ASSERT_EQUAL_MESSAGE(Unity.NumberOfTests - 1, mockMock_Destroy_Counter, \"Mock Destroy Should Be Called Once Per Test Completed\");\n    TEST_ASSERT_EQUAL_MESSAGE(0,                       CMockMemFreeFinalCounter, \"Mock MemFreeFinal Should Not Be Called Until End\");\n}",
          "fn_code_pos": [
            [
              183,
              0
            ],
            [
              190,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ShouldCallMockInitAndVerifyFunctionsForEachTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "custom_main(void)",
          "fn_dec_pos": [
            [
              170,
              4
            ],
            [
              170,
              21
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            3,
            0
          ],
          [
            4,
            0
          ]
        ],
        [
          "#include \"Defs.h\"\n",
          [
            4,
            0
          ],
          [
            5,
            0
          ]
        ],
        [
          "#include \"mockMock.h\"\n",
          [
            5,
            0
          ],
          [
            6,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            8,
            0
          ],
          [
            9,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/testRunnerGenerator.c": {
      "fn_def_list": [
        {
          "fn_code": "void putcharSpy(int c) { (void)putchar(c);}",
          "fn_code_pos": [
            [
              23,
              0
            ],
            [
              23,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "putcharSpy",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void setUp(void)\n{\n    CounterSetup = 1;\n}",
          "fn_code_pos": [
            [
              30,
              0
            ],
            [
              33,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n    CounterTeardown = 1;\n}",
          "fn_code_pos": [
            [
              35,
              0
            ],
            [
              38,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custom_setup(void)\n{\n    CounterSetup = 2;\n}",
          "fn_code_pos": [
            [
              40,
              0
            ],
            [
              43,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_setup",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custom_teardown(void)\n{\n    CounterTeardown = 2;\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_teardown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysPasses(void)\n{\n    TEST_PASS();\n}",
          "fn_code_pos": [
            [
              57,
              0
            ],
            [
              60,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysPasses",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysFails(void)\n{\n    TEST_FAIL_MESSAGE(\"This Test Should Fail\");\n}",
          "fn_code_pos": [
            [
              62,
              0
            ],
            [
              65,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysFails",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisTestAlwaysIgnored(void)\n{\n    TEST_IGNORE_MESSAGE(\"This Test Should Be Ignored\");\n}",
          "fn_code_pos": [
            [
              67,
              0
            ],
            [
              70,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisTestAlwaysIgnored",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void qwiktest_ThisTestPassesWhenNoSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, CounterSetup, \"Setup Was Unexpectedly Run\");\n}",
          "fn_code_pos": [
            [
              72,
              0
            ],
            [
              75,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "qwiktest_ThisTestPassesWhenNoSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void qwiktest_ThisTestPassesWhenNoTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, CounterTeardown, \"Teardown Was Unexpectedly Run\");\n}",
          "fn_code_pos": [
            [
              77,
              0
            ],
            [
              80,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "qwiktest_ThisTestPassesWhenNoTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalSuiteSetupAndTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, CounterSuiteSetup, \"Suite Setup Was Unexpectedly Run\");\n}",
          "fn_code_pos": [
            [
              82,
              0
            ],
            [
              85,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalSuiteSetupAndTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterSetup, \"Normal Setup Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              87,
              0
            ],
            [
              90,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void spec_ThisTestPassesWhenNormalTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterTeardown, \"Normal Teardown Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              92,
              0
            ],
            [
              95,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "spec_ThisTestPassesWhenNormalTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custtest_ThisTestPassesWhenCustomSetupRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(2, CounterSetup, \"Custom Setup Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              97,
              0
            ],
            [
              100,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custtest_ThisTestPassesWhenCustomSetupRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void custtest_ThisTestPassesWhenCustomTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(2, CounterTeardown, \"Custom Teardown Wasn't Run\");\n}",
          "fn_code_pos": [
            [
              102,
              0
            ],
            [
              105,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custtest_ThisTestPassesWhenCustomTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_NotBeConfusedByLongComplicatedStrings(void)\n{\n    const char* crazyString = \"GET / HTTP/1.1\\r\\nHost: 127.0.0.1:8081\\r\\nConnection: keep-alive\\r\\nCache-Control: no-cache\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\\r\\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\\r\\nAccept: */*\\r\\nAccept-Encoding: gzip, deflate, sdch\\r\\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\\r\\n\\r\\n\";\n\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(crazyString, crazyString, \"These Strings Are The Same\");\n}",
          "fn_code_pos": [
            [
              112,
              0
            ],
            [
              117,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NotBeConfusedByLongComplicatedStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_NotDisappearJustBecauseTheTestBeforeAndAfterHaveCrazyStrings(void)\n{\n    TEST_ASSERT_TRUE_MESSAGE(1, \"1 Should be True\");\n}",
          "fn_code_pos": [
            [
              119,
              0
            ],
            [
              122,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NotDisappearJustBecauseTheTestBeforeAndAfterHaveCrazyStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_StillNotBeConfusedByLongComplicatedStrings(void)\n{\n    const char* crazyString = \"GET / HTTP/1.1\\r\\nHost: 127.0.0.1:8081\\r\\nConnection: keep-alive\\r\\nCache-Control: no-cache\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\\r\\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\\r\\nAccept: */*\\r\\nAccept-Encoding: gzip, deflate, sdch\\r\\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\\r\\n\\r\\n\";\n\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(crazyString, crazyString, \"These Strings Are Still The Same\");\n}",
          "fn_code_pos": [
            [
              124,
              0
            ],
            [
              129,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_StillNotBeConfusedByLongComplicatedStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void should_RunTestsStartingWithShouldByDefault(void)\n{\n    TEST_ASSERT_TRUE_MESSAGE(1, \"1 Should be True\");\n}",
          "fn_code_pos": [
            [
              131,
              0
            ],
            [
              134,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "should_RunTestsStartingWithShouldByDefault",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleParameterizedTests(int Num)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(0, (Num % 5), \"All The Values Are Divisible By 5\");\n}",
          "fn_code_pos": [
            [
              139,
              0
            ],
            [
              142,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleParameterizedTests",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleParameterizedTests2(int Num)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(7, Num, \"The Only Call To This Passes\");\n}",
          "fn_code_pos": [
            [
              145,
              0
            ],
            [
              148,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleParameterizedTests2",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleNonParameterizedTestsWhenParameterizationValid(void)\n{\n    TEST_PASS();\n}",
          "fn_code_pos": [
            [
              150,
              0
            ],
            [
              153,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleNonParameterizedTestsWhenParameterizationValid",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void paratest_ShouldHandleParameterizedTestsThatFail(int Num)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(3, Num, \"This call should fail\");\n}",
          "fn_code_pos": [
            [
              156,
              0
            ],
            [
              159,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "paratest_ShouldHandleParameterizedTestsThatFail",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void extest_ShouldHandleCExceptionInTest(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CEXCEPTION_BEING_USED, \"Should be pulling in CException\");\n}",
          "fn_code_pos": [
            [
              162,
              0
            ],
            [
              165,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "extest_ShouldHandleCExceptionInTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n    return custom_main();\n}",
          "fn_code_pos": [
            [
              171,
              0
            ],
            [
              174,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "void suitetest_ThisTestPassesWhenCustomSuiteSetupAndTeardownRan(void)\n{\n    TEST_ASSERT_EQUAL_MESSAGE(1, CounterSuiteSetup, \"Suite Setup Should Have Run\");\n}",
          "fn_code_pos": [
            [
              177,
              0
            ],
            [
              180,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suitetest_ThisTestPassesWhenCustomSuiteSetupAndTeardownRan",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "custom_main(void)",
          "fn_dec_pos": [
            [
              169,
              4
            ],
            [
              169,
              21
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "custom_main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            3,
            0
          ],
          [
            4,
            0
          ]
        ],
        [
          "#include \"Defs.h\"\n",
          [
            4,
            0
          ],
          [
            5,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_yaml.c": {
      "fn_def_list": [
        {
          "fn_code": "static int suite_setup(void)\n{\na_yaml_setup();\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_setup",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              52,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  suite_setup();\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              60,
              0
            ],
            [
              70,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              37,
              12
            ],
            [
              37,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              38,
              12
            ],
            [
              38,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              39,
              12
            ],
            [
              39,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              40,
              12
            ],
            [
              40,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              41,
              12
            ],
            [
              41,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              51,
              5
            ],
            [
              51,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"two.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"three.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <four.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            33,
            0
          ],
          [
            34,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_new2.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              41,
              0
            ],
            [
              44,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              49,
              0
            ],
            [
              52,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static int suite_setup(void)\n{\na_custom_setup();\n}",
          "fn_code_pos": [
            [
              55,
              0
            ],
            [
              58,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_setup",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "static int suite_teardown(int num_failures)\n{\na_custom_teardown();\n}",
          "fn_code_pos": [
            [
              61,
              0
            ],
            [
              64,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_teardown",
            "parameters": {
              "num_failures": "int"
            },
            "return_type": "int"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              68,
              0
            ],
            [
              75,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  suite_setup();\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return suite_teardown(UnityEnd());\n}",
          "fn_code_pos": [
            [
              79,
              0
            ],
            [
              88,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              37,
              12
            ],
            [
              37,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              67,
              5
            ],
            [
              67,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_run2.c": {
      "fn_def_list": [
        {
          "fn_code": "static int suite_setup(void)\n{\na_custom_setup();\n}",
          "fn_code_pos": [
            [
              38,
              0
            ],
            [
              41,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_setup",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "static int suite_teardown(int num_failures)\n{\na_custom_teardown();\n}",
          "fn_code_pos": [
            [
              44,
              0
            ],
            [
              47,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_teardown",
            "parameters": {
              "num_failures": "int"
            },
            "return_type": "int"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              55,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  suite_setup();\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return suite_teardown(UnityEnd());\n}",
          "fn_code_pos": [
            [
              59,
              0
            ],
            [
              69,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              29,
              12
            ],
            [
              29,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              32,
              12
            ],
            [
              32,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              50,
              5
            ],
            [
              50,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_run1.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  GlobalExpectCount = 0;\n  GlobalVerifyOrder = 0;\n  GlobalOrderError = NULL;\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              57,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              58,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              62,
              0
            ],
            [
              65,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              69,
              0
            ],
            [
              76,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              80,
              0
            ],
            [
              88,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              44,
              12
            ],
            [
              44,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              45,
              12
            ],
            [
              45,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              46,
              12
            ],
            [
              46,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              47,
              12
            ],
            [
              47,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              68,
              5
            ],
            [
              68,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ],
        [
          "#include \"one.h\"\n",
          [
            33,
            0
          ],
          [
            34,
            0
          ]
        ],
        [
          "#include \"two.h\"\n",
          [
            34,
            0
          ],
          [
            35,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            35,
            0
          ],
          [
            36,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            36,
            0
          ],
          [
            37,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            37,
            0
          ],
          [
            38,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_param.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              40,
              0
            ],
            [
              44,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21, RUN_TEST_NO_ARGS);\n  RUN_TEST(test_TheSecondThingToTest, 43, RUN_TEST_NO_ARGS);\n  RUN_TEST(test_TheThirdThingToTest, 53, RUN_TEST_NO_ARGS);\n  RUN_TEST(test_TheFourthThingToTest, 58, RUN_TEST_NO_ARGS);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              48,
              0
            ],
            [
              57,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              32,
              12
            ],
            [
              32,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              39,
              5
            ],
            [
              39,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_head1.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              37,
              0
            ],
            [
              41,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              54,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              27,
              12
            ],
            [
              27,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              28,
              12
            ],
            [
              28,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              29,
              12
            ],
            [
              29,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              32,
              12
            ],
            [
              32,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              36,
              5
            ],
            [
              36,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"testsample_head1.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_param.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              42,
              0
            ],
            [
              45,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              46,
              0
            ],
            [
              49,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              50,
              0
            ],
            [
              53,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              57,
              0
            ],
            [
              64,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21, RUN_TEST_NO_ARGS);\n  RUN_TEST(test_TheSecondThingToTest, 43, RUN_TEST_NO_ARGS);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              68,
              0
            ],
            [
              76,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              37,
              12
            ],
            [
              37,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              38,
              12
            ],
            [
              38,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              56,
              5
            ],
            [
              56,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_new2.c": {
      "fn_def_list": [
        {
          "fn_code": "static int suite_setup(void)\n{\na_custom_setup();\n}",
          "fn_code_pos": [
            [
              38,
              0
            ],
            [
              41,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_setup",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "static int suite_teardown(int num_failures)\n{\na_custom_teardown();\n}",
          "fn_code_pos": [
            [
              44,
              0
            ],
            [
              47,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_teardown",
            "parameters": {
              "num_failures": "int"
            },
            "return_type": "int"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              55,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  suite_setup();\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return suite_teardown(UnityEnd());\n}",
          "fn_code_pos": [
            [
              59,
              0
            ],
            [
              69,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              29,
              12
            ],
            [
              29,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              32,
              12
            ],
            [
              32,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              50,
              5
            ],
            [
              50,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_yaml.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              48,
              0
            ],
            [
              51,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              52,
              0
            ],
            [
              55,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              56,
              0
            ],
            [
              59,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static int suite_setup(void)\n{\na_yaml_setup();\n}",
          "fn_code_pos": [
            [
              62,
              0
            ],
            [
              65,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_setup",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              69,
              0
            ],
            [
              76,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  suite_setup();\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              80,
              0
            ],
            [
              89,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              41,
              12
            ],
            [
              41,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              42,
              12
            ],
            [
              42,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              43,
              12
            ],
            [
              43,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              44,
              12
            ],
            [
              44,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              68,
              5
            ],
            [
              68,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ],
        [
          "#include \"two.h\"\n",
          [
            33,
            0
          ],
          [
            34,
            0
          ]
        ],
        [
          "#include \"three.h\"\n",
          [
            34,
            0
          ],
          [
            35,
            0
          ]
        ],
        [
          "#include <four.h>\n",
          [
            35,
            0
          ],
          [
            36,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            36,
            0
          ],
          [
            37,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            37,
            0
          ],
          [
            38,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            38,
            0
          ],
          [
            39,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_cmd.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              49,
              0
            ],
            [
              52,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              53,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              60,
              0
            ],
            [
              67,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              71,
              0
            ],
            [
              79,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              38,
              12
            ],
            [
              38,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              39,
              12
            ],
            [
              39,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              40,
              12
            ],
            [
              40,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              41,
              12
            ],
            [
              41,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              59,
              5
            ],
            [
              59,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            33,
            0
          ],
          [
            34,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            34,
            0
          ],
          [
            35,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            35,
            0
          ],
          [
            36,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_cmd.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              43,
              0
            ],
            [
              47,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              60,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              37,
              12
            ],
            [
              37,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              38,
              12
            ],
            [
              38,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              42,
              5
            ],
            [
              42,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_new1.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              49,
              0
            ],
            [
              53,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              57,
              0
            ],
            [
              66,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              39,
              12
            ],
            [
              39,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              40,
              12
            ],
            [
              40,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              41,
              12
            ],
            [
              41,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              42,
              12
            ],
            [
              42,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              43,
              12
            ],
            [
              43,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              44,
              12
            ],
            [
              44,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              48,
              5
            ],
            [
              48,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"one.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"two.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_def.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              39,
              0
            ],
            [
              43,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              47,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              29,
              12
            ],
            [
              29,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              32,
              12
            ],
            [
              32,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              38,
              5
            ],
            [
              38,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_run2.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              41,
              0
            ],
            [
              44,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              49,
              0
            ],
            [
              52,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static int suite_setup(void)\n{\na_custom_setup();\n}",
          "fn_code_pos": [
            [
              55,
              0
            ],
            [
              58,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_setup",
            "parameters": {},
            "return_type": "int"
          }
        },
        {
          "fn_code": "static int suite_teardown(int num_failures)\n{\na_custom_teardown();\n}",
          "fn_code_pos": [
            [
              61,
              0
            ],
            [
              64,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "suite_teardown",
            "parameters": {
              "num_failures": "int"
            },
            "return_type": "int"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              68,
              0
            ],
            [
              75,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  suite_setup();\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return suite_teardown(UnityEnd());\n}",
          "fn_code_pos": [
            [
              79,
              0
            ],
            [
              88,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              37,
              12
            ],
            [
              37,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              67,
              5
            ],
            [
              67,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_head1.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              40,
              0
            ],
            [
              43,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              44,
              0
            ],
            [
              47,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              48,
              0
            ],
            [
              51,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              55,
              0
            ],
            [
              62,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              66,
              0
            ],
            [
              74,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              54,
              5
            ],
            [
              54,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"testsample_mock_head1.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_new1.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  GlobalExpectCount = 0;\n  GlobalVerifyOrder = 0;\n  GlobalOrderError = NULL;\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              51,
              0
            ],
            [
              57,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              58,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              62,
              0
            ],
            [
              65,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              69,
              0
            ],
            [
              76,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              80,
              0
            ],
            [
              88,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              44,
              12
            ],
            [
              44,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              45,
              12
            ],
            [
              45,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              46,
              12
            ],
            [
              46,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              47,
              12
            ],
            [
              47,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              68,
              5
            ],
            [
              68,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ],
        [
          "#include \"one.h\"\n",
          [
            33,
            0
          ],
          [
            34,
            0
          ]
        ],
        [
          "#include \"two.h\"\n",
          [
            34,
            0
          ],
          [
            35,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            35,
            0
          ],
          [
            36,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            36,
            0
          ],
          [
            37,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            37,
            0
          ],
          [
            38,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_def.c": {
      "fn_def_list": [
        {
          "fn_code": "static void CMock_Init(void)\n{\n  Mockstanky_Init();\n}",
          "fn_code_pos": [
            [
              41,
              0
            ],
            [
              44,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Verify(void)\n{\n  Mockstanky_Verify();\n}",
          "fn_code_pos": [
            [
              45,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void CMock_Destroy(void)\n{\n  Mockstanky_Destroy();\n}",
          "fn_code_pos": [
            [
              49,
              0
            ],
            [
              52,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void resetTest(void)\n{\n  CMock_Verify();\n  CMock_Destroy();\n  tearDown();\n  CMock_Init();\n  setUp();\n}",
          "fn_code_pos": [
            [
              56,
              0
            ],
            [
              63,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/mocksample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n\n  CMock_Guts_MemFreeFinal();\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              67,
              0
            ],
            [
              75,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              34,
              12
            ],
            [
              34,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              35,
              12
            ],
            [
              35,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              36,
              12
            ],
            [
              36,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              37,
              12
            ],
            [
              37,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              55,
              5
            ],
            [
              55,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include \"Mockstanky.h\"\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_run1.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              49,
              0
            ],
            [
              53,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"testdata/testsample.c\");\n  RUN_TEST(test_TheFirstThingToTest, 21);\n  RUN_TEST(test_TheSecondThingToTest, 43);\n  RUN_TEST(test_TheThirdThingToTest, 53);\n  RUN_TEST(test_TheFourthThingToTest, 58);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              57,
              0
            ],
            [
              66,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              39,
              12
            ],
            [
              39,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              40,
              12
            ],
            [
              40,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              41,
              12
            ],
            [
              41,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              42,
              12
            ],
            [
              42,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              43,
              12
            ],
            [
              43,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              44,
              12
            ],
            [
              44,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              48,
              5
            ],
            [
              48,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            25,
            0
          ],
          [
            26,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            26,
            0
          ],
          [
            27,
            0
          ]
        ],
        [
          "#include \"CException.h\"\n",
          [
            27,
            0
          ],
          [
            28,
            0
          ]
        ],
        [
          "#include \"one.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ],
        [
          "#include \"two.h\"\n",
          [
            29,
            0
          ],
          [
            30,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            30,
            0
          ],
          [
            31,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            31,
            0
          ],
          [
            32,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            32,
            0
          ],
          [
            33,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/tests/testparameterized.c": {
      "fn_def_list": [
        {
          "fn_code": "void putcharSpy(int c) { (void)putchar(c);}",
          "fn_code_pos": [
            [
              10,
              0
            ],
            [
              10,
              43
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "putcharSpy",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void setUp(void)\n{\n  SetToOneToFailInTearDown = 0;\n  SetToOneMeanWeAlreadyCheckedThisGuy = 0;\n}",
          "fn_code_pos": [
            [
              46,
              0
            ],
            [
              50,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n  if (SetToOneToFailInTearDown == 1)\n    TEST_FAIL_MESSAGE(\"<= Failed in tearDown\");\n  if ((SetToOneMeanWeAlreadyCheckedThisGuy == 0) && (Unity.CurrentTestFailed > 0))\n  {\n    UnityPrint(\": [[[[ Test Should Have Passed But Did Not ]]]]\");\n    UNITY_OUTPUT_CHAR('\\n');\n  }\n}",
          "fn_code_pos": [
            [
              52,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_TheseShouldAllPass(int Num)\n{\n    TEST_ASSERT_TRUE(Num < 100);\n}",
          "fn_code_pos": [
            [
              66,
              0
            ],
            [
              69,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheseShouldAllPass",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "VERIFY_FAILS_END\n}\n\nTEST_CASE(1)\nTEST_CASE(44)\nTEST_CASE(99)\nTEST_CASE(98)\nvoid test_TheseAreEveryOther(int Num)\n{\n    if (Num & 1)\n    {\n        EXPECT_ABORT_BEGIN\n        TEST_ASSERT_TRUE(Num > 100);\n        VERIFY_FAILS_END\n    }\n    else\n    {\n        TEST_ASSERT_TRUE(Num < 100);\n    }\n}",
          "fn_code_pos": [
            [
              78,
              4
            ],
            [
              97,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheseAreEveryOther",
            "parameters": {
              "Num": "int"
            },
            "return_type": "VERIFY_FAILS_END"
          }
        },
        {
          "fn_code": "void test_NormalPassesStillWork(void)\n{\n    TEST_ASSERT_TRUE(1);\n}",
          "fn_code_pos": [
            [
              99,
              0
            ],
            [
              102,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NormalPassesStillWork",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "test_TheseShouldAllFail(int Num)",
          "fn_dec_pos": [
            [
              74,
              5
            ],
            [
              74,
              37
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NormalFailsStillWork",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_NormalFailsStillWork(void)",
          "fn_dec_pos": [
            [
              104,
              5
            ],
            [
              104,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_NormalFailsStillWork",
            "parameters": {
              "Num": "int"
            },
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <setjmp.h>\n",
          [
            6,
            0
          ],
          [
            7,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            8,
            0
          ],
          [
            9,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/tests/testunity.c": {
      "fn_def_list": [
        {
          "fn_code": "void setUp(void)\n{\n    SetToOneToFailInTearDown = 0;\n    SetToOneMeanWeAlreadyCheckedThisGuy = 0;\n}",
          "fn_code_pos": [
            [
              59,
              0
            ],
            [
              63,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n    endPutcharSpy(); /* Stop suppressing test output */\n    if (SetToOneToFailInTearDown == 1)\n    {\n        /* These will be skipped internally if already failed/ignored */\n        TEST_FAIL_MESSAGE(\"<= Failed in tearDown\");\n        TEST_IGNORE_MESSAGE(\"<= Ignored in tearDown\");\n    }\n    if ((SetToOneMeanWeAlreadyCheckedThisGuy == 0) && (Unity.CurrentTestFailed > 0))\n    {\n        UnityPrint(\": [[[[ Test Should Have Passed But Did Not ]]]]\");\n        UNITY_OUTPUT_CHAR('\\n');\n    }\n}",
          "fn_code_pos": [
            [
              65,
              0
            ],
            [
              79,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUnitySizeInitializationReminder(void)\n{\n    /* This test ensures that sizeof(struct UNITY_STORAGE_T) doesn't change. If this\n     * test breaks, go look at the initialization of the Unity global variable\n     * in unity.c and make sure we're filling in the proper fields. */\n    const char* message = \"Unexpected size for UNITY_STORAGE_T struct. Please check that \"\n                     \"the initialization of the Unity symbol in unity.c is \"\n                     \"still correct.\";\n\n    /* Define a structure with all the same fields as `struct UNITY_STORAGE_T`. */\n#ifdef UNITY_EXCLUDE_DETAILS\n    struct {\n        const char* TestFile;\n        const char* CurrentTestName;\n        UNITY_LINE_TYPE CurrentTestLineNumber;\n        UNITY_COUNTER_TYPE NumberOfTests;\n        UNITY_COUNTER_TYPE TestFailures;\n        UNITY_COUNTER_TYPE TestIgnores;\n        UNITY_COUNTER_TYPE CurrentTestFailed;\n        UNITY_COUNTER_TYPE CurrentTestIgnored;\n#ifndef UNITY_EXCLUDE_SETJMP_H\n        jmp_buf AbortFrame;\n#endif\n    } _Expected_Unity;\n#else\n    struct {\n        const char* TestFile;\n        const char* CurrentTestName;\n        const char* CurrentDetails1;\n        const char* CurrentDetails2;\n        UNITY_LINE_TYPE CurrentTestLineNumber;\n        UNITY_COUNTER_TYPE NumberOfTests;\n        UNITY_COUNTER_TYPE TestFailures;\n        UNITY_COUNTER_TYPE TestIgnores;\n        UNITY_COUNTER_TYPE CurrentTestFailed;\n        UNITY_COUNTER_TYPE CurrentTestIgnored;\n#ifndef UNITY_EXCLUDE_SETJMP_H\n        jmp_buf AbortFrame;\n#endif\n    } _Expected_Unity;\n#endif\n\n    /* Compare our fake structure's size to the actual structure's size. They\n     * should be the same.\n     *\n     * This accounts for alignment, padding, and packing issues that might come\n     * up between different architectures. */\n    TEST_ASSERT_EQUAL_MESSAGE(sizeof(_Expected_Unity), sizeof(Unity), message);\n}",
          "fn_code_pos": [
            [
              81,
              0
            ],
            [
              129,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUnitySizeInitializationReminder",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testPassShouldEndImmediatelyWithPass(void)\n{\n    TEST_PASS();\n    TEST_FAIL_MESSAGE(\"We should have passed already and finished this test\");\n}",
          "fn_code_pos": [
            [
              131,
              0
            ],
            [
              135,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testPassShouldEndImmediatelyWithPass",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testTrue(void)\n{\n    TEST_ASSERT(1);\n\n    TEST_ASSERT_TRUE(1);\n}",
          "fn_code_pos": [
            [
              137,
              0
            ],
            [
              142,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testTrue",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFalse(void)\n{\n    TEST_ASSERT_FALSE(0);\n\n    TEST_ASSERT_UNLESS(0);\n}",
          "fn_code_pos": [
            [
              144,
              0
            ],
            [
              149,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFalse",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testPreviousPass(void)\n{\n    TEST_ASSERT_EQUAL_INT(0U, Unity.TestFailures);\n}",
          "fn_code_pos": [
            [
              151,
              0
            ],
            [
              154,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testPreviousPass",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotVanilla(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT(0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              156,
              0
            ],
            [
              161,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotVanilla",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotTrue(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_TRUE(0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              163,
              0
            ],
            [
              168,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotTrue",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotFalse(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FALSE(1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              170,
              0
            ],
            [
              175,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotFalse",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotUnless(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UNLESS(1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              177,
              0
            ],
            [
              182,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotUnless",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotNotEqual(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_NOT_EQUAL(10, 10);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              184,
              0
            ],
            [
              189,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotNotEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFail(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_FAIL_MESSAGE(\"Expected for testing\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              191,
              0
            ],
            [
              196,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFail",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIsNull(void)\n{\n    char* ptr1 = NULL;\n    const char* ptr2 = \"hello\";\n\n    TEST_ASSERT_NULL(ptr1);\n    TEST_ASSERT_NOT_NULL(ptr2);\n}",
          "fn_code_pos": [
            [
              198,
              0
            ],
            [
              205,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIsNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIsNullShouldFailIfNot(void)\n{\n    const char* ptr1 = \"hello\";\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_NULL(ptr1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              207,
              0
            ],
            [
              214,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIsNullShouldFailIfNot",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotNullShouldFailIfNULL(void)\n{\n    char* ptr1 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_NOT_NULL(ptr1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              216,
              0
            ],
            [
              223,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotNullShouldFailIfNULL",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIgnore(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_IGNORE();\n    TEST_FAIL_MESSAGE(\"This should not be reached\");\n    VERIFY_IGNORES_END\n}",
          "fn_code_pos": [
            [
              225,
              0
            ],
            [
              231,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIgnore",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIgnoreMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_IGNORE_MESSAGE(\"This is an expected TEST_IGNORE_MESSAGE string!\");\n    TEST_FAIL_MESSAGE(\"This should not be reached\");\n    VERIFY_IGNORES_END\n}",
          "fn_code_pos": [
            [
              233,
              0
            ],
            [
              239,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIgnoreMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInts(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT(3982, 3983);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              241,
              0
            ],
            [
              246,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInts",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt8s(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT8(-127, -126);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              248,
              0
            ],
            [
              253,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt8s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt16s(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT16(-16383, -16382);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              255,
              0
            ],
            [
              260,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt16s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt32s(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT32(-2147483647, -2147483648); //use largest 32 bit negative to test printability\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              262,
              0
            ],
            [
              267,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt32s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualBits(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_BITS(0xFF00, 0x5555, 0x5A55);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              269,
              0
            ],
            [
              274,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualBits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUInts(void)\n{\n    UNITY_UINT16 v0, v1;\n\n    v0 = 9000;\n    v1 = 9001;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              276,
              0
            ],
            [
              286,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUInts",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUInt8s(void)\n{\n    UNITY_UINT8 v0, v1;\n\n    v0 = 254;\n    v1 = 255;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT8(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              288,
              0
            ],
            [
              298,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUInt8s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUInt16s(void)\n{\n    UNITY_UINT16 v0, v1;\n\n    v0 = 65535;\n    v1 = 65534;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT16(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              300,
              0
            ],
            [
              310,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUInt16s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUInt32s(void)\n{\n    UNITY_UINT32 v0, v1;\n\n    v0 = 4294967295;\n    v1 = 4294967294;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT32(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              312,
              0
            ],
            [
              322,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUInt32s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex8s(void)\n{\n    UNITY_UINT8 v0, v1;\n\n    v0 = 0x23;\n    v1 = 0x22;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX8(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              324,
              0
            ],
            [
              334,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex8s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex8sIfSigned(void)\n{\n    UNITY_INT8 v0, v1;\n\n    v0 = -2;\n    v1 = 2;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX8(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              336,
              0
            ],
            [
              346,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex8sIfSigned",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex16s(void)\n{\n    UNITY_UINT16 v0, v1;\n\n    v0 = 0x1234;\n    v1 = 0x1235;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX16(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              348,
              0
            ],
            [
              358,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex16s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex16sIfSigned(void)\n{\n    UNITY_INT16 v0, v1;\n\n    v0 = -1024;\n    v1 = -1028;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX16(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              360,
              0
            ],
            [
              370,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex16sIfSigned",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex32s(void)\n{\n    UNITY_UINT32 v0, v1;\n\n    v0 = 900000;\n    v1 = 900001;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              372,
              0
            ],
            [
              382,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex32s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex32sIfSigned(void)\n{\n    UNITY_INT32 v0, v1;\n\n    v0 = -900000;\n    v1 = 900001;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              384,
              0
            ],
            [
              394,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex32sIfSigned",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInts(void)\n{\n    int v0, v1;\n    int *p0, *p1;\n\n    v0 = 19467;\n    v1 = 19467;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT(1837, 1837);\n    TEST_ASSERT_EQUAL_INT(-27365, -27365);\n    TEST_ASSERT_EQUAL_INT(v0, v1);\n    TEST_ASSERT_EQUAL_INT(19467, v1);\n    TEST_ASSERT_EQUAL_INT(v0, 19467);\n    TEST_ASSERT_EQUAL_INT(*p0, v1);\n    TEST_ASSERT_EQUAL_INT(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT(*p0, 19467);\n}",
          "fn_code_pos": [
            [
              396,
              0
            ],
            [
              414,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInts",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt8s(void)\n{\n    UNITY_INT8 v0, v1;\n    UNITY_INT8 *p0, *p1;\n\n    v0 = 0x22;\n    v1 = 0x22;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT8(0x22, 0x22);\n    TEST_ASSERT_EQUAL_INT8(v0, v1);\n    TEST_ASSERT_EQUAL_INT8(0x22, v1);\n    TEST_ASSERT_EQUAL_INT8(v0, 0x22);\n    TEST_ASSERT_EQUAL_INT8(*p0, v1);\n    TEST_ASSERT_EQUAL_INT8(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT8(*p0, 0x22);\n}",
          "fn_code_pos": [
            [
              416,
              0
            ],
            [
              433,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt8s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt8sWhenThereAreDifferencesOutside8Bits(void)\n{\n    TEST_ASSERT_EQUAL_INT8(0x321,0x421);\n    TEST_ASSERT_EQUAL_INT8(0xFF21,0x0021);\n}",
          "fn_code_pos": [
            [
              435,
              0
            ],
            [
              439,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt8sWhenThereAreDifferencesOutside8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt16s(void)\n{\n    UNITY_INT16 v0, v1;\n    UNITY_INT16 *p0, *p1;\n\n    v0 = 0x7876;\n    v1 = 0x7876;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT16(0x7876, 0x7876);\n    TEST_ASSERT_EQUAL_INT16(v0, v1);\n    TEST_ASSERT_EQUAL_INT16(0x7876, v1);\n    TEST_ASSERT_EQUAL_INT16(v0, 0x7876);\n    TEST_ASSERT_EQUAL_INT16(*p0, v1);\n    TEST_ASSERT_EQUAL_INT16(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT16(*p0, 0x7876);\n}",
          "fn_code_pos": [
            [
              441,
              0
            ],
            [
              458,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt16s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt16sNegatives(void)\n{\n    UNITY_INT16 v0, v1;\n    UNITY_INT16 *p0, *p1;\n\n    v0 = -7876;\n    v1 = -7876;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT16(-7876, -7876);\n    TEST_ASSERT_EQUAL_INT16(v0, v1);\n    TEST_ASSERT_EQUAL_INT16(-7876, v1);\n    TEST_ASSERT_EQUAL_INT16(v0, -7876);\n    TEST_ASSERT_EQUAL_INT16(*p0, v1);\n    TEST_ASSERT_EQUAL_INT16(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT16(*p0, -7876);\n}",
          "fn_code_pos": [
            [
              460,
              0
            ],
            [
              477,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt16sNegatives",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt16sWhenThereAreDifferencesOutside16Bits(void)\n{\n    TEST_ASSERT_EQUAL_INT16(0x54321,0x64321);\n    TEST_ASSERT_EQUAL_INT16(0xFFFF4321,0x00004321);\n}",
          "fn_code_pos": [
            [
              479,
              0
            ],
            [
              483,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt16sWhenThereAreDifferencesOutside16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt32s(void)\n{\n    UNITY_INT32 v0, v1;\n    UNITY_INT32 *p0, *p1;\n\n    v0 = 0x78760000;\n    v1 = 0x78760000;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT32(0x78760000, 0x78760000);\n    TEST_ASSERT_EQUAL_INT32(v0, v1);\n    TEST_ASSERT_EQUAL_INT32(0x78760000, v1);\n    TEST_ASSERT_EQUAL_INT32(v0, 0x78760000);\n    TEST_ASSERT_EQUAL_INT32(*p0, v1);\n    TEST_ASSERT_EQUAL_INT32(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT32(*p0, 0x78760000);\n}",
          "fn_code_pos": [
            [
              485,
              0
            ],
            [
              502,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt32s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt32sNegatives(void)\n{\n    UNITY_INT32 v0, v1;\n    UNITY_INT32 *p0, *p1;\n\n    v0 = -123456789;\n    v1 = -123456789;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT32(-123456789, -123456789);\n    TEST_ASSERT_EQUAL_INT32(v0, v1);\n    TEST_ASSERT_EQUAL_INT32(-123456789, v1);\n    TEST_ASSERT_EQUAL_INT32(v0, -123456789);\n    TEST_ASSERT_EQUAL_INT32(*p0, v1);\n    TEST_ASSERT_EQUAL_INT32(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT32(*p0, -123456789);\n}",
          "fn_code_pos": [
            [
              504,
              0
            ],
            [
              521,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt32sNegatives",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUints(void)\n{\n    unsigned int v0, v1;\n    unsigned int *p0, *p1;\n\n    v0 = 19467;\n    v1 = 19467;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_UINT(1837, 1837);\n    TEST_ASSERT_EQUAL_UINT(v0, v1);\n    TEST_ASSERT_EQUAL_UINT(19467, v1);\n    TEST_ASSERT_EQUAL_UINT(v0, 19467);\n    TEST_ASSERT_EQUAL_UINT(*p0, v1);\n    TEST_ASSERT_EQUAL_UINT(*p0, *p1);\n    TEST_ASSERT_EQUAL_UINT(*p0, 19467);\n    TEST_ASSERT_EQUAL_UINT(60872u, 60872u);\n}",
          "fn_code_pos": [
            [
              524,
              0
            ],
            [
              542,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUints",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint8s(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 0x22;\n    v1 = 0x22;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_UINT8(0x22, 0x22);\n    TEST_ASSERT_EQUAL_UINT8(v0, v1);\n    TEST_ASSERT_EQUAL_UINT8(0x22, v1);\n    TEST_ASSERT_EQUAL_UINT8(v0, 0x22);\n    TEST_ASSERT_EQUAL_UINT8(*p0, v1);\n    TEST_ASSERT_EQUAL_UINT8(*p0, *p1);\n    TEST_ASSERT_EQUAL_UINT8(*p0, 0x22);\n}",
          "fn_code_pos": [
            [
              545,
              0
            ],
            [
              562,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint8s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint8sWhenThereAreDifferencesOutside8Bits(void)\n{\n    TEST_ASSERT_EQUAL_UINT8(0x321,0x421);\n    TEST_ASSERT_EQUAL_UINT8(0xFF21,0x0021);\n}",
          "fn_code_pos": [
            [
              564,
              0
            ],
            [
              568,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint8sWhenThereAreDifferencesOutside8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint16s(void)\n{\n    UNITY_UINT16 v0, v1;\n    UNITY_UINT16 *p0, *p1;\n\n    v0 = 0x9876;\n    v1 = 0x9876;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_UINT16(0x9876, 0x9876);\n    TEST_ASSERT_EQUAL_UINT16(v0, v1);\n    TEST_ASSERT_EQUAL_UINT16(0x9876, v1);\n    TEST_ASSERT_EQUAL_UINT16(v0, 0x9876);\n    TEST_ASSERT_EQUAL_UINT16(*p0, v1);\n    TEST_ASSERT_EQUAL_UINT16(*p0, *p1);\n    TEST_ASSERT_EQUAL_UINT16(*p0, 0x9876);\n}",
          "fn_code_pos": [
            [
              570,
              0
            ],
            [
              587,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint16s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint16sWhenThereAreDifferencesOutside16Bits(void)\n{\n    TEST_ASSERT_EQUAL_UINT16(0x54321,0x64321);\n    TEST_ASSERT_EQUAL_UINT16(0xFFFF4321,0x00004321);\n}",
          "fn_code_pos": [
            [
              589,
              0
            ],
            [
              593,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint16sWhenThereAreDifferencesOutside16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint32s(void)\n{\n    UNITY_UINT32 v0, v1;\n    UNITY_UINT32 *p0, *p1;\n\n    v0 = 0x98760000;\n    v1 = 0x98760000;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_UINT32(0x98760000, 0x98760000);\n    TEST_ASSERT_EQUAL_UINT32(v0, v1);\n    TEST_ASSERT_EQUAL_UINT32(0x98760000, v1);\n    TEST_ASSERT_EQUAL_UINT32(v0, 0x98760000);\n    TEST_ASSERT_EQUAL_UINT32(*p0, v1);\n    TEST_ASSERT_EQUAL_UINT32(*p0, *p1);\n    TEST_ASSERT_EQUAL_UINT32(*p0, 0x98760000);\n}",
          "fn_code_pos": [
            [
              595,
              0
            ],
            [
              612,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint32s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqual(void)\n{\n    TEST_ASSERT_NOT_EQUAL(0, 1);\n    TEST_ASSERT_NOT_EQUAL(1, 0);\n    TEST_ASSERT_NOT_EQUAL(100, 101);\n    TEST_ASSERT_NOT_EQUAL(0, -1);\n    TEST_ASSERT_NOT_EQUAL(65535, -65535);\n    TEST_ASSERT_NOT_EQUAL(75, 900);\n    TEST_ASSERT_NOT_EQUAL(-100, -101);\n}",
          "fn_code_pos": [
            [
              614,
              0
            ],
            [
              623,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex8s(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 0x22;\n    v1 = 0x22;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_HEX8(0x22, 0x22);\n    TEST_ASSERT_EQUAL_HEX8(v0, v1);\n    TEST_ASSERT_EQUAL_HEX8(0x22, v1);\n    TEST_ASSERT_EQUAL_HEX8(v0, 0x22);\n    TEST_ASSERT_EQUAL_HEX8(*p0, v1);\n    TEST_ASSERT_EQUAL_HEX8(*p0, *p1);\n    TEST_ASSERT_EQUAL_HEX8(*p0, 0x22);\n}",
          "fn_code_pos": [
            [
              625,
              0
            ],
            [
              642,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex8s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex8sWhenThereAreDifferencesOutside8Bits(void)\n{\n    TEST_ASSERT_EQUAL_HEX8(0x321,0x421);\n    TEST_ASSERT_EQUAL_HEX8(0xFF21,0x0021);\n}",
          "fn_code_pos": [
            [
              644,
              0
            ],
            [
              648,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex8sWhenThereAreDifferencesOutside8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex8sNegatives(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 0xDD;\n    v1 = 0xDD;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_HEX8(0xDD, 0xDD);\n    TEST_ASSERT_EQUAL_HEX8(v0, v1);\n    TEST_ASSERT_EQUAL_HEX8(0xDD, v1);\n    TEST_ASSERT_EQUAL_HEX8(v0, 0xDD);\n    TEST_ASSERT_EQUAL_HEX8(*p0, v1);\n    TEST_ASSERT_EQUAL_HEX8(*p0, *p1);\n    TEST_ASSERT_EQUAL_HEX8(*p0, 0xDD);\n}",
          "fn_code_pos": [
            [
              650,
              0
            ],
            [
              667,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex8sNegatives",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex16s(void)\n{\n    UNITY_UINT16 v0, v1;\n    UNITY_UINT16 *p0, *p1;\n\n    v0 = 0x9876;\n    v1 = 0x9876;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_HEX16(0x9876, 0x9876);\n    TEST_ASSERT_EQUAL_HEX16(v0, v1);\n    TEST_ASSERT_EQUAL_HEX16(0x9876, v1);\n    TEST_ASSERT_EQUAL_HEX16(v0, 0x9876);\n    TEST_ASSERT_EQUAL_HEX16(*p0, v1);\n    TEST_ASSERT_EQUAL_HEX16(*p0, *p1);\n    TEST_ASSERT_EQUAL_HEX16(*p0, 0x9876);\n}",
          "fn_code_pos": [
            [
              669,
              0
            ],
            [
              686,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex16s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex16sWhenThereAreDifferencesOutside16Bits(void)\n{\n    TEST_ASSERT_EQUAL_HEX16(0x54321,0x64321);\n    TEST_ASSERT_EQUAL_HEX16(0xFFFF4321,0x00004321);\n}",
          "fn_code_pos": [
            [
              688,
              0
            ],
            [
              692,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex16sWhenThereAreDifferencesOutside16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex32s(void)\n{\n    UNITY_UINT32 v0, v1;\n    UNITY_UINT32 *p0, *p1;\n\n    v0 = 0x98765432ul;\n    v1 = 0x98765432ul;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_HEX32(0x98765432ul, 0x98765432ul);\n    TEST_ASSERT_EQUAL_HEX32(v0, v1);\n    TEST_ASSERT_EQUAL_HEX32(0x98765432ul, v1);\n    TEST_ASSERT_EQUAL_HEX32(v0, 0x98765432ul);\n    TEST_ASSERT_EQUAL_HEX32(*p0, v1);\n    TEST_ASSERT_EQUAL_HEX32(*p0, *p1);\n    TEST_ASSERT_EQUAL_HEX32(*p0, 0x98765432ul);\n}",
          "fn_code_pos": [
            [
              694,
              0
            ],
            [
              711,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex32s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualBits(void)\n{\n    UNITY_UINT32 v0 = 0xFF55AA00;\n    UNITY_UINT32 v1 = 0x55550000;\n\n    TEST_ASSERT_BITS(v1, v0, 0x55550000);\n    TEST_ASSERT_BITS(v1, v0, 0xFF55CC00);\n    TEST_ASSERT_BITS(0xFFFFFFFF, v0, 0xFF55AA00);\n    TEST_ASSERT_BITS(0xFFFFFFFF, v0, v0);\n    TEST_ASSERT_BITS(0xF0F0F0F0, v0, 0xFC5DAE0F);\n    TEST_ASSERT_BITS_HIGH(v1, v0);\n    TEST_ASSERT_BITS_LOW(0x000055FF, v0);\n    TEST_ASSERT_BIT_HIGH(30, v0);\n    TEST_ASSERT_BIT_LOW(5, v0);\n}",
          "fn_code_pos": [
            [
              713,
              0
            ],
            [
              727,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualBits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualBitHigh(void)\n{\n    UNITY_UINT32 v0 = 0x7F55AA00;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_BIT_HIGH(31, v0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              729,
              0
            ],
            [
              736,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualBitHigh",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualBitLow(void)\n{\n    UNITY_UINT32 v0 = 0xFF55AA00;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_BIT_LOW(30, v0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              738,
              0
            ],
            [
              745,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualBitLow",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualBitsHigh(void)\n{\n    UNITY_UINT32 v0 = 0xFF55AA00;\n    UNITY_UINT32 v1 = 0x55550000;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_BITS_HIGH(v0, v1);\n    VERIFY_FAILS_END\n\n}",
          "fn_code_pos": [
            [
              747,
              0
            ],
            [
              756,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualBitsHigh",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualBitsLow(void)\n{\n    UNITY_UINT32 v0 = 0xFF55AA00;\n    UNITY_UINT32 v1 = 0x55550000;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_BITS_LOW(v0, v1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              758,
              0
            ],
            [
              766,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualBitsLow",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualShorts(void)\n{\n    short v0, v1;\n    short *p0, *p1;\n\n    v0 = 19467;\n    v1 = 19467;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT(1837, 1837);\n    TEST_ASSERT_EQUAL_INT(-2987, -2987);\n    TEST_ASSERT_EQUAL_INT(v0, v1);\n    TEST_ASSERT_EQUAL_INT(19467, v1);\n    TEST_ASSERT_EQUAL_INT(v0, 19467);\n    TEST_ASSERT_EQUAL_INT(*p0, v1);\n    TEST_ASSERT_EQUAL_INT(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT(*p0, 19467);\n}",
          "fn_code_pos": [
            [
              769,
              0
            ],
            [
              787,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualShorts",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUShorts(void)\n{\n    unsigned short v0, v1;\n    unsigned short *p0, *p1;\n\n    v0 = 19467;\n    v1 = 19467;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_UINT(1837, 1837);\n    TEST_ASSERT_EQUAL_UINT(2987, 2987);\n    TEST_ASSERT_EQUAL_UINT(v0, v1);\n    TEST_ASSERT_EQUAL_UINT(19467, v1);\n    TEST_ASSERT_EQUAL_UINT(v0, 19467);\n    TEST_ASSERT_EQUAL_UINT(*p0, v1);\n    TEST_ASSERT_EQUAL_UINT(*p0, *p1);\n    TEST_ASSERT_EQUAL_UINT(*p0, 19467);\n}",
          "fn_code_pos": [
            [
              789,
              0
            ],
            [
              807,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUShorts",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualChars(void)\n{\n    signed char v0, v1;\n    signed char *p0, *p1;\n\n    v0 = 109;\n    v1 = 109;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT(42, 42);\n    TEST_ASSERT_EQUAL_INT(-116, -116);\n    TEST_ASSERT_EQUAL_INT(v0, v1);\n    TEST_ASSERT_EQUAL_INT(109, v1);\n    TEST_ASSERT_EQUAL_INT(v0, 109);\n    TEST_ASSERT_EQUAL_INT(*p0, v1);\n    TEST_ASSERT_EQUAL_INT(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT(*p0, 109);\n}",
          "fn_code_pos": [
            [
              809,
              0
            ],
            [
              827,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualChars",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUChars(void)\n{\n    unsigned char v0, v1;\n    unsigned char *p0, *p1;\n\n    v0 = 251;\n    v1 = 251;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT(42, 42);\n    TEST_ASSERT_EQUAL_INT(v0, v1);\n    TEST_ASSERT_EQUAL_INT(251, v1);\n    TEST_ASSERT_EQUAL_INT(v0, 251);\n    TEST_ASSERT_EQUAL_INT(*p0, v1);\n    TEST_ASSERT_EQUAL_INT(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT(*p0, 251);\n}",
          "fn_code_pos": [
            [
              829,
              0
            ],
            [
              846,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUChars",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualPointers(void)\n{\n    int v0, v1;\n    int *p0, *p1, *p2;\n\n    v0 = 19467;\n    v1 = 18271;\n    p0 = &v0;\n    p1 = &v1;\n    p2 = &v1;\n\n    TEST_ASSERT_EQUAL_PTR(p0, &v0);\n    TEST_ASSERT_EQUAL_PTR(&v1, p1);\n    TEST_ASSERT_EQUAL_PTR(p2, p1);\n    TEST_ASSERT_EQUAL_PTR(&v0, &v0);\n}",
          "fn_code_pos": [
            [
              848,
              0
            ],
            [
              863,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualPointers",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPointers(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_PTR(0x12345678, 0x12345677);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              865,
              0
            ],
            [
              870,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPointers",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIntsWithinDelta(void)\n{\n    TEST_ASSERT_INT_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_INT_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_INT_WITHIN(5, 5000, 5005);\n    TEST_ASSERT_INT_WITHIN(500, 50, -440);\n\n    TEST_ASSERT_INT_WITHIN(2, -1, -1);\n    TEST_ASSERT_INT_WITHIN(5, 1, -1);\n    TEST_ASSERT_INT_WITHIN(5, -1, 1);\n}",
          "fn_code_pos": [
            [
              872,
              0
            ],
            [
              882,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIntsWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIntsWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_INT_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n    TEST_ASSERT_INT_WITHIN_MESSAGE(5, 5000, 4996, \"Custom Message.\");\n    TEST_ASSERT_INT_WITHIN_MESSAGE(5, 5000, 5005, \"Custom Message.\");\n    TEST_ASSERT_INT_WITHIN_MESSAGE(500, 50, -440, \"Custom Message.\");\n\n    TEST_ASSERT_INT_WITHIN_MESSAGE(2, -1, -1, \"Custom Message.\");\n    TEST_ASSERT_INT_WITHIN_MESSAGE(5, 1, -1, \"Custom Message.\");\n    TEST_ASSERT_INT_WITHIN_MESSAGE(5, -1, 1, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              884,
              0
            ],
            [
              894,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIntsWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIntsNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT_WITHIN(5, 5000, 5006);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              896,
              0
            ],
            [
              901,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIntsNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIntsNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT_WITHIN_MESSAGE(5, 5000, 5006, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              903,
              0
            ],
            [
              908,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIntsNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsWithinDelta(void)\n{\n    TEST_ASSERT_UINT_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_UINT_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_UINT_WITHIN(5, 5000, 5005);\n}",
          "fn_code_pos": [
            [
              910,
              0
            ],
            [
              915,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_UINT_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n    TEST_ASSERT_UINT_WITHIN_MESSAGE(5, 5000, 4996, \"Custom Message.\");\n    TEST_ASSERT_UINT_WITHIN_MESSAGE(5, 5000, 5005, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              917,
              0
            ],
            [
              922,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT_WITHIN(1, 2147483647u, 2147483649u);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              924,
              0
            ],
            [
              929,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT_WITHIN_MESSAGE(1, 2147483647u, 2147483649u, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              931,
              0
            ],
            [
              936,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassSmallFirst(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT_WITHIN(5, 1, -1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              938,
              0
            ],
            [
              943,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassSmallFirst",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassSmallFirstAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT_WITHIN_MESSAGE(5, 1, -1, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              945,
              0
            ],
            [
              950,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassSmallFirstAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassBigFirst(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT_WITHIN(5, -1, 1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              952,
              0
            ],
            [
              957,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassBigFirst",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassBigFirstAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT_WITHIN_MESSAGE(5, -1, 1, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              959,
              0
            ],
            [
              964,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUIntsNotWithinDeltaEvenThoughASignedIntWouldPassBigFirstAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX32sWithinDelta(void)\n{\n    TEST_ASSERT_HEX32_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_HEX32_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_HEX32_WITHIN(5, 5000, 5005);\n}",
          "fn_code_pos": [
            [
              966,
              0
            ],
            [
              971,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX32sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX32sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_HEX32_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n    TEST_ASSERT_HEX32_WITHIN_MESSAGE(5, 5000, 4996, \"Custom Message.\");\n    TEST_ASSERT_HEX32_WITHIN_MESSAGE(5, 5000, 5005, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              973,
              0
            ],
            [
              978,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX32sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX32sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX32_WITHIN(1, 2147483647u, 2147483649u);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              980,
              0
            ],
            [
              985,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX32sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX32sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX32_WITHIN_MESSAGE(1, 2147483647u, 2147483649u, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              987,
              0
            ],
            [
              992,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX32sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX32sNotWithinDeltaEvenThoughASignedIntWouldPass(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX32_WITHIN(5, 1, -1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              994,
              0
            ],
            [
              999,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX32sNotWithinDeltaEvenThoughASignedIntWouldPass",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX32sNotWithinDeltaEvenThoughASignedIntWouldPassAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX32_WITHIN_MESSAGE(5, 1, -1, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1001,
              0
            ],
            [
              1006,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX32sNotWithinDeltaEvenThoughASignedIntWouldPassAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX16sWithinDelta(void)\n{\n    TEST_ASSERT_HEX16_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_HEX16_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_HEX16_WITHIN(5, 5000, 5005);\n}",
          "fn_code_pos": [
            [
              1008,
              0
            ],
            [
              1013,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX16sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX16sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_HEX16_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n    TEST_ASSERT_HEX16_WITHIN_MESSAGE(5, 5000, 4996, \"Custom Message.\");\n    TEST_ASSERT_HEX16_WITHIN_MESSAGE(5, 5000, 5005, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1015,
              0
            ],
            [
              1020,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX16sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX16sWithinDeltaWhenThereAreDifferenceOutsideOf16Bits(void)\n{\n    TEST_ASSERT_HEX16_WITHIN(5, 0x54321, 0x44321);\n}",
          "fn_code_pos": [
            [
              1022,
              0
            ],
            [
              1025,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX16sWithinDeltaWhenThereAreDifferenceOutsideOf16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX16sWithinDeltaWhenThereAreDifferenceOutsideOf16BitsAndCustomMessage(void)\n{\n    TEST_ASSERT_HEX16_WITHIN_MESSAGE(5, 0x54321, 0x44321, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1027,
              0
            ],
            [
              1030,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX16sWithinDeltaWhenThereAreDifferenceOutsideOf16BitsAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX16sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX16_WITHIN(2, 65535, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1032,
              0
            ],
            [
              1037,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX16sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX16sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX16_WITHIN_MESSAGE(2, 65535, 0, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1039,
              0
            ],
            [
              1044,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX16sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX8sWithinDelta(void)\n{\n    TEST_ASSERT_HEX8_WITHIN(1, 254, 255);\n    TEST_ASSERT_HEX8_WITHIN(5, 251, 255);\n    TEST_ASSERT_HEX8_WITHIN(5, 1, 4);\n}",
          "fn_code_pos": [
            [
              1046,
              0
            ],
            [
              1051,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX8sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX8sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_HEX8_WITHIN_MESSAGE(1, 254, 255, \"Custom Message.\");\n    TEST_ASSERT_HEX8_WITHIN_MESSAGE(5, 251, 255, \"Custom Message.\");\n    TEST_ASSERT_HEX8_WITHIN_MESSAGE(5, 1, 4, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1053,
              0
            ],
            [
              1058,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX8sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX8sWithinDeltaWhenThereAreDifferenceOutsideOf8Bits(void)\n{\n    TEST_ASSERT_HEX8_WITHIN(5, 0x123, 0xF23);\n}",
          "fn_code_pos": [
            [
              1060,
              0
            ],
            [
              1063,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX8sWithinDeltaWhenThereAreDifferenceOutsideOf8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX8sWithinDeltaWhenThereAreDifferenceOutsideOf8BitsAndCustomMessage(void)\n{\n    TEST_ASSERT_HEX8_WITHIN_MESSAGE(5, 0x123, 0xF23, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1065,
              0
            ],
            [
              1068,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX8sWithinDeltaWhenThereAreDifferenceOutsideOf8BitsAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX8sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX8_WITHIN(2, 255, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1070,
              0
            ],
            [
              1075,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX8sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX8sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX8_WITHIN_MESSAGE(2, 255, 0, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1077,
              0
            ],
            [
              1082,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX8sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT32sWithinDelta(void)\n{\n    TEST_ASSERT_UINT32_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_UINT32_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_UINT32_WITHIN(5, 5000, 5005);\n}",
          "fn_code_pos": [
            [
              1086,
              0
            ],
            [
              1091,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT32sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT32sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_UINT32_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n    TEST_ASSERT_UINT32_WITHIN_MESSAGE(5, 5000, 4996, \"Custom Message.\");\n    TEST_ASSERT_UINT32_WITHIN_MESSAGE(5, 5000, 5005, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1093,
              0
            ],
            [
              1098,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT32sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT32sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT32_WITHIN(1, 2147483647u, 2147483649u);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1100,
              0
            ],
            [
              1105,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT32sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT32sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT32_WITHIN_MESSAGE(1, 2147483647u, 2147483649u, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1107,
              0
            ],
            [
              1112,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT32sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT32sNotWithinDeltaEvenThoughASignedIntWouldPass(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT32_WITHIN(5, 1, -1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1114,
              0
            ],
            [
              1119,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT32sNotWithinDeltaEvenThoughASignedIntWouldPass",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT32sNotWithinDeltaEvenThoughASignedIntWouldPassAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT32_WITHIN_MESSAGE(5, 1, -1, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1121,
              0
            ],
            [
              1126,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT32sNotWithinDeltaEvenThoughASignedIntWouldPassAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT16sWithinDelta(void)\n{\n    TEST_ASSERT_UINT16_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_UINT16_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_UINT16_WITHIN(5, 5000, 5005);\n}",
          "fn_code_pos": [
            [
              1128,
              0
            ],
            [
              1133,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT16sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT16sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_UINT16_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n    TEST_ASSERT_UINT16_WITHIN_MESSAGE(5, 5000, 4996, \"Custom Message.\");\n    TEST_ASSERT_UINT16_WITHIN_MESSAGE(5, 5000, 5005, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1135,
              0
            ],
            [
              1140,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT16sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16Bits(void)\n{\n    TEST_ASSERT_UINT16_WITHIN(5, 0x54321, 0x44321);\n}",
          "fn_code_pos": [
            [
              1142,
              0
            ],
            [
              1145,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16BitsAndCustomMessage(void)\n{\n    TEST_ASSERT_UINT16_WITHIN_MESSAGE(5, 0x54321, 0x44321, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1147,
              0
            ],
            [
              1150,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16BitsAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT16sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT16_WITHIN(2, 65535, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1152,
              0
            ],
            [
              1157,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT16sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT16sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT16_WITHIN_MESSAGE(2, 65535, 0, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1159,
              0
            ],
            [
              1164,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT16sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT8sWithinDelta(void)\n{\n    TEST_ASSERT_UINT8_WITHIN(1, 254, 255);\n    TEST_ASSERT_UINT8_WITHIN(5, 251, 255);\n    TEST_ASSERT_UINT8_WITHIN(5, 1, 4);\n}",
          "fn_code_pos": [
            [
              1166,
              0
            ],
            [
              1171,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT8sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT8sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_UINT8_WITHIN_MESSAGE(1, 254, 255, \"Custom Message.\");\n    TEST_ASSERT_UINT8_WITHIN_MESSAGE(5, 251, 255, \"Custom Message.\");\n    TEST_ASSERT_UINT8_WITHIN_MESSAGE(5, 1, 4, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1173,
              0
            ],
            [
              1178,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT8sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8Bits(void)\n{\n    TEST_ASSERT_UINT8_WITHIN(5, 0x123, 0xF23);\n}",
          "fn_code_pos": [
            [
              1180,
              0
            ],
            [
              1183,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8BitsAndCustomMessage(void)\n{\n    TEST_ASSERT_UINT8_WITHIN_MESSAGE(5, 0x123, 0xF23, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1185,
              0
            ],
            [
              1188,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8BitsAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT8sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT8_WITHIN(2, 255, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1190,
              0
            ],
            [
              1195,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT8sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT8sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT8_WITHIN_MESSAGE(2, 255, 0, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1197,
              0
            ],
            [
              1202,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT8sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT32sWithinDelta(void)\n{\n    TEST_ASSERT_INT32_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_INT32_WITHIN(5, 1, -2);\n    TEST_ASSERT_INT32_WITHIN(5, -2, 1);\n}",
          "fn_code_pos": [
            [
              1204,
              0
            ],
            [
              1209,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT32sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT32sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_INT32_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1211,
              0
            ],
            [
              1214,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT32sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT32sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT32_WITHIN(1, -3, 1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1216,
              0
            ],
            [
              1221,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT32sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT32sNotWithinDeltaAndDifferenceOverflows(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT32_WITHIN(1, -1, 0x7FFFFFFF);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1223,
              0
            ],
            [
              1228,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT32sNotWithinDeltaAndDifferenceOverflows",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT32sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT32_WITHIN_MESSAGE(1, -2, 1, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1229,
              0
            ],
            [
              1234,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT32sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT16sWithinDelta(void)\n{\n    TEST_ASSERT_INT16_WITHIN(1, 5000, 5001);\n    TEST_ASSERT_INT16_WITHIN(5, 2, -2);\n    TEST_ASSERT_INT16_WITHIN(5, -2, 2);\n}",
          "fn_code_pos": [
            [
              1236,
              0
            ],
            [
              1241,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT16sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT16sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_INT16_WITHIN_MESSAGE(1, 5000, 5001, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1243,
              0
            ],
            [
              1246,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT16sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16Bits(void)\n{\n    TEST_ASSERT_INT16_WITHIN(5, 0x54321, 0x44321);\n}",
          "fn_code_pos": [
            [
              1248,
              0
            ],
            [
              1251,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16BitsAndCustomMessage(void)\n{\n    TEST_ASSERT_INT16_WITHIN_MESSAGE(5, 0x54321, 0x44321, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1253,
              0
            ],
            [
              1256,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT16sWithinDeltaWhenThereAreDifferenceOutsideOf16BitsAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT16sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT16_WITHIN(2, 4, -2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1258,
              0
            ],
            [
              1263,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT16sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT16sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT16_WITHIN_MESSAGE(2, 3, 0, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1265,
              0
            ],
            [
              1270,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT16sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT8sWithinDelta(void)\n{\n    TEST_ASSERT_INT8_WITHIN(1, 127, 126);\n    TEST_ASSERT_INT8_WITHIN(5, -2, 2);\n    TEST_ASSERT_INT8_WITHIN(5, 2, -2);\n}",
          "fn_code_pos": [
            [
              1272,
              0
            ],
            [
              1277,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT8sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT8sWithinDeltaAndCustomMessage(void)\n{\n    TEST_ASSERT_INT8_WITHIN_MESSAGE(5, 1, 4, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1279,
              0
            ],
            [
              1282,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT8sWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8Bits(void)\n{\n    TEST_ASSERT_INT8_WITHIN(5, 0x123, 0xF23);\n}",
          "fn_code_pos": [
            [
              1284,
              0
            ],
            [
              1287,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8BitsAndCustomMessage(void)\n{\n    TEST_ASSERT_INT8_WITHIN_MESSAGE(5, 0x123, 0xF23, \"Custom Message.\");\n}",
          "fn_code_pos": [
            [
              1289,
              0
            ],
            [
              1292,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT8sWithinDeltaWhenThereAreDifferenceOutsideOf8BitsAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT8sNotWithinDelta(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT8_WITHIN(2, -3, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1294,
              0
            ],
            [
              1299,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT8sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT8sNotWithinDeltaAndCustomMessage(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT8_WITHIN_MESSAGE(2, -4, 0, \"Custom Message.\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1301,
              0
            ],
            [
              1306,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT8sNotWithinDeltaAndCustomMessage",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThan(void)\n{\n    UNITY_INT v0, v1;\n    UNITY_INT *p0, *p1;\n\n    v0 = 0;\n    v1 = 1;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN(v0, v1);\n    TEST_ASSERT_GREATER_THAN(*p0, v1);\n    TEST_ASSERT_GREATER_THAN(v0, *p1);\n    TEST_ASSERT_GREATER_THAN(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1310,
              0
            ],
            [
              1324,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanINT(void)\n{\n    UNITY_INT v0, v1;\n    UNITY_INT *p0, *p1;\n\n    v0 = 302;\n    v1 = 3334;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_INT(v0, v1);\n    TEST_ASSERT_GREATER_THAN_INT(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_INT(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_INT(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1326,
              0
            ],
            [
              1340,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanINT",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanINT8(void)\n{\n    UNITY_INT8 v0, v1;\n    UNITY_INT8 *p0, *p1;\n\n    v0 = -128;\n    v1 = 127;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_INT8(v0, v1);\n    TEST_ASSERT_GREATER_THAN_INT8(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_INT8(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_INT8(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1343,
              0
            ],
            [
              1357,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanINT8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanINT16(void)\n{\n    UNITY_INT16 v0, v1;\n    UNITY_INT16 *p0, *p1;\n\n    v0 = -32768;\n    v1 = 32767;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_INT16(v0, v1);\n    TEST_ASSERT_GREATER_THAN_INT16(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_INT16(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_INT16(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1359,
              0
            ],
            [
              1373,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanINT16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanINT32(void)\n{\n    UNITY_INT32 v0, v1;\n    UNITY_INT32 *p0, *p1;\n\n    v0 = -214783648;\n    v1 = 214783647;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_INT32(v0, v1);\n    TEST_ASSERT_GREATER_THAN_INT32(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_INT32(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_INT32(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1375,
              0
            ],
            [
              1389,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanINT32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanUINT(void)\n{\n    UNITY_UINT v0, v1;\n    UNITY_UINT *p0, *p1;\n\n    v0 = 0;\n    v1 = 1;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_UINT(v0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_UINT(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1391,
              0
            ],
            [
              1405,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanUINT",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanUINT8(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 0;\n    v1 = 255;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_UINT8(v0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT8(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT8(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_UINT8(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1408,
              0
            ],
            [
              1422,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanUINT8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanUINT16(void)\n{\n    UNITY_UINT16 v0, v1;\n    UNITY_UINT16 *p0, *p1;\n\n    v0 = 0;\n    v1 = 65535;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_UINT16(v0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT16(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT16(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_UINT16(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1424,
              0
            ],
            [
              1438,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanUINT16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanUINT32(void)\n{\n    UNITY_UINT32 v0, v1;\n    UNITY_UINT32 *p0, *p1;\n\n    v0 = 0;\n    v1 = 4294967295;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_UINT32(v0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT32(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_UINT32(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_UINT32(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1440,
              0
            ],
            [
              1454,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanUINT32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanHEX8(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 0x00;\n    v1 = 0xFF;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_HEX8(v0, v1);\n    TEST_ASSERT_GREATER_THAN_HEX8(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_HEX8(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_HEX8(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1456,
              0
            ],
            [
              1470,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanHEX8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanHEX16(void)\n{\n    UNITY_UINT16 v0, v1;\n    UNITY_UINT16 *p0, *p1;\n\n    v0 = 0x0000;\n    v1 = 0xFFFF;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_HEX16(v0, v1);\n    TEST_ASSERT_GREATER_THAN_HEX16(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_HEX16(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_HEX16(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1472,
              0
            ],
            [
              1486,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanHEX16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testGreaterThanHEX32(void)\n{\n    UNITY_UINT32 v0, v1;\n    UNITY_UINT32 *p0, *p1;\n\n    v0 = 0x00000000;\n    v1 = 0xFFFFFFFF;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_GREATER_THAN_HEX32(v0, v1);\n    TEST_ASSERT_GREATER_THAN_HEX32(*p0, v1);\n    TEST_ASSERT_GREATER_THAN_HEX32(v0, *p1);\n    TEST_ASSERT_GREATER_THAN_HEX32(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1488,
              0
            ],
            [
              1502,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testGreaterThanHEX32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotGreaterThan(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_GREATER_THAN(0, -1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1505,
              0
            ],
            [
              1510,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotGreaterThan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThan(void)\n{\n    UNITY_INT v0, v1;\n    UNITY_INT *p0, *p1;\n\n    v0 = 0;\n    v1 = -1;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN(v0, v1);\n    TEST_ASSERT_LESS_THAN(*p0, v1);\n    TEST_ASSERT_LESS_THAN(v0, *p1);\n    TEST_ASSERT_LESS_THAN(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1512,
              0
            ],
            [
              1526,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanINT(void)\n{\n    UNITY_INT v0, v1;\n    UNITY_INT *p0, *p1;\n\n    v0 = 3334;\n    v1 = 302;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_INT(v0, v1);\n    TEST_ASSERT_LESS_THAN_INT(*p0, v1);\n    TEST_ASSERT_LESS_THAN_INT(v0, *p1);\n    TEST_ASSERT_LESS_THAN_INT(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1528,
              0
            ],
            [
              1542,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanINT",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanINT8(void)\n{\n    UNITY_INT8 v0, v1;\n    UNITY_INT8 *p0, *p1;\n\n    v0 = 127;\n    v1 = -128;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_INT8(v0, v1);\n    TEST_ASSERT_LESS_THAN_INT8(*p0, v1);\n    TEST_ASSERT_LESS_THAN_INT8(v0, *p1);\n    TEST_ASSERT_LESS_THAN_INT8(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1545,
              0
            ],
            [
              1559,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanINT8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanINT16(void)\n{\n    UNITY_INT16 v0, v1;\n    UNITY_INT16 *p0, *p1;\n\n    v0 = 32767;\n    v1 = -32768;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_INT16(v0, v1);\n    TEST_ASSERT_LESS_THAN_INT16(*p0, v1);\n    TEST_ASSERT_LESS_THAN_INT16(v0, *p1);\n    TEST_ASSERT_LESS_THAN_INT16(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1561,
              0
            ],
            [
              1575,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanINT16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanINT32(void)\n{\n    UNITY_INT32 v0, v1;\n    UNITY_INT32 *p0, *p1;\n\n    v0 = 214783647;\n    v1 = -214783648;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_INT32(v0, v1);\n    TEST_ASSERT_LESS_THAN_INT32(*p0, v1);\n    TEST_ASSERT_LESS_THAN_INT32(v0, *p1);\n    TEST_ASSERT_LESS_THAN_INT32(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1577,
              0
            ],
            [
              1591,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanINT32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanUINT(void)\n{\n    UNITY_UINT v0, v1;\n    UNITY_UINT *p0, *p1;\n\n    v0 = 1;\n    v1 = 0;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_UINT(v0, v1);\n    TEST_ASSERT_LESS_THAN_UINT(*p0, v1);\n    TEST_ASSERT_LESS_THAN_UINT(v0, *p1);\n    TEST_ASSERT_LESS_THAN_UINT(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1593,
              0
            ],
            [
              1607,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanUINT",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanUINT8(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 255;\n    v1 = 0;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_UINT8(v0, v1);\n    TEST_ASSERT_LESS_THAN_UINT8(*p0, v1);\n    TEST_ASSERT_LESS_THAN_UINT8(v0, *p1);\n    TEST_ASSERT_LESS_THAN_UINT8(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1610,
              0
            ],
            [
              1624,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanUINT8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanUINT16(void)\n{\n    UNITY_UINT16 v0, v1;\n    UNITY_UINT16 *p0, *p1;\n\n    v0 = 65535;\n    v1 = 0;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_UINT16(v0, v1);\n    TEST_ASSERT_LESS_THAN_UINT16(*p0, v1);\n    TEST_ASSERT_LESS_THAN_UINT16(v0, *p1);\n    TEST_ASSERT_LESS_THAN_UINT16(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1626,
              0
            ],
            [
              1640,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanUINT16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanUINT32(void)\n{\n    UNITY_UINT32 v0, v1;\n    UNITY_UINT32 *p0, *p1;\n\n    v0 = 4294967295;\n    v1 = 0;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_UINT32(v0, v1);\n    TEST_ASSERT_LESS_THAN_UINT32(*p0, v1);\n    TEST_ASSERT_LESS_THAN_UINT32(v0, *p1);\n    TEST_ASSERT_LESS_THAN_UINT32(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1642,
              0
            ],
            [
              1656,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanUINT32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanHEX8(void)\n{\n    UNITY_UINT8 v0, v1;\n    UNITY_UINT8 *p0, *p1;\n\n    v0 = 0xFF;\n    v1 = 0x00;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_HEX8(v0, v1);\n    TEST_ASSERT_LESS_THAN_HEX8(*p0, v1);\n    TEST_ASSERT_LESS_THAN_HEX8(v0, *p1);\n    TEST_ASSERT_LESS_THAN_HEX8(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1658,
              0
            ],
            [
              1672,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanHEX8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanHEX16(void)\n{\n    UNITY_UINT16 v0, v1;\n    UNITY_UINT16 *p0, *p1;\n\n    v0 = 0xFFFF;\n    v1 = 0x0000;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_HEX16(v0, v1);\n    TEST_ASSERT_LESS_THAN_HEX16(*p0, v1);\n    TEST_ASSERT_LESS_THAN_HEX16(v0, *p1);\n    TEST_ASSERT_LESS_THAN_HEX16(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1674,
              0
            ],
            [
              1688,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanHEX16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testLessThanHEX32(void)\n{\n    UNITY_UINT32 v0, v1;\n    UNITY_UINT32 *p0, *p1;\n\n    v0 = 0xFFFFFFFF;\n    v1 = 0x00000000;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_LESS_THAN_HEX32(v0, v1);\n    TEST_ASSERT_LESS_THAN_HEX32(*p0, v1);\n    TEST_ASSERT_LESS_THAN_HEX32(v0, *p1);\n    TEST_ASSERT_LESS_THAN_HEX32(*p0, *p1);\n}",
          "fn_code_pos": [
            [
              1690,
              0
            ],
            [
              1704,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testLessThanHEX32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotLessThan(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_LESS_THAN(0, 1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1707,
              0
            ],
            [
              1712,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotLessThan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualStrings(void)\n{\n    const char *testString = \"foo\";\n\n    TEST_ASSERT_EQUAL_STRING(testString, testString);\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(\"foo\", \"foo\", \"foo isn't foo\");\n    TEST_ASSERT_EQUAL_STRING(\"foo\", testString);\n    TEST_ASSERT_EQUAL_STRING(testString, \"foo\");\n    TEST_ASSERT_EQUAL_STRING(\"\", \"\");\n}",
          "fn_code_pos": [
            [
              1717,
              0
            ],
            [
              1726,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualStrings",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualStringsLen(void)\n{\n    const char *testString = \"foobar\";\n    TEST_ASSERT_EQUAL_STRING_LEN(testString, testString, strlen(testString));\n    TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(\"foobar\", \"foobaz\", 5, \"fooba isn't fooba\");\n    TEST_ASSERT_EQUAL_STRING_LEN(\"foo\", testString, 3);\n    TEST_ASSERT_EQUAL_STRING_LEN(testString, \"foo\", 3);\n    TEST_ASSERT_EQUAL_STRING_LEN(\"\", \"\", 3);\n}",
          "fn_code_pos": [
            [
              1728,
              0
            ],
            [
              1736,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualStringsLen",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualStringsWithCarriageReturnsAndLineFeeds(void)\n{\n    const char *testString = \"foo\\r\\nbar\";\n\n    TEST_ASSERT_EQUAL_STRING(testString, testString);\n    TEST_ASSERT_EQUAL_STRING(\"foo\\r\\nbar\", \"foo\\r\\nbar\");\n    TEST_ASSERT_EQUAL_STRING(\"foo\\r\\nbar\", testString);\n    TEST_ASSERT_EQUAL_STRING(testString, \"foo\\r\\nbar\");\n    TEST_ASSERT_EQUAL_STRING(\"\", \"\");\n}",
          "fn_code_pos": [
            [
              1738,
              0
            ],
            [
              1747,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualStringsWithCarriageReturnsAndLineFeeds",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString1(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(\"foo\", \"bar\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1749,
              0
            ],
            [
              1754,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringLen1(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_LEN(\"foobar\", \"foobaz\", 6);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1756,
              0
            ],
            [
              1761,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringLen1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString2(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(\"foo\", \"\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1763,
              0
            ],
            [
              1768,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringLen2(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_LEN(\"foo\", \"\", 3);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1770,
              0
            ],
            [
              1775,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringLen2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString3(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(\"\", \"bar\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1777,
              0
            ],
            [
              1782,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringLen3(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_LEN(\"\", \"bar\", 3);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1784,
              0
            ],
            [
              1789,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringLen3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString4(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(\"bar\\r\", \"bar\\n\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1791,
              0
            ],
            [
              1796,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString4",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringLen4(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_LEN(\"ba\\r\\x16\", \"ba\\r\\n\", 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1798,
              0
            ],
            [
              1803,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringLen4",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString5(void)\n{\n    const char str1[] = { 0x41, 0x42, 0x03, 0x00 };\n    const char str2[] = { 0x41, 0x42, 0x04, 0x00 };\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(str1, str2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1805,
              0
            ],
            [
              1812,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString5",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString_ExpectedStringIsNull(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(NULL, \"bar\");\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1814,
              0
            ],
            [
              1819,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString_ExpectedStringIsNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringLen_ExpectedStringIsNull(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_LEN(NULL, \"bar\", 1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1821,
              0
            ],
            [
              1826,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringLen_ExpectedStringIsNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualString_ActualStringIsNull(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING(\"foo\", NULL);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1828,
              0
            ],
            [
              1833,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualString_ActualStringIsNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringLen_ActualStringIsNull(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_LEN(\"foo\", NULL, 1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1835,
              0
            ],
            [
              1840,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringLen_ActualStringIsNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualStringArrays(void)\n{\n    const char *testStrings[] = { \"foo\", \"boo\", \"woo\", \"moo\" };\n    const char *expStrings[] = { \"foo\", \"boo\", \"woo\", \"zoo\" };\n\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, expStrings, 3);\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 3);\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 2);\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 1);\n}",
          "fn_code_pos": [
            [
              1842,
              0
            ],
            [
              1851,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualStringArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArray1(void)\n{\n    const char *testStrings[] = { \"foo\", \"boo\", \"woo\", \"moo\" };\n    const char *expStrings[] = { \"foo\", \"boo\", \"woo\", \"zoo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1853,
              0
            ],
            [
              1861,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArray1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArray2(void)\n{\n    const char *testStrings[] = { \"zoo\", \"boo\", \"woo\", \"moo\" };\n    const char *expStrings[] = { \"foo\", \"boo\", \"woo\", \"moo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1863,
              0
            ],
            [
              1871,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArray2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArray3(void)\n{\n    const char *testStrings[] = { \"foo\", \"boo\", \"woo\", NULL };\n    const char *expStrings[] = { \"foo\", \"boo\", \"woo\", \"zoo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1873,
              0
            ],
            [
              1881,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArray3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArray4(void)\n{\n    const char *testStrings[] = { \"foo\", \"boo\", \"woo\", \"moo\" };\n    const char *expStrings[] = { \"foo\", NULL, \"woo\", \"moo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1883,
              0
            ],
            [
              1891,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArray4",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArray5(void)\n{\n    const char **testStrings = NULL;\n    const char *expStrings[] = { \"foo\", \"boo\", \"woo\", \"zoo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1893,
              0
            ],
            [
              1901,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArray5",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArray6(void)\n{\n    const char *testStrings[] = { \"foo\", \"boo\", \"woo\", \"zoo\" };\n    const char **expStrings = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1903,
              0
            ],
            [
              1911,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArray6",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualStringArrayIfBothNulls(void)\n{\n    const char **testStrings = NULL;\n    const char **expStrings = NULL;\n\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 4);\n}",
          "fn_code_pos": [
            [
              1913,
              0
            ],
            [
              1919,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualStringArrayIfBothNulls",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringArrayLengthZero(void)\n{\n    const char *testStrings[] = {NULL};\n    const char **expStrings = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_ARRAY(expStrings, testStrings, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1921,
              0
            ],
            [
              1929,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringArrayLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualStringEachEqual(void)\n{\n    const char *testStrings1[] = { \"foo\", \"foo\", \"foo\", \"foo\" };\n    const char *testStrings2[] = { \"boo\", \"boo\", \"boo\", \"zoo\" };\n    const char *testStrings3[] = { \"\", \"\", \"\", \"\" };\n\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", testStrings1, 4);\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", testStrings1, 1);\n    TEST_ASSERT_EACH_EQUAL_STRING(\"boo\", testStrings2, 3);\n    TEST_ASSERT_EACH_EQUAL_STRING(\"\", testStrings3, 4);\n}",
          "fn_code_pos": [
            [
              1931,
              0
            ],
            [
              1941,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualStringEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringEachEqual1(void)\n{\n    const char *testStrings[] = { \"foo\", \"foo\", \"foo\", \"moo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1943,
              0
            ],
            [
              1950,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringEachEqual2(void)\n{\n    const char *testStrings[] = { \"boo\", \"foo\", \"foo\", \"foo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1952,
              0
            ],
            [
              1959,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringEachEqual3(void)\n{\n    const char *testStrings[] = { \"foo\", \"foo\", \"foo\", NULL };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1961,
              0
            ],
            [
              1968,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringEachEqual4(void)\n{\n    const char *testStrings[] = { \"foo\", \"foo\", \"woo\", \"foo\" };\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", testStrings, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1970,
              0
            ],
            [
              1977,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringEachEqual4",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualStringEachEqual5(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_STRING(\"foo\", NULL, 1);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1979,
              0
            ],
            [
              1984,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualStringEachEqual5",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualMemory(void)\n{\n    const char *testString = \"whatever\";\n\n    TEST_ASSERT_EQUAL_MEMORY(testString, testString, 8);\n    TEST_ASSERT_EQUAL_MEMORY(\"whatever\", \"whatever\", 8);\n    TEST_ASSERT_EQUAL_MEMORY(\"whatever\", testString, 8);\n    TEST_ASSERT_EQUAL_MEMORY(testString, \"whatever\", 8);\n    TEST_ASSERT_EQUAL_MEMORY(testString, \"whatever\", 2);\n    TEST_ASSERT_EQUAL_MEMORY(NULL, NULL, 1);\n}",
          "fn_code_pos": [
            [
              1986,
              0
            ],
            [
              1996,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualMemory",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemory1(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY(\"foo\", \"bar\", 3);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              1998,
              0
            ],
            [
              2003,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemory1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemory2(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY(\"fool\", \"food\", 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2005,
              0
            ],
            [
              2010,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemory2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemory3(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY(NULL, \"food\", 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2012,
              0
            ],
            [
              2017,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemory3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemory4(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY(\"fool\", NULL, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2019,
              0
            ],
            [
              2024,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemory4",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryLengthZero(void)\n{\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY(NULL, NULL, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2026,
              0
            ],
            [
              2031,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualIntArrays(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, -2};\n    int p2[] = {1, 8, 987, 2};\n    int p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p3, 1);\n    TEST_ASSERT_EQUAL_INT_ARRAY(NULL, NULL, 1);\n}",
          "fn_code_pos": [
            [
              2033,
              0
            ],
            [
              2046,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualIntArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntArraysNullExpected(void)\n{\n    int* p0 = NULL;\n    int p1[] = {1, 8, 987, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2048,
              0
            ],
            [
              2056,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntArraysNullExpected",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntArraysNullActual(void)\n{\n    int* p1 = NULL;\n    int p0[] = {1, 8, 987, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2058,
              0
            ],
            [
              2066,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntArraysNullActual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntArrays1(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2068,
              0
            ],
            [
              2076,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntArrays2(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {2, 8, 987, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2078,
              0
            ],
            [
              2086,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntArrays3(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 986, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2088,
              0
            ],
            [
              2096,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntArraysLengthZero(void)\n{\n    UNITY_UINT32 p0[1] = {1};\n    UNITY_UINT32 p1[1] = {1};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_ARRAY(p0, p1, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2098,
              0
            ],
            [
              2106,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntArraysLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualIntEachEqual(void)\n{\n    int p0[] = {1, 1, 1, 1};\n    int p1[] = {987, 987, 987, 987};\n    int p2[] = {-2, -2, -2, -3};\n    int p3[] = {1, 5, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_INT(1, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_INT(1, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_INT(987, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_INT(-2, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_INT(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2108,
              0
            ],
            [
              2120,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualIntEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntEachEqualNullActual(void)\n{\n    int* p1 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT(1, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2122,
              0
            ],
            [
              2129,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntEachEqualNullActual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntEachEqual1(void)\n{\n    int p0[] = {1, 1, 1, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT(1, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2131,
              0
            ],
            [
              2138,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntEachEqual2(void)\n{\n    int p0[] = {-5, -5, -1, -5};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT(-5, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2140,
              0
            ],
            [
              2147,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualIntEachEqual3(void)\n{\n    int p0[] = {1, 88, 88, 88};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT(88, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2149,
              0
            ],
            [
              2156,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualIntEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualEachEqualLengthZero(void)\n{\n    UNITY_UINT32 p0[1] = {1};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT(0, p0, 0);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2158,
              0
            ],
            [
              2165,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualEachEqualLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualPtrArrays(void)\n{\n    char A = 1;\n    char B = 2;\n    char C = 3;\n    char* p0[] = {&A, &B, &C};\n    char* p1[] = {&A, &B, &C, &A};\n    char* p2[] = {&A, &B};\n    char* p3[] = {&A};\n\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p0, 3);\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p1, 3);\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p1, p2, 2);\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p3, p0, 1);\n}",
          "fn_code_pos": [
            [
              2167,
              0
            ],
            [
              2182,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualPtrArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrArraysNullExpected(void)\n{\n    char A = 1;\n    char B = 2;\n    char** p0 = NULL;\n    char* p1[] = {&A, &B};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p1, 2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2184,
              0
            ],
            [
              2194,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrArraysNullExpected",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrArraysNullActual(void)\n{\n    char A = 1;\n    char B = 2;\n    char** p0 = NULL;\n    char* p1[] = {&A, &B};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p1, p0, 2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2196,
              0
            ],
            [
              2206,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrArraysNullActual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrArrays1(void)\n{\n    char A = 1;\n    char B = 2;\n    char C = 3;\n    char* p0[] = {&A, &B, &C, &B};\n    char* p1[] = {&A, &B, &C, &A};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2208,
              0
            ],
            [
              2219,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrArrays2(void)\n{\n    char A = 1;\n    char B = 2;\n    char C = 3;\n    char* p0[] = {&B, &B, &C, &A};\n    char* p1[] = {&A, &B, &C, &A};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2221,
              0
            ],
            [
              2232,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrArrays3(void)\n{\n    char A = 1;\n    char B = 2;\n    char C = 3;\n    char* p0[] = {&A, &B, &B, &A};\n    char* p1[] = {&A, &B, &C, &A};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_PTR_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2234,
              0
            ],
            [
              2245,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualPtrEachEqual(void)\n{\n    char A = 1;\n    char B = 2;\n    char C = 3;\n    char* p0[] = {&A, &A, &A};\n    char* p1[] = {&A, &B, &C, &A};\n    char* p2[] = {&B, &B};\n    char* p3[] = {&C};\n\n    TEST_ASSERT_EACH_EQUAL_PTR(&A, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_PTR(&A, p0, 3);\n    TEST_ASSERT_EACH_EQUAL_PTR(&A, p1, 1);\n    TEST_ASSERT_EACH_EQUAL_PTR(&B, p2, 2);\n    TEST_ASSERT_EACH_EQUAL_PTR(&C, p3, 1);\n}",
          "fn_code_pos": [
            [
              2247,
              0
            ],
            [
              2262,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualPtrEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrEachEqualNullExpected(void)\n{\n    char A = 1;\n    char B = 1;\n    char* p0[] = {&A, &B};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_PTR(&A, p0, 2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2264,
              0
            ],
            [
              2273,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrEachEqualNullExpected",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrEachEqualNullActual(void)\n{\n    char A = 1;\n    char** p0 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_PTR(&A, p0, 2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2275,
              0
            ],
            [
              2283,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrEachEqualNullActual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrEachEqual1(void)\n{\n    char A = 1;\n    char B = 1;\n    char* p0[] = {&A, &A, &A, &B};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_PTR(&A, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2285,
              0
            ],
            [
              2294,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrEachEqual2(void)\n{\n    char A = 1;\n    char B = 1;\n    char* p0[] = {&B, &B, &A, &B};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_PTR(&B, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2296,
              0
            ],
            [
              2305,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualPtrEachEqual3(void)\n{\n    char A = 1;\n    char B = 1;\n    char* p0[] = {&A, &B, &B, &B};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_PTR(&B, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2307,
              0
            ],
            [
              2316,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualPtrEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt8Arrays(void)\n{\n    UNITY_INT8 p0[] = {1, 8, 117, -2};\n    UNITY_INT8 p1[] = {1, 8, 117, -2};\n    UNITY_INT8 p2[] = {1, 8, 117, 2};\n    UNITY_INT8 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EQUAL_INT8_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_INT8_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_INT8_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_INT8_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_INT8_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2318,
              0
            ],
            [
              2330,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt8Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt8Arrays(void)\n{\n    UNITY_INT8 p0[] = {1, 8, 36, -2};\n    UNITY_INT8 p1[] = {1, 8, 36, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2332,
              0
            ],
            [
              2340,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt8Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt8EachEqual(void)\n{\n    UNITY_INT8 p0[] = {1, 1, 1, 1};\n    UNITY_INT8 p1[] = {117, 117, 117, -2};\n    UNITY_INT8 p2[] = {-1, -1, 117, 2};\n    UNITY_INT8 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EACH_EQUAL_INT8(1, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_INT8(1, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_INT8(117, p1, 3);\n    TEST_ASSERT_EACH_EQUAL_INT8(-1, p2, 2);\n    TEST_ASSERT_EACH_EQUAL_INT8(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2342,
              0
            ],
            [
              2354,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt8EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt8EachEqual(void)\n{\n    UNITY_INT8 p0[] = {1, 8, 36, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT8(1, p0, 2);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2356,
              0
            ],
            [
              2363,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt8EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUIntArrays(void)\n{\n    unsigned int p0[] = {1, 8, 987, 65132u};\n    unsigned int p1[] = {1, 8, 987, 65132u};\n    unsigned int p2[] = {1, 8, 987, 2};\n    unsigned int p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2365,
              0
            ],
            [
              2377,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUIntArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUIntArrays1(void)\n{\n    unsigned int p0[] = {1, 8, 987, 65132u};\n    unsigned int p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2379,
              0
            ],
            [
              2387,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUIntArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUIntArrays2(void)\n{\n    unsigned int p0[] = {1, 8, 987, 65132u};\n    unsigned int p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2389,
              0
            ],
            [
              2397,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUIntArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUIntArrays3(void)\n{\n    unsigned int p0[] = {1, 8, 987, 65132u};\n    unsigned int p1[] = {1, 8, 986, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2399,
              0
            ],
            [
              2407,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUIntArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUIntEachEqual(void)\n{\n    unsigned int p0[] = {1, 1, 1, 1};\n    unsigned int p1[] = {65132u, 65132u, 65132u, 65132u};\n    unsigned int p2[] = {8, 8, 987, 2};\n    unsigned int p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_UINT(1, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_UINT(1, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT(65132u, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT(8, p2, 2);\n    TEST_ASSERT_EACH_EQUAL_UINT(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2409,
              0
            ],
            [
              2421,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUIntEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUIntEachEqual1(void)\n{\n    unsigned int p0[] = {1, 65132u, 65132u, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2423,
              0
            ],
            [
              2430,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUIntEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUIntEachEqual2(void)\n{\n    unsigned int p0[] = {987, 8, 987, 987};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT(987, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2432,
              0
            ],
            [
              2439,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUIntEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUIntEachEqual3(void)\n{\n    unsigned int p0[] = {1, 1, 1, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT(1, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2441,
              0
            ],
            [
              2448,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUIntEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt16Arrays(void)\n{\n    UNITY_INT16 p0[] = {1, 8, 117, 3};\n    UNITY_INT16 p1[] = {1, 8, 117, 3};\n    UNITY_INT16 p2[] = {1, 8, 117, 2};\n    UNITY_INT16 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EQUAL_INT16_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_INT16_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_INT16_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_INT16_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_INT16_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2450,
              0
            ],
            [
              2462,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt16Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt16Arrays(void)\n{\n    UNITY_INT16 p0[] = {1, 8, 127, 3};\n    UNITY_INT16 p1[] = {1, 8, 127, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2464,
              0
            ],
            [
              2472,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt16Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt16EachEqual(void)\n{\n    UNITY_INT16 p0[] = {1, 1, 1, 1};\n    UNITY_INT16 p1[] = {32111, 32111, 32111, 3};\n    UNITY_INT16 p2[] = {-1, -1, -1, 2};\n    UNITY_INT16 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EACH_EQUAL_INT16(1, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_INT16(1, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_INT16(32111, p1, 3);\n    TEST_ASSERT_EACH_EQUAL_INT16(-1, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_INT16(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2474,
              0
            ],
            [
              2486,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt16EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt16EachEqual(void)\n{\n    UNITY_INT16 p0[] = {127, 127, 127, 3};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT16(127, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2488,
              0
            ],
            [
              2495,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt16EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt32Arrays(void)\n{\n    UNITY_INT32 p0[] = {1, 8, 117, 3};\n    UNITY_INT32 p1[] = {1, 8, 117, 3};\n    UNITY_INT32 p2[] = {1, 8, 117, 2};\n    UNITY_INT32 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EQUAL_INT32_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_INT32_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_INT32_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_INT32_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_INT32_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2497,
              0
            ],
            [
              2509,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt32Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt32Arrays(void)\n{\n    UNITY_INT32 p0[] = {1, 8, 127, 3};\n    UNITY_INT32 p1[] = {1, 8, 127, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2511,
              0
            ],
            [
              2519,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt32Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt32EachEqual(void)\n{\n    UNITY_INT32 p0[] = {8, 8, 8, 8};\n    UNITY_INT32 p1[] = {65537, 65537, 65537, 65537};\n    UNITY_INT32 p2[] = {-3, -3, -3, 2};\n    UNITY_INT32 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EACH_EQUAL_INT32(8, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_INT32(8, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_INT32(65537, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_INT32(-3, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_INT32(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2521,
              0
            ],
            [
              2533,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt32EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt32EachEqual(void)\n{\n    UNITY_INT32 p0[] = {127, 8, 127, 127};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_INT32(127, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2535,
              0
            ],
            [
              2542,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt32EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUINT8Arrays(void)\n{\n    UNITY_UINT8 p0[] = {1, 8, 100, 127};\n    UNITY_UINT8 p1[] = {1, 8, 100, 127};\n    UNITY_UINT8 p2[] = {1, 8, 100, 2};\n    UNITY_UINT8 p3[] = {1, 50, 60, 70};\n\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2544,
              0
            ],
            [
              2556,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUINT8Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT8Arrays1(void)\n{\n    unsigned char p0[] = {1, 8, 100, 127u};\n    unsigned char p1[] = {1, 8, 100, 255u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2558,
              0
            ],
            [
              2566,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT8Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT8Arrays2(void)\n{\n    unsigned char p0[] = {1, 8, 100, 127u};\n    unsigned char p1[] = {1, 8, 100, 255u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2568,
              0
            ],
            [
              2576,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT8Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT8Arrays3(void)\n{\n    unsigned char p0[] = {1, 8, 100, 127u};\n    unsigned char p1[] = {1, 8, 100, 255u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2578,
              0
            ],
            [
              2586,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT8Arrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUINT16Arrays(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {1, 8, 987, 65132u};\n    unsigned short p2[] = {1, 8, 987, 2};\n    unsigned short p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2589,
              0
            ],
            [
              2601,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUINT16Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT16Arrays1(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2603,
              0
            ],
            [
              2611,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT16Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT16Arrays2(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2613,
              0
            ],
            [
              2621,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT16Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT16Arrays3(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {1, 8, 986, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2623,
              0
            ],
            [
              2631,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT16Arrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUINT32Arrays(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p2[] = {1, 8, 987, 2};\n    UNITY_UINT32 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2633,
              0
            ],
            [
              2645,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUINT32Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT32Arrays1(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2647,
              0
            ],
            [
              2655,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT32Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT32Arrays2(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2657,
              0
            ],
            [
              2665,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT32Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT32Arrays3(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 986, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2667,
              0
            ],
            [
              2675,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT32Arrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEXArrays(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p2[] = {1, 8, 987, 2};\n    UNITY_UINT32 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_HEX_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_HEX_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_HEX_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2677,
              0
            ],
            [
              2689,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEXArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEXArrays1(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2691,
              0
            ],
            [
              2699,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEXArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEXArrays2(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2701,
              0
            ],
            [
              2709,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEXArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEXArrays3(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 986, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2711,
              0
            ],
            [
              2719,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEXArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX32Arrays(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p2[] = {1, 8, 987, 2};\n    UNITY_UINT32 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2721,
              0
            ],
            [
              2733,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX32Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX32Arrays1(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2735,
              0
            ],
            [
              2743,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX32Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX32Arrays2(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2745,
              0
            ],
            [
              2753,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX32Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX32Arrays3(void)\n{\n    UNITY_UINT32 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT32 p1[] = {1, 8, 986, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX32_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2755,
              0
            ],
            [
              2763,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX32Arrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX16Arrays(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {1, 8, 987, 65132u};\n    unsigned short p2[] = {1, 8, 987, 2};\n    unsigned short p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2765,
              0
            ],
            [
              2777,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX16Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX16Arrays1(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2779,
              0
            ],
            [
              2787,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX16Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX16Arrays2(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2789,
              0
            ],
            [
              2797,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX16Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX16Arrays3(void)\n{\n    unsigned short p0[] = {1, 8, 987, 65132u};\n    unsigned short p1[] = {1, 8, 986, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX16_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2799,
              0
            ],
            [
              2807,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX16Arrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX8Arrays(void)\n{\n    unsigned char p0[] = {1, 8, 254u, 123};\n    unsigned char p1[] = {1, 8, 254u, 123};\n    unsigned char p2[] = {1, 8, 254u, 2};\n    unsigned char p3[] = {1, 23, 25, 26};\n\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p3, 1);\n}",
          "fn_code_pos": [
            [
              2809,
              0
            ],
            [
              2821,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX8Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX8Arrays1(void)\n{\n    unsigned char p0[] = {1, 8, 254u, 253u};\n    unsigned char p1[] = {1, 8, 254u, 252u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2823,
              0
            ],
            [
              2831,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX8Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX8Arrays2(void)\n{\n    unsigned char p0[] = {1, 8, 254u, 253u};\n    unsigned char p1[] = {2, 8, 254u, 253u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2833,
              0
            ],
            [
              2841,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX8Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX8Arrays3(void)\n{\n    unsigned char p0[] = {1, 8, 254u, 253u};\n    unsigned char p1[] = {1, 8, 255u, 253u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2843,
              0
            ],
            [
              2851,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX8Arrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUINT8EachEqual(void)\n{\n    UNITY_UINT8 p0[] = {127u, 127u, 127u, 127u};\n    UNITY_UINT8 p1[] = {1u, 1u, 1u, 1u};\n    UNITY_UINT8 p2[] = {128u, 128u, 128u, 2u};\n    UNITY_UINT8 p3[] = {1u, 50u, 60u, 70u};\n\n    TEST_ASSERT_EACH_EQUAL_UINT8(127u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_UINT8(127u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT8(1u, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT8(128u, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_UINT8(1u, p3, 1);\n}",
          "fn_code_pos": [
            [
              2853,
              0
            ],
            [
              2865,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUINT8EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT8EachEqual1(void)\n{\n    unsigned char p0[] = {127u, 127u, 128u, 127u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT8(127u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2867,
              0
            ],
            [
              2874,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT8EachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT8EachEqual2(void)\n{\n    unsigned char p0[] = {1, 1, 1, 127u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT8(1, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2876,
              0
            ],
            [
              2883,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT8EachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT8EachEqual3(void)\n{\n    unsigned char p0[] = {54u, 55u, 55u, 55u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT8(55u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2885,
              0
            ],
            [
              2892,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT8EachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUINT16EachEqual(void)\n{\n    unsigned short p0[] = {65132u, 65132u, 65132u, 65132u};\n    unsigned short p1[] = {987, 987, 987, 987};\n    unsigned short p2[] = {1, 1, 1, 2};\n    unsigned short p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_UINT16(65132u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_UINT16(65132u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT16(987, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT16(1, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_UINT16(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2894,
              0
            ],
            [
              2906,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUINT16EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT16EachEqual1(void)\n{\n    unsigned short p0[] = {1, 65132u, 65132u, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT16(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2908,
              0
            ],
            [
              2915,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT16EachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT16EachEqual2(void)\n{\n    unsigned short p0[] = {65132u, 65132u, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT16(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2917,
              0
            ],
            [
              2924,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT16EachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT16EachEqual3(void)\n{\n    unsigned short p0[] = {65132u, 65132u, 65132u, 65133u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT16(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2926,
              0
            ],
            [
              2933,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT16EachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUINT32EachEqual(void)\n{\n    UNITY_UINT32 p0[] = {65132u, 65132u, 65132u, 65132u};\n    UNITY_UINT32 p1[] = {987, 987, 987, 987};\n    UNITY_UINT32 p2[] = {8, 8, 8, 2};\n    UNITY_UINT32 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_UINT32(65132u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_UINT32(65132u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT32(987, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_UINT32(8, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_UINT32(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2935,
              0
            ],
            [
              2947,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUINT32EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT32EachEqual1(void)\n{\n    UNITY_UINT32 p0[] = {65132u, 65132u, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT32(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2949,
              0
            ],
            [
              2956,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT32EachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT32EachEqual2(void)\n{\n    UNITY_UINT32 p0[] = {1, 987, 987, 987};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT32(987, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2958,
              0
            ],
            [
              2965,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT32EachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUINT32EachEqual3(void)\n{\n    UNITY_UINT32 p0[] = {1, 1, 1, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_UINT32(1, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2967,
              0
            ],
            [
              2974,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUINT32EachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEXEachEqual(void)\n{\n    UNITY_UINT32 p0[] = {65132u, 65132u, 65132u, 65132u};\n    UNITY_UINT32 p1[] = {987, 987, 987, 987};\n    UNITY_UINT32 p2[] = {8, 8, 8, 2};\n    UNITY_UINT32 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_HEX(65132u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_HEX(65132u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX(987, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX(8, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_HEX(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              2976,
              0
            ],
            [
              2988,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEXEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEXEachEqual1(void)\n{\n    UNITY_UINT32 p0[] = {1, 65132u, 65132u, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX32(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2990,
              0
            ],
            [
              2997,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEXEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEXEachEqual2(void)\n{\n    UNITY_UINT32 p0[] = {987, 987, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX32(987, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              2999,
              0
            ],
            [
              3006,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEXEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEXEachEqual3(void)\n{\n    UNITY_UINT32 p0[] = {8, 8, 987, 8};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX(8, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3008,
              0
            ],
            [
              3015,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEXEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX32EachEqual(void)\n{\n    UNITY_UINT32 p0[] = {65132u, 65132u, 65132u, 65132u};\n    UNITY_UINT32 p1[] = {987, 987, 987, 987};\n    UNITY_UINT32 p2[] = {8, 8, 8, 2};\n    UNITY_UINT32 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_HEX32(65132u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_HEX32(65132u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX32(987, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX32(8, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_HEX32(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              3017,
              0
            ],
            [
              3029,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX32EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX32EachEqual1(void)\n{\n    UNITY_UINT32 p0[] = {65132u, 8, 65132u, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX32(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3031,
              0
            ],
            [
              3038,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX32EachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX32EachEqual2(void)\n{\n    UNITY_UINT32 p0[] = {1, 987, 987, 987};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX32(987, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3040,
              0
            ],
            [
              3047,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX32EachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX32EachEqual3(void)\n{\n    UNITY_UINT32 p0[] = {8, 8, 8, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX32(8, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3049,
              0
            ],
            [
              3056,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX32EachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX16EachEqual(void)\n{\n    UNITY_UINT16 p0[] = {65132u, 65132u, 65132u, 65132u};\n    UNITY_UINT16 p1[] = {987, 987, 987, 987};\n    UNITY_UINT16 p2[] = {8, 8, 8, 2};\n    UNITY_UINT16 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EACH_EQUAL_HEX16(65132u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_HEX16(65132u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX16(987, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX16(8, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_HEX16(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              3058,
              0
            ],
            [
              3070,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX16EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX16EachEqual1(void)\n{\n    unsigned short p0[] = {65132u, 65132u, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX16(65132u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3072,
              0
            ],
            [
              3079,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX16EachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX16EachEqual2(void)\n{\n    unsigned short p0[] = {1, 987, 987, 987};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX16(987, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3081,
              0
            ],
            [
              3088,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX16EachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX16EachEqual3(void)\n{\n    unsigned short p0[] = {8, 8, 8, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX16(8, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3090,
              0
            ],
            [
              3097,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX16EachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX8EachEqual(void)\n{\n    unsigned char p0[] = {254u, 254u, 254u, 254u};\n    unsigned char p1[] = {123, 123, 123, 123};\n    unsigned char p2[] = {8, 8, 8, 2};\n    unsigned char p3[] = {1, 23, 25, 26};\n\n    TEST_ASSERT_EACH_EQUAL_HEX8(254u, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_HEX8(254u, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX8(123, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_HEX8(8, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_HEX8(1, p3, 1);\n}",
          "fn_code_pos": [
            [
              3099,
              0
            ],
            [
              3111,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX8EachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX8EachEqual1(void)\n{\n    unsigned char p0[] = {253u, 253u, 254u, 253u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX8(253u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3113,
              0
            ],
            [
              3120,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX8EachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX8EachEqual2(void)\n{\n    unsigned char p0[] = {254u, 254u, 254u, 253u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX8(254u, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3122,
              0
            ],
            [
              3129,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX8EachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX8EachEqual3(void)\n{\n    unsigned char p0[] = {1, 8, 8, 8};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_HEX8(8, p0, 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3131,
              0
            ],
            [
              3138,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX8EachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualMemoryArrays(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, -2};\n    int p2[] = {1, 8, 987, 2};\n    int p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p0, sizeof(int), 1);\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p0, sizeof(int), 4);\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p1, sizeof(int), 4);\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p2, sizeof(int), 3);\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p3, sizeof(int), 1);\n}",
          "fn_code_pos": [
            [
              3140,
              0
            ],
            [
              3152,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualMemoryArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryArraysExpectedNull(void)\n{\n    int* p0 = NULL;\n    int p1[] = {1, 8, 987, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3154,
              0
            ],
            [
              3162,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryArraysExpectedNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryArraysActualNull(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int* p1 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3164,
              0
            ],
            [
              3172,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryArraysActualNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryArrays1(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3174,
              0
            ],
            [
              3182,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryArrays2(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {2, 8, 987, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3184,
              0
            ],
            [
              3192,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryArrays3(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 986, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_MEMORY_ARRAY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3194,
              0
            ],
            [
              3202,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualMemoryEachEqual(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, -2, 1, 8, 987, -2};\n    int p2[] = {8, 8, 8, 2};\n    int p3[] = {8, 500, 600, 700};\n    int v = 8;\n\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p0, sizeof(int)*4, 1);\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int)*4, 2);\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int)*4, 1);\n    TEST_ASSERT_EACH_EQUAL_MEMORY(&v, p2, sizeof(int), 3);\n    TEST_ASSERT_EACH_EQUAL_MEMORY(&v, p3, sizeof(int), 1);\n}",
          "fn_code_pos": [
            [
              3204,
              0
            ],
            [
              3217,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualMemoryEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryEachEqualExpectedNull(void)\n{\n    int* p0 = NULL;\n    int p1[] = {1, 8, 987, 2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3219,
              0
            ],
            [
              3227,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryEachEqualExpectedNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryEachEqualActualNull(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int* p1 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int), 4);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3229,
              0
            ],
            [
              3237,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryEachEqualActualNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryEachEqual1(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {9, 8, 987, -2, 1, 8, 987, -2, 1, 8, 987, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int)*4, 3);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3239,
              0
            ],
            [
              3247,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryEachEqual2(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, -2, 1, 8, 987, -2, 1, 8, 987, 9};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int)*4, 3);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3249,
              0
            ],
            [
              3257,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualMemoryEachEqual3(void)\n{\n    int p0[] = {1, 8, 987, -2};\n    int p1[] = {1, 8, 987, -2, 1, 9, 987, -2, 1, 8, 987, -2};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_MEMORY(p0, p1, sizeof(int)*4, 3);\n    VERIFY_FAILS_END\n}",
          "fn_code_pos": [
            [
              3259,
              0
            ],
            [
              3267,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualMemoryEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testProtection(void)\n{\n    volatile int mask = 0;\n\n    if (TEST_PROTECT())\n    {\n        mask |= 1;\n        TEST_ABORT();\n    }\n    else\n    {\n        Unity.CurrentTestFailed = 0;\n        mask |= 2;\n    }\n\n    TEST_ASSERT_EQUAL(3, mask);\n}",
          "fn_code_pos": [
            [
              3269,
              0
            ],
            [
              3285,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testProtection",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testIgnoredAndThenFailInTearDown(void)\n{\n    SetToOneToFailInTearDown = 1;\n    TEST_IGNORE();\n}",
          "fn_code_pos": [
            [
              3287,
              0
            ],
            [
              3291,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testIgnoredAndThenFailInTearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void startPutcharSpy(void) {indexSpyBuffer = 0; putcharSpyEnabled = 1;}",
          "fn_code_pos": [
            [
              3311,
              0
            ],
            [
              3311,
              71
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "startPutcharSpy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void endPutcharSpy(void) {putcharSpyEnabled = 0;}",
          "fn_code_pos": [
            [
              3313,
              0
            ],
            [
              3313,
              49
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "endPutcharSpy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "char* getBufferPutcharSpy(void)\n{\n#ifdef USING_OUTPUT_SPY\n    putcharSpyBuffer[indexSpyBuffer] = '\\0';\n    return putcharSpyBuffer;\n#else\n    return NULL;\n#endif\n}",
          "fn_code_pos": [
            [
              3315,
              0
            ],
            [
              3323,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "getBufferPutcharSpy",
            "parameters": {},
            "return_type": "char"
          }
        },
        {
          "fn_code": "void putcharSpy(int c)\n{\n#ifdef USING_OUTPUT_SPY\n    if (putcharSpyEnabled)\n    {\n        if (indexSpyBuffer < SPY_BUFFER_MAX - 1)\n            putcharSpyBuffer[indexSpyBuffer++] = (char)c;\n    } else\n        putchar((char)c);\n#endif\n}",
          "fn_code_pos": [
            [
              3325,
              0
            ],
            [
              3335,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "putcharSpy",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFailureCountIncrementsAndIsReturnedAtEnd(void)\n{\n    UNITY_UINT savedFailures = Unity.TestFailures;\n    Unity.CurrentTestFailed = 1;\n    startPutcharSpy(); // Suppress output\n    UnityConcludeTest();\n    endPutcharSpy();\n    TEST_ASSERT_EQUAL(savedFailures + 1, Unity.TestFailures);\n\n    startPutcharSpy(); // Suppress output\n    int failures = UnityEnd();\n    Unity.TestFailures--;\n    endPutcharSpy();\n    TEST_ASSERT_EQUAL(savedFailures + 1, failures);\n}",
          "fn_code_pos": [
            [
              3337,
              0
            ],
            [
              3351,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFailureCountIncrementsAndIsReturnedAtEnd",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testCstringsEscapeSequence(void)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    startPutcharSpy();\n    UnityPrint(\"\\x16\\x10\");\n    endPutcharSpy();\n    TEST_ASSERT_EQUAL_STRING(\"\\\\x16\\\\x10\", getBufferPutcharSpy());\n#endif\n}",
          "fn_code_pos": [
            [
              3353,
              0
            ],
            [
              3363,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testCstringsEscapeSequence",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHexPrintsUpToMaxNumberOfNibbles(void)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    startPutcharSpy();\n    UnityPrintNumberHex(0xBEE, 21);\n    endPutcharSpy();\n    TEST_ASSERT_EQUAL_INT(sizeof(UNITY_INT)*2, strlen(getBufferPutcharSpy()));\n#endif\n}",
          "fn_code_pos": [
            [
              3365,
              0
            ],
            [
              3375,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHexPrintsUpToMaxNumberOfNibbles",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testPrintNumbers32(void)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE_MESSAGE(\"Compile with '-D UNITY_OUTPUT_CHAR=putcharSpy' to enable print testing\");\n#else\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"0\", 0);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"1\", 1);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"-1\", -1);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"2000000000\", 2000000000);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"-2147483648\", (UNITY_INT32)0x80000000);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"-1\",          (UNITY_INT32)0xFFFFFFFF);\n#endif\n}",
          "fn_code_pos": [
            [
              3387,
              0
            ],
            [
              3399,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testPrintNumbers32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testPrintNumbersUnsigned32(void)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"0\", 0);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"1\", 1);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"1500000000\", 1500000000);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"2147483648\", (UNITY_UINT32)0x80000000);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"4294967295\", (UNITY_UINT32)0xFFFFFFFF);\n#endif\n}",
          "fn_code_pos": [
            [
              3401,
              0
            ],
            [
              3412,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testPrintNumbersUnsigned32",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testPrintNumbersInt64(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n  #ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n  #else\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"0\", 0);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"10000000000\", 10000000000);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"-9223372036854775808\", (UNITY_INT)0x8000000000000000);\n    TEST_ASSERT_EQUAL_PRINT_NUMBERS(\"-1\", (UNITY_INT)0xFFFFFFFFFFFFFFFF);\n  #endif\n#endif\n}",
          "fn_code_pos": [
            [
              3416,
              0
            ],
            [
              3430,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testPrintNumbersInt64",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testPrintNumbersUInt64(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n  #ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n  #else\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"0\", 0);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"70000000000\", 70000000000);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"9223372036854775808\",  (UNITY_UINT)0x8000000000000000);\n    TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS(\"18446744073709551615\", (UNITY_UINT)0xFFFFFFFFFFFFFFFF);\n  #endif\n#endif\n}",
          "fn_code_pos": [
            [
              3432,
              0
            ],
            [
              3446,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testPrintNumbersUInt64",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHex64s(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 v0, v1;\n    UNITY_UINT64 *p0, *p1;\n\n    v0 = 0x9876543201234567;\n    v1 = 0x9876543201234567;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_HEX64(0x9876543201234567, 0x9876543201234567);\n    TEST_ASSERT_EQUAL_HEX64(v0, v1);\n    TEST_ASSERT_EQUAL_HEX64(0x9876543201234567, v1);\n    TEST_ASSERT_EQUAL_HEX64(v0, 0x9876543201234567);\n    TEST_ASSERT_EQUAL_HEX64(*p0, v1);\n    TEST_ASSERT_EQUAL_HEX64(*p0, *p1);\n    TEST_ASSERT_EQUAL_HEX64(*p0, 0x9876543201234567);\n#endif\n}",
          "fn_code_pos": [
            [
              3448,
              0
            ],
            [
              3469,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHex64s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint64s(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 v0, v1;\n    UNITY_UINT64 *p0, *p1;\n\n    v0 = 0x9876543201234567;\n    v1 = 0x9876543201234567;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_UINT64(0x9876543201234567, 0x9876543201234567);\n    TEST_ASSERT_EQUAL_UINT64(v0, v1);\n    TEST_ASSERT_EQUAL_UINT64(0x9876543201234567, v1);\n    TEST_ASSERT_EQUAL_UINT64(v0, 0x9876543201234567);\n    TEST_ASSERT_EQUAL_UINT64(*p0, v1);\n    TEST_ASSERT_EQUAL_UINT64(*p0, *p1);\n    TEST_ASSERT_EQUAL_UINT64(*p0, 0x9876543201234567);\n#endif\n}",
          "fn_code_pos": [
            [
              3471,
              0
            ],
            [
              3492,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint64s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt64s(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_INT64 v0, v1;\n    UNITY_INT64 *p0, *p1;\n\n    v0 = (UNITY_INT64)0x9876543201234567;\n    v1 = (UNITY_INT64)0x9876543201234567;\n    p0 = &v0;\n    p1 = &v1;\n\n    TEST_ASSERT_EQUAL_INT64(0x9876543201234567, 0x9876543201234567);\n    TEST_ASSERT_EQUAL_INT64(v0, v1);\n    TEST_ASSERT_EQUAL_INT64(0x9876543201234567, v1);\n    TEST_ASSERT_EQUAL_INT64(v0, 0x9876543201234567);\n    TEST_ASSERT_EQUAL_INT64(*p0, v1);\n    TEST_ASSERT_EQUAL_INT64(*p0, *p1);\n    TEST_ASSERT_EQUAL_INT64(*p0, 0x9876543201234567);\n#endif\n}",
          "fn_code_pos": [
            [
              3494,
              0
            ],
            [
              3515,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt64s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex64s(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 v0, v1;\n\n    v0 = 9000000000;\n    v1 = 9100000000;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX64(v0, v1);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3518,
              0
            ],
            [
              3532,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex64s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUint64s(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 v0, v1;\n\n    v0 = 9000000000;\n    v1 = 9100000000;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT64(v0, v1);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3534,
              0
            ],
            [
              3548,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUint64s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt64s(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_INT64 v0, v1;\n\n    v0 = -9000000000;\n    v1 = 9100000000;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT64(v0, v1);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3550,
              0
            ],
            [
              3564,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt64s",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHex64sIfSigned(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_INT64 v0, v1;\n\n    v0 = -9000000000;\n    v1 = 9000000000;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX64(v0, v1);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3566,
              0
            ],
            [
              3580,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHex64sIfSigned",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX64sWithinDelta(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_HEX64_WITHIN(1, 0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFE);\n    TEST_ASSERT_HEX64_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_HEX64_WITHIN(5, 5000, 5005);\n#endif\n}",
          "fn_code_pos": [
            [
              3582,
              0
            ],
            [
              3591,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX64sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX64sNotWithinDelta(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX64_WITHIN(1, 0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFC);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3593,
              0
            ],
            [
              3602,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX64sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testHEX64sNotWithinDeltaEvenThoughASignedIntWouldPass(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_HEX64_WITHIN(5, 1, -1);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3604,
              0
            ],
            [
              3613,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testHEX64sNotWithinDeltaEvenThoughASignedIntWouldPass",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT64sWithinDelta(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_UINT64_WITHIN(1, 0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFE);\n    TEST_ASSERT_UINT64_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_UINT64_WITHIN(5, 5000, 5005);\n#endif\n}",
          "fn_code_pos": [
            [
              3615,
              0
            ],
            [
              3624,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT64sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT64sNotWithinDelta(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT64_WITHIN(1, 0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFC);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3626,
              0
            ],
            [
              3635,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT64sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testUINT64sNotWithinDeltaEvenThoughASignedIntWouldPass(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_UINT64_WITHIN(5, 1, -1);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3637,
              0
            ],
            [
              3646,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testUINT64sNotWithinDeltaEvenThoughASignedIntWouldPass",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT64sWithinDelta(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_INT64_WITHIN(1, 0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFE);\n    TEST_ASSERT_INT64_WITHIN(5, 5000, 4996);\n    TEST_ASSERT_INT64_WITHIN(5, 5000, 5005);\n#endif\n}",
          "fn_code_pos": [
            [
              3648,
              0
            ],
            [
              3657,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT64sWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT64sNotWithinDelta(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT64_WITHIN(1, 0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFC);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3659,
              0
            ],
            [
              3668,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT64sNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testINT64sNotWithinDeltaAndDifferenceOverflows(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_INT64_WITHIN(1, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3670,
              0
            ],
            [
              3679,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testINT64sNotWithinDeltaAndDifferenceOverflows",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualHEX64Arrays(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p1[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p2[] = {1, 8, 987, 2};\n    UNITY_UINT64 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p3, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              3681,
              0
            ],
            [
              3697,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualHEX64Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualUint64Arrays(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p1[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p2[] = {1, 8, 987, 2};\n    UNITY_UINT64 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_UINT64_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_UINT64_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_UINT64_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_UINT64_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_UINT64_ARRAY(p0, p3, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              3699,
              0
            ],
            [
              3715,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualUint64Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualInt64Arrays(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_INT64 p0[] = {1, 8, 987, -65132};\n    UNITY_INT64 p1[] = {1, 8, 987, -65132};\n    UNITY_INT64 p2[] = {1, 8, 987, -2};\n    UNITY_INT64 p3[] = {1, 500, 600, 700};\n\n    TEST_ASSERT_EQUAL_INT64_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_INT64_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_INT64_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_INT64_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_INT64_ARRAY(p0, p3, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              3717,
              0
            ],
            [
              3733,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualInt64Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX64Arrays1(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3736,
              0
            ],
            [
              3748,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX64Arrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualHEX64Arrays2(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p1[] = {2, 8, 987, 65132u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX64_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3750,
              0
            ],
            [
              3762,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualHEX64Arrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualUint64Arrays(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_UINT64 p0[] = {1, 8, 987, 65132u};\n    UNITY_UINT64 p1[] = {1, 8, 987, 65131u};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_UINT64_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3764,
              0
            ],
            [
              3776,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualUint64Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualInt64Arrays(void)\n{\n#ifndef UNITY_SUPPORT_64\n    TEST_IGNORE();\n#else\n    UNITY_INT64 p0[] = {1, 8, 987, -65132};\n    UNITY_INT64 p1[] = {1, 8, 987, -65131};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT64_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3778,
              0
            ],
            [
              3790,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualInt64Arrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsWithinDelta(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_WITHIN(0.00003f, 187245.03485f, 187245.03488f);\n    TEST_ASSERT_FLOAT_WITHIN(1.0f, 187245.0f, 187246.0f);\n    TEST_ASSERT_FLOAT_WITHIN(0.05f, 9273.2549f, 9273.2049f);\n    TEST_ASSERT_FLOAT_WITHIN(0.007f, -726.93724f, -726.94424f);\n#endif\n}",
          "fn_code_pos": [
            [
              3793,
              0
            ],
            [
              3803,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotWithinDelta(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_WITHIN(0.05f, 9273.2649f, 9273.2049f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3805,
              0
            ],
            [
              3814,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsEqual(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_FLOAT(187245.0f, 187246.0f);\n    TEST_ASSERT_EQUAL_FLOAT(18724.5f, 18724.6f);\n    TEST_ASSERT_EQUAL_FLOAT(9273.2549f, 9273.2599f);\n    TEST_ASSERT_EQUAL_FLOAT(-726.93724f, -726.9374f);\n#endif\n}",
          "fn_code_pos": [
            [
              3816,
              0
            ],
            [
              3826,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqual(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(9273.9649f, 9273.0049f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3828,
              0
            ],
            [
              3837,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualNegative1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(-9273.9649f, -9273.0049f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3839,
              0
            ],
            [
              3848,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualNegative1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualNegative2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(-9273.0049f, -9273.9649f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3850,
              0
            ],
            [
              3859,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualNegative2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualActualNaN(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(85.963f, 0.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3861,
              0
            ],
            [
              3870,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualActualNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualExpectedNaN(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(0.0f / f_zero, 85.963f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3872,
              0
            ],
            [
              3881,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualExpectedNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsEqualBothNaN(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_FLOAT(0.0f / f_zero, 0.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              3883,
              0
            ],
            [
              3890,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsEqualBothNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualInfNaN(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(1.0f / f_zero, 0.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3892,
              0
            ],
            [
              3901,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualInfNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualNaNInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(0.0f / f_zero, 1.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3903,
              0
            ],
            [
              3912,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualNaNInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualActualInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(321.642f, 1.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3914,
              0
            ],
            [
              3923,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualActualInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualExpectedInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(1.0f / f_zero, 321.642f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3925,
              0
            ],
            [
              3934,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualExpectedInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsEqualBothInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_FLOAT(1.0f / f_zero, 1.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              3936,
              0
            ],
            [
              3943,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsEqualBothInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatsNotEqualPlusMinusInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT(1.0f / f_zero, -1.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3945,
              0
            ],
            [
              3954,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatsNotEqualPlusMinusInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsPosInf1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_INF(2.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              3956,
              0
            ],
            [
              3963,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsPosInf1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsPosInf2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NOT_INF(2.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3965,
              0
            ],
            [
              3974,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsPosInf2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNegInf1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_NEG_INF(-3.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              3976,
              0
            ],
            [
              3983,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNegInf1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNegInf2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NOT_NEG_INF(-3.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3985,
              0
            ],
            [
              3994,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNegInf2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotPosInf1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_INF(2.0f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              3996,
              0
            ],
            [
              4005,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotPosInf1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotPosInf2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_NOT_INF(2.0f);\n#endif\n}",
          "fn_code_pos": [
            [
              4007,
              0
            ],
            [
              4014,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotPosInf2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotNegInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NEG_INF(-999.876f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4016,
              0
            ],
            [
              4025,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotNegInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNan1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_NAN(0.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4027,
              0
            ],
            [
              4034,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNan1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNan2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NOT_NAN(0.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4036,
              0
            ],
            [
              4045,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNan2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotNan1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NAN(234.9f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4047,
              0
            ],
            [
              4056,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotNan1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotNan2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_NOT_NAN(234.9f);\n#endif\n}",
          "fn_code_pos": [
            [
              4058,
              0
            ],
            [
              4065,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotNan2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatInfIsNotNan(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NAN(1.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4067,
              0
            ],
            [
              4076,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatInfIsNotNan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatNanIsNotInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_INF(0.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4078,
              0
            ],
            [
              4087,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatNanIsNotInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsDeterminate1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_DETERMINATE(0.0f);\n    TEST_ASSERT_FLOAT_IS_DETERMINATE(123.3f);\n    TEST_ASSERT_FLOAT_IS_DETERMINATE(-88.3f);\n#endif\n}",
          "fn_code_pos": [
            [
              4089,
              0
            ],
            [
              4098,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsDeterminate1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsDeterminate2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(-88.3f);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4100,
              0
            ],
            [
              4109,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsDeterminate2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotDeterminate1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(1.0f / f_zero);\n    TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(-1.0f / f_zero);\n    TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(0.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4111,
              0
            ],
            [
              4120,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotDeterminate1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatIsNotDeterminate2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_FLOAT_IS_DETERMINATE(-1.0f / f_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4122,
              0
            ],
            [
              4131,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatIsNotDeterminate2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatTraitFailsOnInvalidTrait(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    UnityAssertFloatSpecial(1.0f, NULL, __LINE__, UNITY_FLOAT_INVALID_TRAIT);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4133,
              0
            ],
            [
              4142,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatTraitFailsOnInvalidTrait",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualFloatArrays(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, -8.0f,  25.4f, -0.123f};\n    float p1[] = {1.0f, -8.0f,  25.4f, -0.123f};\n    float p2[] = {1.0f, -8.0f,  25.4f, -0.2f};\n    float p3[] = {1.0f, -23.0f, 25.0f, -0.26f};\n\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p3, 1);\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(NULL, NULL, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              4145,
              0
            ],
            [
              4162,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualFloatArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArraysExpectedNull(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float* p0 = NULL;\n    float p1[] = {1.0f, 8.0f, 25.4f, 0.252f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4164,
              0
            ],
            [
              4176,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArraysExpectedNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArraysActualNull(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 8.0f, 25.4f, 0.253f};\n    float* p1 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4178,
              0
            ],
            [
              4190,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArraysActualNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArrays1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 8.0f, 25.4f, 0.253f};\n    float p1[] = {1.0f, 8.0f, 25.4f, 0.252f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4192,
              0
            ],
            [
              4204,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArrays2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 8.0f, 25.4f, 0.253f};\n    float p1[] = {2.0f, 8.0f, 25.4f, 0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4206,
              0
            ],
            [
              4218,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArrays3(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 8.0f, 25.4f, 0.253f};\n    float p1[] = {1.0f, 8.0f, 25.5f, 0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4220,
              0
            ],
            [
              4232,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArraysNegative1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {-1.0f, -8.0f, -25.4f, -0.253f};\n    float p1[] = {-1.0f, -8.0f, -25.4f, -0.252f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4234,
              0
            ],
            [
              4246,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArraysNegative1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArraysNegative2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {-1.0f, -8.0f, -25.4f, -0.253f};\n    float p1[] = {-2.0f, -8.0f, -25.4f, -0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4248,
              0
            ],
            [
              4260,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArraysNegative2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArraysNegative3(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {-1.0f, -8.0f, -25.4f, -0.253f};\n    float p1[] = {-1.0f, -8.0f, -25.5f, -0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4262,
              0
            ],
            [
              4274,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArraysNegative3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualFloatArraysNaN(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 0.0f / f_zero, 25.4f, 0.253f};\n    float p1[] = {1.0f, 0.0f / f_zero, 25.4f, 0.253f};\n\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n#endif\n}",
          "fn_code_pos": [
            [
              4276,
              0
            ],
            [
              4286,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualFloatArraysNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualFloatArraysInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 1.0f / f_zero, 25.4f, 0.253f};\n    float p1[] = {1.0f, 1.0f / f_zero, 25.4f, 0.253f};\n\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 4);\n#endif\n}",
          "fn_code_pos": [
            [
              4288,
              0
            ],
            [
              4298,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualFloatArraysInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatArraysLengthZero(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[1] = {0.0f};\n    float p1[1] = {0.0f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_FLOAT_ARRAY(p0, p1, 0);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4300,
              0
            ],
            [
              4312,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatArraysLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualFloatEachEqual(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 1.0f, 1.0f, 1.0f};\n    float p1[] = {-0.123f, -0.123f, -0.123f, -0.123f};\n    float p2[] = {25.4f, 25.4f, 25.4f, -0.2f};\n    float p3[] = {1.0f, -23.0f, 25.0f, -0.26f};\n\n    TEST_ASSERT_EACH_EQUAL_FLOAT(1.0f, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_FLOAT(1.0f, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_FLOAT(-0.123f, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_FLOAT(25.4f, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_FLOAT(1.0f, p3, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              4314,
              0
            ],
            [
              4330,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualFloatEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqualActualNull(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float* p0 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(5, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4332,
              0
            ],
            [
              4343,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqualActualNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqual1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {0.253f, 8.0f, 0.253f, 0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(0.253f, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4345,
              0
            ],
            [
              4356,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqual2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {8.0f, 8.0f, 8.0f, 0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(8.0f, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4358,
              0
            ],
            [
              4369,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqual3(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f, 1.0f, 1.0f, 0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(1.0f, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4371,
              0
            ],
            [
              4382,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqualNegative1(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {-1.0f, -0.253f, -0.253f, -0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(-0.253f, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4384,
              0
            ],
            [
              4395,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqualNegative1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqualNegative2(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {-25.4f, -8.0f, -25.4f, -25.4f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(-25.4f, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4397,
              0
            ],
            [
              4408,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqualNegative2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqualNegative3(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {-8.0f, -8.0f, -8.0f, -0.253f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(-8.0f, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4410,
              0
            ],
            [
              4421,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqualNegative3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualFloatEachEqualNaN(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {0.0f / f_zero, 0.0f / f_zero, 0.0f / f_zero, 0.0f / f_zero};\n\n    TEST_ASSERT_EACH_EQUAL_FLOAT(0.0f / f_zero, p0, 4);\n#endif\n}",
          "fn_code_pos": [
            [
              4423,
              0
            ],
            [
              4432,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualFloatEachEqualNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualFloatEachEqualInf(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[] = {1.0f / f_zero, 1.0f / f_zero, 25.4f, 0.253f};\n\n    TEST_ASSERT_EACH_EQUAL_FLOAT(1.0f / f_zero, p0, 2);\n#endif\n}",
          "fn_code_pos": [
            [
              4434,
              0
            ],
            [
              4443,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualFloatEachEqualInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualFloatEachEqualLengthZero(void)\n{\n#ifdef UNITY_EXCLUDE_FLOAT\n    TEST_IGNORE();\n#else\n    float p0[1] = {0.0f};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_FLOAT(0.0f, p0, 0);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4445,
              0
            ],
            [
              4456,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualFloatEachEqualLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatPrinting(void)\n{\n#if defined(UNITY_EXCLUDE_FLOAT_PRINT) || !defined(USING_OUTPUT_SPY)\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"0\",         0.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"4.99e-07\",  0.000000499f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"5e-07\",     0.00000050000005f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"0.100469\",  0.100469499f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1\",         0.9999995f); /*Rounding to int place*/\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1\",         1.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1.25\",      1.25f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"7.99999\",   7.99999f); /*Not rounding*/\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"16.0002\",   16.0002f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"16.0004\",   16.0004f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"16.0006\",   16.0006f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"999999\",    999999.0f); /*Last full print integer*/\n\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-0\",         -0.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-4.99e-07\",  -0.000000499f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-5e-07\",     -0.00000050000005f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-0.100469\",  -0.100469499f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-1\",         -0.9999995f); /*Rounding to int place*/\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-1\",         -1.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-1.25\",      -1.25f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-7.99999\",   -7.99999f); /*Not rounding*/\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-16.0002\",   -16.0002f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-16.0004\",   -16.0004f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-16.0006\",   -16.0006f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-999999\",    -999999.0f); /*Last full print integer*/\n\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"4.29497e+09\", 4294967296.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"5e+09\",       5000000000.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"8e+09\",       8.0e+09f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"8.31e+09\",    8309999104.0f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1e+10\",       1.0e+10f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1e+10\",       10000000000.0f);\n    /* Some compilers have trouble with inexact float constants, a float cast works generally */\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1.00005e+10\", (float)1.000054e+10f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1.1e+38\",     (float)1.10000005e+38f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1.6353e+10\",  1.63529943e+10f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"3.40282e+38\", 3.40282346638e38f);\n\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-1e+10\",       -1.0e+10f);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-3.40282e+38\", -3.40282346638e38f);\n#endif\n}",
          "fn_code_pos": [
            [
              4463,
              0
            ],
            [
              4509,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatPrinting",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatPrintingInfinityAndNaN(void)\n{\n#if defined(UNITY_EXCLUDE_FLOAT_PRINT) || !defined(USING_OUTPUT_SPY)\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"inf\",   1.0f / f_zero);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-inf\", -1.0f / f_zero);\n\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"nan\",   0.0f / f_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4511,
              0
            ],
            [
              4521,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatPrintingInfinityAndNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static void printFloatValue(float f)\n{\n    char expected[18];\n    char expected_lower[18];\n    char expected_higher[18];\n\n    startPutcharSpy();\n\n    UnityPrintFloat(f);\n\n    sprintf(expected, \"%.6g\", f);\n\n    /* We print all NaN's as \"nan\", not \"-nan\" */\n    if(strcmp(expected, \"-nan\") == 0) strcpy(expected, \"nan\");\n\n    /* Allow for rounding differences in last digit */\n    double lower = (double)f * 0.9999995;\n    double higher = (double)f * 1.0000005;\n\n    if (isfinite(lower)) sprintf(expected_lower, \"%.6g\", lower); else strcpy(expected_lower, expected);\n    if (isfinite(higher)) sprintf(expected_higher, \"%.6g\", higher); else strcpy(expected_higher, expected);\n\n    if (strcmp(expected, getBufferPutcharSpy()) != 0 &&\n        strcmp(expected_lower, getBufferPutcharSpy()) != 0 &&\n        strcmp(expected_higher, getBufferPutcharSpy()) != 0)\n    {\n        /* Fail with diagnostic printing */\n        TEST_ASSERT_EQUAL_PRINT_FLOATING(expected, f);\n    }\n}",
          "fn_code_pos": [
            [
              4524,
              0
            ],
            [
              4553,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "printFloatValue",
            "parameters": {
              "f": "float"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testFloatPrintingRandomSamples(void)\n{\n#if !defined(UNITY_TEST_ALL_FLOATS_PRINT_OK) || !defined(USING_OUTPUT_SPY)\n    TEST_IGNORE();\n#else\n    union { float f_value; uint32_t int_value; } u;\n\n    /* These values are not covered by the MINSTD generator */\n    u.int_value = 0x00000000; printFloatValue(u.f_value);\n    u.int_value = 0x80000000; printFloatValue(u.f_value);\n    u.int_value = 0x7fffffff; printFloatValue(u.f_value);\n    u.int_value = 0xffffffff; printFloatValue(u.f_value);\n\n    uint32_t a = 1;\n    for(int num_tested = 0; num_tested < 1000000; num_tested++)\n    {\n        /* MINSTD pseudo-random number generator */\n        a = (uint32_t)(((uint64_t)a * 48271u) % 2147483647u);\n\n        /* MINSTD does not set the highest bit; test both possibilities */\n        u.int_value = a;              printFloatValue(u.f_value);\n        u.int_value = a | 0x80000000; printFloatValue(u.f_value);\n    }\n#endif\n}",
          "fn_code_pos": [
            [
              4556,
              0
            ],
            [
              4580,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testFloatPrintingRandomSamples",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesWithinDelta(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_WITHIN(0.00003, 187245.03485, 187245.03488);\n    TEST_ASSERT_DOUBLE_WITHIN(1.0, 187245.0, 187246.0);\n    TEST_ASSERT_DOUBLE_WITHIN(0.05, 9273.2549, 9273.2049);\n    TEST_ASSERT_DOUBLE_WITHIN(0.007, -726.93725, -726.94424);\n#endif\n}",
          "fn_code_pos": [
            [
              4584,
              0
            ],
            [
              4594,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotWithinDelta(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_WITHIN(0.05, 9273.2649, 9273.2049);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4596,
              0
            ],
            [
              4605,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotWithinDelta",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesEqual(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_DOUBLE(187245123456.0, 187245123456.0);\n    TEST_ASSERT_EQUAL_DOUBLE(187241234567.5, 187241234567.6);\n    TEST_ASSERT_EQUAL_DOUBLE(9273.2512345649, 9273.25123455699);\n    TEST_ASSERT_EQUAL_DOUBLE(-726.12345693724, -726.1234569374);\n#endif\n}",
          "fn_code_pos": [
            [
              4608,
              0
            ],
            [
              4618,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqual(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(9273.9649, 9273.0049);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4620,
              0
            ],
            [
              4629,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualNegative1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(-9273.9649, -9273.0049);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4631,
              0
            ],
            [
              4640,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualNegative1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualNegative2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(-9273.0049, -9273.9649);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4642,
              0
            ],
            [
              4651,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualNegative2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualActualNaN(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(85.963, 0.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4653,
              0
            ],
            [
              4662,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualActualNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualExpectedNaN(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(0.0 / d_zero, 85.963);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4664,
              0
            ],
            [
              4673,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualExpectedNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesEqualBothNaN(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_DOUBLE(0.0 / d_zero, 0.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4675,
              0
            ],
            [
              4682,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesEqualBothNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualInfNaN(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(1.0 / d_zero, 0.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4684,
              0
            ],
            [
              4693,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualInfNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualNaNInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(0.0 / d_zero, 1.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4695,
              0
            ],
            [
              4704,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualNaNInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualActualInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(321.642, 1.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4706,
              0
            ],
            [
              4715,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualActualInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualExpectedInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(1.0 / d_zero, 321.642);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4717,
              0
            ],
            [
              4726,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualExpectedInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesEqualBothInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_DOUBLE(1.0 / d_zero, 1.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4728,
              0
            ],
            [
              4735,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesEqualBothInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublesNotEqualPlusMinusInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE(1.0 / d_zero, -1.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4737,
              0
            ],
            [
              4746,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublesNotEqualPlusMinusInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsPosInf1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_INF(2.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4748,
              0
            ],
            [
              4755,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsPosInf1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsPosInf2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NOT_INF(2.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4757,
              0
            ],
            [
              4766,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsPosInf2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNegInf1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_NEG_INF(-3.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4768,
              0
            ],
            [
              4775,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNegInf1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNegInf2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF(-3.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4777,
              0
            ],
            [
              4786,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNegInf2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotPosInf1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_INF(2.0);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4788,
              0
            ],
            [
              4797,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotPosInf1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotPosInf2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_NOT_INF(2.0);\n#endif\n}",
          "fn_code_pos": [
            [
              4799,
              0
            ],
            [
              4806,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotPosInf2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotNegInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NEG_INF(-999.876);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4808,
              0
            ],
            [
              4817,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotNegInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNan1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_NAN(0.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4819,
              0
            ],
            [
              4826,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNan1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNan2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NOT_NAN(0.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4828,
              0
            ],
            [
              4837,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNan2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotNan1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NAN(234.9);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4839,
              0
            ],
            [
              4848,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotNan1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotNan2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_NOT_NAN(234.9);\n#endif\n}",
          "fn_code_pos": [
            [
              4850,
              0
            ],
            [
              4857,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotNan2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleInfIsNotNan(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NAN(1.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4859,
              0
            ],
            [
              4868,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleInfIsNotNan",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleNanIsNotInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_INF(0.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4870,
              0
            ],
            [
              4879,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleNanIsNotInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsDeterminate1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_DETERMINATE(0.0);\n    TEST_ASSERT_DOUBLE_IS_DETERMINATE(123.3);\n    TEST_ASSERT_DOUBLE_IS_DETERMINATE(-88.3);\n#endif\n}",
          "fn_code_pos": [
            [
              4881,
              0
            ],
            [
              4890,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsDeterminate1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsDeterminate2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(-88.3);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4892,
              0
            ],
            [
              4901,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsDeterminate2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotDeterminate1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(1.0 / d_zero);\n    TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(-1.0 / d_zero);\n    TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(0.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              4903,
              0
            ],
            [
              4912,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotDeterminate1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleIsNotDeterminate2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_DOUBLE_IS_DETERMINATE(-1.0 / d_zero);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4914,
              0
            ],
            [
              4923,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleIsNotDeterminate2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoubleTraitFailsOnInvalidTrait(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    EXPECT_ABORT_BEGIN\n    UnityAssertDoubleSpecial(1.0, NULL, __LINE__, UNITY_FLOAT_INVALID_TRAIT);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4925,
              0
            ],
            [
              4934,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoubleTraitFailsOnInvalidTrait",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualDoubleArrays(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, -8.0,  25.4, -0.123};\n    double p1[] = {1.0, -8.0,  25.4, -0.123};\n    double p2[] = {1.0, -8.0,  25.4, -0.2};\n    double p3[] = {1.0, -23.0, 25.0, -0.26};\n\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p0, 1);\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p0, 4);\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p2, 3);\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p3, 1);\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(NULL, NULL, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              4936,
              0
            ],
            [
              4953,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualDoubleArrays",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArraysExpectedNull(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double* p0 = NULL;\n    double p1[] = {1.0, 8.0, 25.4, 0.252};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4955,
              0
            ],
            [
              4967,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArraysExpectedNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArraysActualNull(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 8.0, 25.4, 0.253};\n    double* p1 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4969,
              0
            ],
            [
              4981,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArraysActualNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArrays1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 8.0, 25.4, 0.25666666667};\n    double p1[] = {1.0, 8.0, 25.4, 0.25666666666};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4983,
              0
            ],
            [
              4995,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArrays1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArrays2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 8.0, 25.4, 0.253};\n    double p1[] = {2.0, 8.0, 25.4, 0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              4997,
              0
            ],
            [
              5009,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArrays2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArrays3(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 8.0, 25.4, 0.253};\n    double p1[] = {1.0, 8.0, 25.5, 0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5011,
              0
            ],
            [
              5023,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArrays3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArraysNegative1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {-1.0, -8.0, -25.4, -0.2566666667};\n    double p1[] = {-1.0, -8.0, -25.4, -0.2566666666};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5025,
              0
            ],
            [
              5037,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArraysNegative1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArraysNegative2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {-1.0, -8.0, -25.4, -0.253};\n    double p1[] = {-2.0, -8.0, -25.4, -0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5039,
              0
            ],
            [
              5051,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArraysNegative2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArraysNegative3(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {-1.0, -8.0, -25.4, -0.253};\n    double p1[] = {-1.0, -8.0, -25.5, -0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5053,
              0
            ],
            [
              5065,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArraysNegative3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualDoubleArraysNaN(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 0.0 / d_zero, 25.4, 0.253};\n    double p1[] = {1.0, 0.0 / d_zero, 25.4, 0.253};\n\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n#endif\n}",
          "fn_code_pos": [
            [
              5067,
              0
            ],
            [
              5077,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualDoubleArraysNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualDoubleArraysInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 1.0 / d_zero, 25.4, 0.253};\n    double p1[] = {1.0, 1.0 / d_zero, 25.4, 0.253};\n\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 4);\n#endif\n}",
          "fn_code_pos": [
            [
              5079,
              0
            ],
            [
              5089,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualDoubleArraysInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleArraysLengthZero(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[1] = {0.0};\n    double p1[1] = {0.0};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_DOUBLE_ARRAY(p0, p1, 0);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5091,
              0
            ],
            [
              5103,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleArraysLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualDoubleEachEqual(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 1.0, 1.0, 1.0};\n    double p1[] = {-0.123, -0.123, -0.123, -0.123};\n    double p2[] = {25.4, 25.4, 25.4, -0.2};\n    double p3[] = {1.0, -23.0, 25.0, -0.26};\n\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(1.0, p0, 1);\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(1.0, p0, 4);\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(-0.123, p1, 4);\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(25.4, p2, 3);\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(1.0, p3, 1);\n#endif\n}",
          "fn_code_pos": [
            [
              5105,
              0
            ],
            [
              5121,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualDoubleEachEqual",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqualActualNull(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double* p0 = NULL;\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(5, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5123,
              0
            ],
            [
              5134,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqualActualNull",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqual1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {0.253, 8.0, 0.253, 0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(0.253, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5136,
              0
            ],
            [
              5147,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqual1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqual2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {8.0, 8.0, 8.0, 0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(8.0, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5149,
              0
            ],
            [
              5160,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqual2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqual3(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0, 1.0, 1.0, 0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(1.0, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5162,
              0
            ],
            [
              5173,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqual3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqualNegative1(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {-1.0, -0.253, -0.253, -0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(-0.253, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5175,
              0
            ],
            [
              5186,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqualNegative1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqualNegative2(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {-25.4, -8.0, -25.4, -25.4};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(-25.4, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5188,
              0
            ],
            [
              5199,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqualNegative2",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqualNegative3(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {-8.0, -8.0, -8.0, -0.253};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(-8.0, p0, 4);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5201,
              0
            ],
            [
              5212,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqualNegative3",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualDoubleEachEqualNaN(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {0.0 / d_zero, 0.0 / d_zero, 0.0 / d_zero, 0.0 / d_zero};\n\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(0.0 / d_zero, p0, 4);\n#endif\n}",
          "fn_code_pos": [
            [
              5214,
              0
            ],
            [
              5223,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualDoubleEachEqualNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testEqualDoubleEachEqualInf(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[] = {1.0 / d_zero, 1.0 / d_zero, 25.4, 0.253};\n\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(1.0 / d_zero, p0, 2);\n#endif\n}",
          "fn_code_pos": [
            [
              5225,
              0
            ],
            [
              5234,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testEqualDoubleEachEqualInf",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testNotEqualDoubleEachEqualLengthZero(void)\n{\n#ifdef UNITY_EXCLUDE_DOUBLE\n    TEST_IGNORE();\n#else\n    double p0[1] = {0.0};\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EACH_EQUAL_DOUBLE(0.0, p0, 0);\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5236,
              0
            ],
            [
              5247,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testNotEqualDoubleEachEqualLengthZero",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublePrinting(void)\n{\n#if defined(UNITY_EXCLUDE_FLOAT_PRINT) || defined(UNITY_EXCLUDE_DOUBLE) || !defined(USING_OUTPUT_SPY)\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"0.100469\",     0.10046949999999999);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"4.29497e+09\",  4294967295.999999);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"4.29497e+09\",  4294967295.9999995);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"4.29497e+09\",  4294967296.0);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"1e+10\",        9999999995.0);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"9.0072e+15\",   9007199254740990.0);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"7e+100\",       7.0e+100);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"3e+200\",       3.0e+200);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"9.23457e+300\", 9.23456789e+300);\n\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-0.100469\",    -0.10046949999999999);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-4.29497e+09\", -4294967295.999999);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-4.29497e+09\", -4294967295.9999995);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-7e+100\",      -7.0e+100);\n#endif\n}",
          "fn_code_pos": [
            [
              5249,
              0
            ],
            [
              5269,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublePrinting",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testDoublePrintingInfinityAndNaN(void)\n{\n#if defined(UNITY_EXCLUDE_FLOAT_PRINT) || defined(UNITY_EXCLUDE_DOUBLE) || !defined(USING_OUTPUT_SPY)\n    TEST_IGNORE();\n#else\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"inf\",   1.0 / d_zero);\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"-inf\", -1.0 / d_zero);\n\n    TEST_ASSERT_EQUAL_PRINT_FLOATING(\"nan\",   0.0 / d_zero);\n#endif\n}",
          "fn_code_pos": [
            [
              5271,
              0
            ],
            [
              5281,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testDoublePrintingInfinityAndNaN",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testThatDetailsCanBeHandleOneDetail(void)\n{\n#ifdef UNITY_EXCLUDE_DETAILS\n    TEST_IGNORE();\n#else\n    UNITY_SET_DETAIL(\"Detail1\");\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_INT_MESSAGE(5, 6, \"Should Fail And Say Detail1\");\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5285,
              0
            ],
            [
              5296,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testThatDetailsCanBeHandleOneDetail",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testThatDetailsCanHandleTestFail(void)\n{\n#ifdef UNITY_EXCLUDE_DETAILS\n    TEST_IGNORE();\n#else\n    UNITY_SET_DETAILS(\"Detail1\",\"Detail2\");\n\n    EXPECT_ABORT_BEGIN\n    TEST_FAIL_MESSAGE(\"Should Fail And Say Detail1 and Detail2\");\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5298,
              0
            ],
            [
              5309,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testThatDetailsCanHandleTestFail",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testThatDetailsCanBeHandleTwoDetails(void)\n{\n#ifdef UNITY_EXCLUDE_DETAILS\n    TEST_IGNORE();\n#else\n    UNITY_SET_DETAILS(\"Detail1\",\"Detail2\");\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_HEX8_MESSAGE(7, 8, \"Should Fail And Say Detail1 and Detail2\");\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5311,
              0
            ],
            [
              5322,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testThatDetailsCanBeHandleTwoDetails",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void testThatDetailsCanBeHandleSingleDetailClearingTwoDetails(void)\n{\n#ifdef UNITY_EXCLUDE_DETAILS\n    TEST_IGNORE();\n#else\n    UNITY_SET_DETAILS(\"Detail1\",\"Detail2\");\n    UNITY_SET_DETAIL(\"DetailNew\");\n\n    EXPECT_ABORT_BEGIN\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(\"MEH\", \"GUH\", \"Should Fail And Say DetailNew\");\n    VERIFY_FAILS_END\n#endif\n}",
          "fn_code_pos": [
            [
              5324,
              0
            ],
            [
              5336,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "testThatDetailsCanBeHandleSingleDetailClearingTwoDetails",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "startPutcharSpy(void)",
          "fn_dec_pos": [
            [
              52,
              5
            ],
            [
              52,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "startPutcharSpy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "endPutcharSpy(void)",
          "fn_dec_pos": [
            [
              53,
              5
            ],
            [
              53,
              24
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "endPutcharSpy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "getBufferPutcharSpy(void)",
          "fn_dec_pos": [
            [
              54,
              6
            ],
            [
              54,
              31
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "getBufferPutcharSpy",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_ASSERT_NULL(ptr1)",
          "fn_dec_pos": [
            [
              212,
              4
            ],
            [
              212,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_NULL",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_NOT_NULL(ptr1)",
          "fn_dec_pos": [
            [
              221,
              4
            ],
            [
              221,
              30
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_NOT_NULL",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_IGNORE()",
          "fn_dec_pos": [
            [
              228,
              4
            ],
            [
              228,
              17
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_IGNORE",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_UINT(v0, v1)",
          "fn_dec_pos": [
            [
              284,
              4
            ],
            [
              284,
              34
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_UINT",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_UINT8(v0, v1)",
          "fn_dec_pos": [
            [
              296,
              4
            ],
            [
              296,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_UINT8",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_UINT16(v0, v1)",
          "fn_dec_pos": [
            [
              308,
              4
            ],
            [
              308,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_UINT16",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_UINT32(v0, v1)",
          "fn_dec_pos": [
            [
              320,
              4
            ],
            [
              320,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_UINT32",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX8(v0, v1)",
          "fn_dec_pos": [
            [
              332,
              4
            ],
            [
              332,
              34
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX8",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX8(v0, v1)",
          "fn_dec_pos": [
            [
              344,
              4
            ],
            [
              344,
              34
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX8",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX16(v0, v1)",
          "fn_dec_pos": [
            [
              356,
              4
            ],
            [
              356,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX16",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX16(v0, v1)",
          "fn_dec_pos": [
            [
              368,
              4
            ],
            [
              368,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX16",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX32(v0, v1)",
          "fn_dec_pos": [
            [
              380,
              4
            ],
            [
              380,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX32",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX32(v0, v1)",
          "fn_dec_pos": [
            [
              392,
              4
            ],
            [
              392,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX32",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_BITS_HIGH(v0, v1)",
          "fn_dec_pos": [
            [
              753,
              4
            ],
            [
              753,
              33
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_BITS_HIGH",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_BITS_LOW(v0, v1)",
          "fn_dec_pos": [
            [
              764,
              4
            ],
            [
              764,
              32
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_BITS_LOW",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_STRING(str1, str2)",
          "fn_dec_pos": [
            [
              1810,
              4
            ],
            [
              1810,
              40
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_STRING",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "getBufferPutcharSpy(void)",
          "fn_dec_pos": [
            [
              3315,
              6
            ],
            [
              3315,
              31
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "getBufferPutcharSpy",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX64(v0, v1)",
          "fn_dec_pos": [
            [
              3529,
              4
            ],
            [
              3529,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX64",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_UINT64(v0, v1)",
          "fn_dec_pos": [
            [
              3545,
              4
            ],
            [
              3545,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_UINT64",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_INT64(v0, v1)",
          "fn_dec_pos": [
            [
              3561,
              4
            ],
            [
              3561,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_INT64",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "TEST_ASSERT_EQUAL_HEX64(v0, v1)",
          "fn_dec_pos": [
            [
              3577,
              4
            ],
            [
              3577,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_ASSERT_EQUAL_HEX64",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [
        [
          "struct {\n        const char* TestFile;\n        const char* CurrentTestName;\n        UNITY_LINE_TYPE CurrentTestLineNumber;\n        UNITY_COUNTER_TYPE NumberOfTests;\n        UNITY_COUNTER_TYPE TestFailures;\n        UNITY_COUNTER_TYPE TestIgnores;\n        UNITY_COUNTER_TYPE CurrentTestFailed;\n        UNITY_COUNTER_TYPE CurrentTestIgnored;\n#ifndef UNITY_EXCLUDE_SETJMP_H\n        jmp_buf AbortFrame;\n#endif\n    }",
          {
            "char": "const",
            "CurrentTestLineNumber": "UNITY_LINE_TYPE",
            "NumberOfTests": "UNITY_COUNTER_TYPE",
            "TestFailures": "UNITY_COUNTER_TYPE",
            "TestIgnores": "UNITY_COUNTER_TYPE",
            "CurrentTestFailed": "UNITY_COUNTER_TYPE",
            "CurrentTestIgnored": "UNITY_COUNTER_TYPE",
            "AbortFrame": "jmp_buf"
          },
          "",
          [
            92,
            4
          ],
          [
            104,
            5
          ]
        ],
        [
          "struct {\n        const char* TestFile;\n        const char* CurrentTestName;\n        const char* CurrentDetails1;\n        const char* CurrentDetails2;\n        UNITY_LINE_TYPE CurrentTestLineNumber;\n        UNITY_COUNTER_TYPE NumberOfTests;\n        UNITY_COUNTER_TYPE TestFailures;\n        UNITY_COUNTER_TYPE TestIgnores;\n        UNITY_COUNTER_TYPE CurrentTestFailed;\n        UNITY_COUNTER_TYPE CurrentTestIgnored;\n#ifndef UNITY_EXCLUDE_SETJMP_H\n        jmp_buf AbortFrame;\n#endif\n    }",
          {
            "char": "const",
            "CurrentTestLineNumber": "UNITY_LINE_TYPE",
            "NumberOfTests": "UNITY_COUNTER_TYPE",
            "TestFailures": "UNITY_COUNTER_TYPE",
            "TestIgnores": "UNITY_COUNTER_TYPE",
            "CurrentTestFailed": "UNITY_COUNTER_TYPE",
            "CurrentTestIgnored": "UNITY_COUNTER_TYPE",
            "AbortFrame": "jmp_buf"
          },
          "",
          [
            106,
            4
          ],
          [
            120,
            5
          ]
        ],
        [
          "struct {\n        const char* TestFile;\n        const char* CurrentTestName;\n        UNITY_LINE_TYPE CurrentTestLineNumber;\n        UNITY_COUNTER_TYPE NumberOfTests;\n        UNITY_COUNTER_TYPE TestFailures;\n        UNITY_COUNTER_TYPE TestIgnores;\n        UNITY_COUNTER_TYPE CurrentTestFailed;\n        UNITY_COUNTER_TYPE CurrentTestIgnored;\n#ifndef UNITY_EXCLUDE_SETJMP_H\n        jmp_buf AbortFrame;\n#endif\n    }",
          {
            "char": "const",
            "CurrentTestLineNumber": "UNITY_LINE_TYPE",
            "NumberOfTests": "UNITY_COUNTER_TYPE",
            "TestFailures": "UNITY_COUNTER_TYPE",
            "TestIgnores": "UNITY_COUNTER_TYPE",
            "CurrentTestFailed": "UNITY_COUNTER_TYPE",
            "CurrentTestIgnored": "UNITY_COUNTER_TYPE",
            "AbortFrame": "jmp_buf"
          },
          "",
          [
            92,
            4
          ],
          [
            104,
            5
          ]
        ],
        [
          "struct {\n        const char* TestFile;\n        const char* CurrentTestName;\n        const char* CurrentDetails1;\n        const char* CurrentDetails2;\n        UNITY_LINE_TYPE CurrentTestLineNumber;\n        UNITY_COUNTER_TYPE NumberOfTests;\n        UNITY_COUNTER_TYPE TestFailures;\n        UNITY_COUNTER_TYPE TestIgnores;\n        UNITY_COUNTER_TYPE CurrentTestFailed;\n        UNITY_COUNTER_TYPE CurrentTestIgnored;\n#ifndef UNITY_EXCLUDE_SETJMP_H\n        jmp_buf AbortFrame;\n#endif\n    }",
          {
            "char": "const",
            "CurrentTestLineNumber": "UNITY_LINE_TYPE",
            "NumberOfTests": "UNITY_COUNTER_TYPE",
            "TestFailures": "UNITY_COUNTER_TYPE",
            "TestIgnores": "UNITY_COUNTER_TYPE",
            "CurrentTestFailed": "UNITY_COUNTER_TYPE",
            "CurrentTestIgnored": "UNITY_COUNTER_TYPE",
            "AbortFrame": "jmp_buf"
          },
          "",
          [
            106,
            4
          ],
          [
            120,
            5
          ]
        ]
      ],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            6,
            0
          ],
          [
            7,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ],
        [
          "#include <stdint.h>\n",
          [
            8,
            0
          ],
          [
            9,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            3304,
            0
          ],
          [
            3305,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_2/test/TestProductionCode2.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_SETUP(ProductionCode2)\n{\n}",
          "fn_code_pos": [
            [
              11,
              0
            ],
            [
              13,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(ProductionCode2)\n{\n}",
          "fn_code_pos": [
            [
              15,
              0
            ],
            [
              17,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode2, IgnoredTest)\n{\n    TEST_IGNORE_MESSAGE(\"This Test Was Ignored On Purpose\");\n}",
          "fn_code_pos": [
            [
              19,
              0
            ],
            [
              22,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode2, AnotherIgnoredTest)\n{\n    TEST_IGNORE_MESSAGE(\"These Can Be Useful For Leaving Yourself Notes On What You Need To Do Yet\");\n}",
          "fn_code_pos": [
            [
              24,
              0
            ],
            [
              27,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode2, ThisFunctionHasNotBeenTested_NeedsToBeImplemented)\n{\n    TEST_IGNORE(); //Like This\n}",
          "fn_code_pos": [
            [
              29,
              0
            ],
            [
              32,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"ProductionCode2.h\"\n",
          [
            0,
            0
          ],
          [
            1,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ],
        [
          "#include \"unity_fixture.h\"\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_2/test/TestProductionCode.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_SETUP(ProductionCode)\n{\n  //This is run before EACH TEST\n  Counter = 0x5a5a;\n}",
          "fn_code_pos": [
            [
              11,
              0
            ],
            [
              15,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(ProductionCode)\n{\n}",
          "fn_code_pos": [
            [
              17,
              0
            ],
            [
              19,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode, FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode)\n{\n  //All of these should pass\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(78));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(1));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(33));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(999));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(-1));\n}",
          "fn_code_pos": [
            [
              21,
              0
            ],
            [
              29,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode, FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken)\n{\n  // You should see this line fail in your test summary\n  TEST_ASSERT_EQUAL(1, FindFunction_WhichIsBroken(34));\n\n  // Notice the rest of these didn't get a chance to run because the line above failed.\n  // Unit tests abort each test function on the first sign of trouble.\n  // Then NEXT test function runs as normal.\n  TEST_ASSERT_EQUAL(8, FindFunction_WhichIsBroken(8888));\n}",
          "fn_code_pos": [
            [
              31,
              0
            ],
            [
              40,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode, FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue)\n{\n    //This should be true because setUp set this up for us before this test\n    TEST_ASSERT_EQUAL_HEX(0x5a5a, FunctionWhichReturnsLocalVariable());\n\n    //This should be true because we can still change our answer\n    Counter = 0x1234;\n    TEST_ASSERT_EQUAL_HEX(0x1234, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              42,
              0
            ],
            [
              50,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode, FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain)\n{\n    //This should be true again because setup was rerun before this test (and after we changed it to 0x1234)\n    TEST_ASSERT_EQUAL_HEX(0x5a5a, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              52,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(ProductionCode, FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed)\n{\n    //Sometimes you get the test wrong.  When that happens, you get a failure too... and a quick look should tell\n    // you what actually happened...which in this case was a failure to setup the initial condition.\n    TEST_ASSERT_EQUAL_HEX(0x1234, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              58,
              0
            ],
            [
              63,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"ProductionCode.h\"\n",
          [
            0,
            0
          ],
          [
            1,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ],
        [
          "#include \"unity_fixture.h\"\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_2/test/test_runners/all_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "static void RunAllTests(void)\n{\n  RUN_TEST_GROUP(ProductionCode);\n  RUN_TEST_GROUP(ProductionCode2);\n}",
          "fn_code_pos": [
            [
              2,
              0
            ],
            [
              6,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "RunAllTests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(int argc, const char * argv[])\n{\n  return UnityMain(argc, argv, RunAllTests);\n}",
          "fn_code_pos": [
            [
              8,
              0
            ],
            [
              11,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {
              "argc": "int",
              "argv": "char"
            },
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity_fixture.h\"\n",
          [
            0,
            0
          ],
          [
            1,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_2/test/test_runners/TestProductionCode2_Runner.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_GROUP_RUNNER(ProductionCode2)\n{\n  RUN_TEST_CASE(ProductionCode2, IgnoredTest);\n  RUN_TEST_CASE(ProductionCode2, AnotherIgnoredTest);\n  RUN_TEST_CASE(ProductionCode2, ThisFunctionHasNotBeenTested_NeedsToBeImplemented);\n}",
          "fn_code_pos": [
            [
              3,
              0
            ],
            [
              8,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_GROUP_RUNNER",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            0,
            0
          ],
          [
            1,
            0
          ]
        ],
        [
          "#include \"unity_fixture.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_2/test/test_runners/TestProductionCode_Runner.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_GROUP_RUNNER(ProductionCode)\n{\n  RUN_TEST_CASE(ProductionCode, FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode);\n  RUN_TEST_CASE(ProductionCode, FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken);\n  RUN_TEST_CASE(ProductionCode, FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue);\n  RUN_TEST_CASE(ProductionCode, FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain);\n  RUN_TEST_CASE(ProductionCode, FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed);\n}",
          "fn_code_pos": [
            [
              3,
              0
            ],
            [
              10,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_GROUP_RUNNER",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            0,
            0
          ],
          [
            1,
            0
          ]
        ],
        [
          "#include \"unity_fixture.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_3/test/TestProductionCode2.c": {
      "fn_def_list": [
        {
          "fn_code": "void setUp(void)\n{\n}",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              11,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n}",
          "fn_code_pos": [
            [
              13,
              0
            ],
            [
              15,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_IgnoredTest(void)\n{\n    TEST_IGNORE_MESSAGE(\"This Test Was Ignored On Purpose\");\n}",
          "fn_code_pos": [
            [
              17,
              0
            ],
            [
              20,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_IgnoredTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_AnotherIgnoredTest(void)\n{\n    TEST_IGNORE_MESSAGE(\"These Can Be Useful For Leaving Yourself Notes On What You Need To Do Yet\");\n}",
          "fn_code_pos": [
            [
              22,
              0
            ],
            [
              25,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_AnotherIgnoredTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented(void)\n{\n    TEST_IGNORE(); //Like This\n}",
          "fn_code_pos": [
            [
              27,
              0
            ],
            [
              30,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"ProductionCode2.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_3/test/TestProductionCode.c": {
      "fn_def_list": [
        {
          "fn_code": "void setUp(void)\n{\n  //This is run before EACH TEST\n  Counter = 0x5a5a;\n}",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              13,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n}",
          "fn_code_pos": [
            [
              15,
              0
            ],
            [
              17,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode(void)\n{\n  //All of these should pass\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(78));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(1));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(33));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(999));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(-1));\n}",
          "fn_code_pos": [
            [
              19,
              0
            ],
            [
              27,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken(void)\n{\n  // You should see this line fail in your test summary\n  TEST_ASSERT_EQUAL(1, FindFunction_WhichIsBroken(34));\n  \n  // Notice the rest of these didn't get a chance to run because the line above failed.  \n  // Unit tests abort each test function on the first sign of trouble. \n  // Then NEXT test function runs as normal.\n  TEST_ASSERT_EQUAL(8, FindFunction_WhichIsBroken(8888));\n}",
          "fn_code_pos": [
            [
              29,
              0
            ],
            [
              38,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue(void)\n{\n    //This should be true because setUp set this up for us before this test\n    TEST_ASSERT_EQUAL_HEX(0x5a5a, FunctionWhichReturnsLocalVariable());\n    \n    //This should be true because we can still change our answer\n    Counter = 0x1234;\n    TEST_ASSERT_EQUAL_HEX(0x1234, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              40,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain(void)\n{\n    //This should be true again because setup was rerun before this test (and after we changed it to 0x1234)\n    TEST_ASSERT_EQUAL_HEX(0x5a5a, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              50,
              0
            ],
            [
              54,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed(void)\n{\n    //Sometimes you get the test wrong.  When that happens, you get a failure too... and a quick look should tell\n    // you what actually happened...which in this case was a failure to setup the initial condition.\n    TEST_ASSERT_EQUAL_HEX(0x1234, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              56,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"ProductionCode.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_1/test/TestProductionCode2.c": {
      "fn_def_list": [
        {
          "fn_code": "void setUp(void)\n{\n}",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              11,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n}",
          "fn_code_pos": [
            [
              13,
              0
            ],
            [
              15,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_IgnoredTest(void)\n{\n    TEST_IGNORE_MESSAGE(\"This Test Was Ignored On Purpose\");\n}",
          "fn_code_pos": [
            [
              17,
              0
            ],
            [
              20,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_IgnoredTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_AnotherIgnoredTest(void)\n{\n    TEST_IGNORE_MESSAGE(\"These Can Be Useful For Leaving Yourself Notes On What You Need To Do Yet\");\n}",
          "fn_code_pos": [
            [
              22,
              0
            ],
            [
              25,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_AnotherIgnoredTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented(void)\n{\n    TEST_IGNORE(); /* Like This */\n}",
          "fn_code_pos": [
            [
              27,
              0
            ],
            [
              30,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"ProductionCode2.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_1/test/TestProductionCode.c": {
      "fn_def_list": [
        {
          "fn_code": "void setUp(void)\n{\n  /* This is run before EACH TEST */\n  Counter = 0x5a5a;\n}",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              13,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void tearDown(void)\n{\n}",
          "fn_code_pos": [
            [
              15,
              0
            ],
            [
              17,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode(void)\n{\n  /* All of these should pass */\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(78));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(1));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(33));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(999));\n  TEST_ASSERT_EQUAL(0, FindFunction_WhichIsBroken(-1));\n}",
          "fn_code_pos": [
            [
              19,
              0
            ],
            [
              27,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken(void)\n{\n  /* You should see this line fail in your test summary */\n  TEST_ASSERT_EQUAL(1, FindFunction_WhichIsBroken(34));\n  \n  /* Notice the rest of these didn't get a chance to run because the line above failed.  \n   * Unit tests abort each test function on the first sign of trouble. \n   * Then NEXT test function runs as normal. */\n  TEST_ASSERT_EQUAL(8, FindFunction_WhichIsBroken(8888));\n}",
          "fn_code_pos": [
            [
              29,
              0
            ],
            [
              38,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue(void)\n{\n    /* This should be true because setUp set this up for us before this test */\n    TEST_ASSERT_EQUAL_HEX(0x5a5a, FunctionWhichReturnsLocalVariable());\n    \n    /* This should be true because we can still change our answer */\n    Counter = 0x1234;\n    TEST_ASSERT_EQUAL_HEX(0x1234, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              40,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain(void)\n{\n    /* This should be true again because setup was rerun before this test (and after we changed it to 0x1234) */\n    TEST_ASSERT_EQUAL_HEX(0x5a5a, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              50,
              0
            ],
            [
              54,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed(void)\n{\n    /* Sometimes you get the test wrong.  When that happens, you get a failure too... and a quick look should tell\n     * you what actually happened...which in this case was a failure to setup the initial condition. */\n    TEST_ASSERT_EQUAL_HEX(0x1234, FunctionWhichReturnsLocalVariable());\n}",
          "fn_code_pos": [
            [
              56,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"ProductionCode.h\"\n",
          [
            1,
            0
          ],
          [
            2,
            0
          ]
        ],
        [
          "#include \"unity.h\"\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_1/test/test_runners/TestProductionCode2_Runner.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              36,
              0
            ],
            [
              40,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"test/TestProductionCode2.c\");\n  RUN_TEST(test_IgnoredTest, 18);\n  RUN_TEST(test_AnotherIgnoredTest, 23);\n  RUN_TEST(test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented, 28);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              44,
              0
            ],
            [
              52,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              27,
              12
            ],
            [
              27,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              28,
              12
            ],
            [
              28,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_IgnoredTest(void)",
          "fn_dec_pos": [
            [
              29,
              12
            ],
            [
              29,
              34
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_IgnoredTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_AnotherIgnoredTest(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              41
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_AnotherIgnoredTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              72
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_ThisFunctionHasNotBeenTested_NeedsToBeImplemented",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              35,
              5
            ],
            [
              35,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"ProductionCode2.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/examples/example_1/test/test_runners/TestProductionCode_Runner.c": {
      "fn_def_list": [
        {
          "fn_code": "void resetTest(void)\n{\n  tearDown();\n  setUp();\n}",
          "fn_code_pos": [
            [
              38,
              0
            ],
            [
              42,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(void)\n{\n  UnityBegin(\"test/TestProductionCode.c\");\n  RUN_TEST(test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode, 20);\n  RUN_TEST(test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken, 30);\n  RUN_TEST(test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue, 41);\n  RUN_TEST(test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain, 51);\n  RUN_TEST(test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed, 57);\n\n  return (UnityEnd());\n}",
          "fn_code_pos": [
            [
              46,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "setUp(void)",
          "fn_dec_pos": [
            [
              27,
              12
            ],
            [
              27,
              23
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "setUp",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "tearDown(void)",
          "fn_dec_pos": [
            [
              28,
              12
            ],
            [
              28,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "tearDown",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode(void)",
          "fn_dec_pos": [
            [
              29,
              12
            ],
            [
              29,
              113
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken(void)",
          "fn_dec_pos": [
            [
              30,
              12
            ],
            [
              30,
              133
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue(void)",
          "fn_dec_pos": [
            [
              31,
              12
            ],
            [
              31,
              91
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain(void)",
          "fn_dec_pos": [
            [
              32,
              12
            ],
            [
              32,
              96
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed(void)",
          "fn_dec_pos": [
            [
              33,
              12
            ],
            [
              33,
              123
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "resetTest(void)",
          "fn_dec_pos": [
            [
              37,
              5
            ],
            [
              37,
              20
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "resetTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include \"ProductionCode.h\"\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/extras/fixture/test/unity_fixture_TestRunner.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_GROUP_RUNNER(UnityFixture)\n{\n    RUN_TEST_CASE(UnityFixture, PointerSetting);\n    RUN_TEST_CASE(UnityFixture, ForceMallocFail);\n    RUN_TEST_CASE(UnityFixture, ReallocSmallerIsUnchanged);\n    RUN_TEST_CASE(UnityFixture, ReallocSameIsUnchanged);\n    RUN_TEST_CASE(UnityFixture, ReallocLargerNeeded);\n    RUN_TEST_CASE(UnityFixture, ReallocNullPointerIsLikeMalloc);\n    RUN_TEST_CASE(UnityFixture, ReallocSizeZeroFreesMemAndReturnsNullPointer);\n    RUN_TEST_CASE(UnityFixture, CallocFillsWithZero);\n    RUN_TEST_CASE(UnityFixture, PointerSet);\n    RUN_TEST_CASE(UnityFixture, FreeNULLSafety);\n    RUN_TEST_CASE(UnityFixture, ConcludeTestIncrementsFailCount);\n}",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              22,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_GROUP_RUNNER",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_GROUP_RUNNER(UnityCommandOptions)\n{\n    RUN_TEST_CASE(UnityCommandOptions, DefaultOptions);\n    RUN_TEST_CASE(UnityCommandOptions, OptionVerbose);\n    RUN_TEST_CASE(UnityCommandOptions, OptionSelectTestByGroup);\n    RUN_TEST_CASE(UnityCommandOptions, OptionSelectTestByName);\n    RUN_TEST_CASE(UnityCommandOptions, OptionSelectRepeatTestsDefaultCount);\n    RUN_TEST_CASE(UnityCommandOptions, OptionSelectRepeatTestsSpecificCount);\n    RUN_TEST_CASE(UnityCommandOptions, MultipleOptions);\n    RUN_TEST_CASE(UnityCommandOptions, MultipleOptionsDashRNotLastAndNoValueSpecified);\n    RUN_TEST_CASE(UnityCommandOptions, UnknownCommandIsIgnored);\n    RUN_TEST_CASE(UnityCommandOptions, GroupOrNameFilterWithoutStringFails);\n    RUN_TEST_CASE(UnityCommandOptions, GroupFilterReallyFilters);\n    RUN_TEST_CASE(UnityCommandOptions, TestShouldBeIgnored);\n}",
          "fn_code_pos": [
            [
              24,
              0
            ],
            [
              38,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_GROUP_RUNNER",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_GROUP_RUNNER(LeakDetection)\n{\n    RUN_TEST_CASE(LeakDetection, DetectsLeak);\n    RUN_TEST_CASE(LeakDetection, BufferOverrunFoundDuringFree);\n    RUN_TEST_CASE(LeakDetection, BufferOverrunFoundDuringRealloc);\n    RUN_TEST_CASE(LeakDetection, BufferGuardWriteFoundDuringFree);\n    RUN_TEST_CASE(LeakDetection, BufferGuardWriteFoundDuringRealloc);\n    RUN_TEST_CASE(LeakDetection, PointerSettingMax);\n}",
          "fn_code_pos": [
            [
              40,
              0
            ],
            [
              48,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_GROUP_RUNNER",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_GROUP_RUNNER(InternalMalloc)\n{\n    RUN_TEST_CASE(InternalMalloc, MallocPastBufferFails);\n    RUN_TEST_CASE(InternalMalloc, CallocPastBufferFails);\n    RUN_TEST_CASE(InternalMalloc, MallocThenReallocGrowsMemoryInPlace);\n    RUN_TEST_CASE(InternalMalloc, ReallocFailDoesNotFreeMem);\n}",
          "fn_code_pos": [
            [
              50,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_GROUP_RUNNER",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity_fixture.h\"\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/extras/fixture/test/template_fixture_tests.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_SETUP(mygroup)\n{\n    data = 0;\n}",
          "fn_code_pos": [
            [
              13,
              0
            ],
            [
              16,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(mygroup)\n{\n    data = -1;\n}",
          "fn_code_pos": [
            [
              18,
              0
            ],
            [
              21,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(mygroup, test1)\n{\n    TEST_ASSERT_EQUAL_INT(0, data);\n}",
          "fn_code_pos": [
            [
              23,
              0
            ],
            [
              26,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(mygroup, test2)\n{\n    TEST_ASSERT_EQUAL_INT(0, data);\n    data = 5;\n}",
          "fn_code_pos": [
            [
              28,
              0
            ],
            [
              32,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(mygroup, test3)\n{\n    data = 7;\n    TEST_ASSERT_EQUAL_INT(7, data);\n}",
          "fn_code_pos": [
            [
              34,
              0
            ],
            [
              38,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity_fixture.h\"\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/extras/fixture/test/unity_output_Spy.c": {
      "fn_def_list": [
        {
          "fn_code": "void UnityOutputCharSpy_Create(int s)\n{\n    size = (s > 0) ? s : 0;\n    count = 0;\n    spy_enable = 0;\n    buffer = malloc((size_t)size);\n    TEST_ASSERT_NOT_NULL_MESSAGE(buffer, \"Internal malloc failed in Spy Create():\" __FILE__);\n    memset(buffer, 0, (size_t)size);\n}",
          "fn_code_pos": [
            [
              19,
              0
            ],
            [
              27,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Create",
            "parameters": {
              "s": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "void UnityOutputCharSpy_Destroy(void)\n{\n    size = 0;\n    free(buffer);\n}",
          "fn_code_pos": [
            [
              29,
              0
            ],
            [
              33,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void UnityOutputCharSpy_OutputChar(int c)\n{\n    if (spy_enable)\n    {\n        if (count < (size-1))\n            buffer[count++] = (char)c;\n    }\n    else\n    {\n        putchar(c);\n    }\n}",
          "fn_code_pos": [
            [
              35,
              0
            ],
            [
              46,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_OutputChar",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "const char * UnityOutputCharSpy_Get(void)\n{\n    return buffer;\n}",
          "fn_code_pos": [
            [
              48,
              0
            ],
            [
              51,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Get",
            "parameters": {},
            "return_type": "char"
          }
        },
        {
          "fn_code": "void UnityOutputCharSpy_Enable(int enable)\n{\n    spy_enable = enable;\n}",
          "fn_code_pos": [
            [
              53,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Enable",
            "parameters": {
              "enable": "int"
            },
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "UnityOutputCharSpy_Get(void)",
          "fn_dec_pos": [
            [
              48,
              13
            ],
            [
              48,
              41
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Get",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity_output_Spy.h\"\n",
          [
            8,
            0
          ],
          [
            9,
            0
          ]
        ],
        [
          "#include \"unity_fixture.h\"\n",
          [
            9,
            0
          ],
          [
            10,
            0
          ]
        ],
        [
          "#include <stdio.h>\n",
          [
            11,
            0
          ],
          [
            12,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            12,
            0
          ],
          [
            13,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/extras/fixture/test/unity_fixture_Test.c": {
      "fn_def_list": [
        {
          "fn_code": "TEST_SETUP(UnityFixture)\n{\n}",
          "fn_code_pos": [
            [
              14,
              0
            ],
            [
              16,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(UnityFixture)\n{\n}",
          "fn_code_pos": [
            [
              18,
              0
            ],
            [
              20,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, PointerSetting)\n{\n    TEST_ASSERT_POINTERS_EQUAL(pointer1, 0);\n    UT_PTR_SET(pointer1, &int1);\n    UT_PTR_SET(pointer2, &int2);\n    UT_PTR_SET(pointer3, &int3);\n    TEST_ASSERT_POINTERS_EQUAL(pointer1, &int1);\n    TEST_ASSERT_POINTERS_EQUAL(pointer2, &int2);\n    TEST_ASSERT_POINTERS_EQUAL(pointer3, &int3);\n    UT_PTR_SET(pointer1, &int4);\n    UnityPointer_UndoAllSets();\n    TEST_ASSERT_POINTERS_EQUAL(pointer1, 0);\n    TEST_ASSERT_POINTERS_EQUAL(pointer2, (int*)2);\n    TEST_ASSERT_POINTERS_EQUAL(pointer3, (int*)3);\n}",
          "fn_code_pos": [
            [
              30,
              0
            ],
            [
              44,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ForceMallocFail)\n{\n    void* m;\n    void* mfails;\n    UnityMalloc_MakeMallocFailAfterCount(1);\n    m = malloc(10);\n    CHECK(m);\n    mfails = malloc(10);\n    TEST_ASSERT_POINTERS_EQUAL(0, mfails);\n    free(m);\n}",
          "fn_code_pos": [
            [
              46,
              0
            ],
            [
              56,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ReallocSmallerIsUnchanged)\n{\n    void* m1 = malloc(10);\n    void* m2 = realloc(m1, 5);\n    TEST_ASSERT_POINTERS_EQUAL(m1, m2);\n    free(m2);\n}",
          "fn_code_pos": [
            [
              58,
              0
            ],
            [
              64,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ReallocSameIsUnchanged)\n{\n    void* m1 = malloc(10);\n    void* m2 = realloc(m1, 10);\n    TEST_ASSERT_POINTERS_EQUAL(m1, m2);\n    free(m2);\n}",
          "fn_code_pos": [
            [
              66,
              0
            ],
            [
              72,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ReallocLargerNeeded)\n{\n    void* m1 = malloc(10);\n    void* m2;\n    CHECK(m1);\n    strcpy((char*)m1, \"123456789\");\n    m2 = realloc(m1, 15);\n    /* CHECK(m1 != m2); //Depends on implementation */\n    STRCMP_EQUAL(\"123456789\", m2);\n    free(m2);\n}",
          "fn_code_pos": [
            [
              74,
              0
            ],
            [
              84,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ReallocNullPointerIsLikeMalloc)\n{\n    void* m = realloc(0, 15);\n    CHECK(m != 0);\n    free(m);\n}",
          "fn_code_pos": [
            [
              86,
              0
            ],
            [
              91,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ReallocSizeZeroFreesMemAndReturnsNullPointer)\n{\n    void* m1 = malloc(10);\n    void* m2 = realloc(m1, 0);\n    TEST_ASSERT_POINTERS_EQUAL(0, m2);\n}",
          "fn_code_pos": [
            [
              93,
              0
            ],
            [
              98,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, CallocFillsWithZero)\n{\n    void* m = calloc(3, sizeof(char));\n    char* s = (char*)m;\n    CHECK(m);\n    TEST_ASSERT_BYTES_EQUAL(0, s[0]);\n    TEST_ASSERT_BYTES_EQUAL(0, s[1]);\n    TEST_ASSERT_BYTES_EQUAL(0, s[2]);\n    free(m);\n}",
          "fn_code_pos": [
            [
              100,
              0
            ],
            [
              109,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, PointerSet)\n{\n    char c1;\n    char c2;\n    char newC1;\n    char newC2;\n    p1 = &c1;\n    p2 = &c2;\n\n    UnityPointer_Init();\n    UT_PTR_SET(p1, &newC1);\n    UT_PTR_SET(p2, &newC2);\n    TEST_ASSERT_POINTERS_EQUAL(&newC1, p1);\n    TEST_ASSERT_POINTERS_EQUAL(&newC2, p2);\n    UnityPointer_UndoAllSets();\n    TEST_ASSERT_POINTERS_EQUAL(&c1, p1);\n    TEST_ASSERT_POINTERS_EQUAL(&c2, p2);\n}",
          "fn_code_pos": [
            [
              114,
              0
            ],
            [
              131,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, FreeNULLSafety)\n{\n    free(NULL);\n}",
          "fn_code_pos": [
            [
              133,
              0
            ],
            [
              136,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityFixture, ConcludeTestIncrementsFailCount)\n{\n    UNITY_UINT savedFails = Unity.TestFailures;\n    UNITY_UINT savedIgnores = Unity.TestIgnores;\n    UnityOutputCharSpy_Enable(1);\n    Unity.CurrentTestFailed = 1;\n    UnityConcludeFixtureTest(); /* Resets TestFailed for this test to pass */\n    Unity.CurrentTestIgnored = 1;\n    UnityConcludeFixtureTest(); /* Resets TestIgnored */\n    UnityOutputCharSpy_Enable(0);\n    TEST_ASSERT_EQUAL(savedFails + 1, Unity.TestFailures);\n    TEST_ASSERT_EQUAL(savedIgnores + 1, Unity.TestIgnores);\n    Unity.TestFailures = savedFails;\n    Unity.TestIgnores = savedIgnores;\n}",
          "fn_code_pos": [
            [
              138,
              0
            ],
            [
              152,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_SETUP(UnityCommandOptions)\n{\n    savedVerbose = UnityFixture.Verbose;\n    savedRepeat = UnityFixture.RepeatCount;\n    savedName = UnityFixture.NameFilter;\n    savedGroup = UnityFixture.GroupFilter;\n}",
          "fn_code_pos": [
            [
              163,
              0
            ],
            [
              169,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(UnityCommandOptions)\n{\n    UnityFixture.Verbose = savedVerbose;\n    UnityFixture.RepeatCount= savedRepeat;\n    UnityFixture.NameFilter = savedName;\n    UnityFixture.GroupFilter = savedGroup;\n}",
          "fn_code_pos": [
            [
              171,
              0
            ],
            [
              177,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, DefaultOptions)\n{\n    UnityGetCommandLineOptions(1, noOptions);\n    TEST_ASSERT_EQUAL(0, UnityFixture.Verbose);\n    TEST_ASSERT_POINTERS_EQUAL(0, UnityFixture.GroupFilter);\n    TEST_ASSERT_POINTERS_EQUAL(0, UnityFixture.NameFilter);\n    TEST_ASSERT_EQUAL(1, UnityFixture.RepeatCount);\n}",
          "fn_code_pos": [
            [
              184,
              0
            ],
            [
              191,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, OptionVerbose)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(2, verbose));\n    TEST_ASSERT_EQUAL(1, UnityFixture.Verbose);\n}",
          "fn_code_pos": [
            [
              198,
              0
            ],
            [
              202,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, OptionSelectTestByGroup)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(3, group));\n    STRCMP_EQUAL(\"groupname\", UnityFixture.GroupFilter);\n}",
          "fn_code_pos": [
            [
              209,
              0
            ],
            [
              213,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, OptionSelectTestByName)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(3, name));\n    STRCMP_EQUAL(\"testname\", UnityFixture.NameFilter);\n}",
          "fn_code_pos": [
            [
              220,
              0
            ],
            [
              224,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, OptionSelectRepeatTestsDefaultCount)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(2, repeat));\n    TEST_ASSERT_EQUAL(2, UnityFixture.RepeatCount);\n}",
          "fn_code_pos": [
            [
              231,
              0
            ],
            [
              235,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, OptionSelectRepeatTestsSpecificCount)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(3, repeat));\n    TEST_ASSERT_EQUAL(99, UnityFixture.RepeatCount);\n}",
          "fn_code_pos": [
            [
              237,
              0
            ],
            [
              241,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, MultipleOptions)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(8, multiple));\n    TEST_ASSERT_EQUAL(1, UnityFixture.Verbose);\n    STRCMP_EQUAL(\"groupname\", UnityFixture.GroupFilter);\n    STRCMP_EQUAL(\"testname\", UnityFixture.NameFilter);\n    TEST_ASSERT_EQUAL(98, UnityFixture.RepeatCount);\n}",
          "fn_code_pos": [
            [
              251,
              0
            ],
            [
              258,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, MultipleOptionsDashRNotLastAndNoValueSpecified)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(7, dashRNotLast));\n    TEST_ASSERT_EQUAL(1, UnityFixture.Verbose);\n    STRCMP_EQUAL(\"gggg\", UnityFixture.GroupFilter);\n    STRCMP_EQUAL(\"tttt\", UnityFixture.NameFilter);\n    TEST_ASSERT_EQUAL(2, UnityFixture.RepeatCount);\n}",
          "fn_code_pos": [
            [
              268,
              0
            ],
            [
              275,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, UnknownCommandIsIgnored)\n{\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(9, unknownCommand));\n    TEST_ASSERT_EQUAL(1, UnityFixture.Verbose);\n    STRCMP_EQUAL(\"groupname\", UnityFixture.GroupFilter);\n    STRCMP_EQUAL(\"testname\", UnityFixture.NameFilter);\n    TEST_ASSERT_EQUAL(98, UnityFixture.RepeatCount);\n}",
          "fn_code_pos": [
            [
              285,
              0
            ],
            [
              292,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, GroupOrNameFilterWithoutStringFails)\n{\n    TEST_ASSERT_EQUAL(1, UnityGetCommandLineOptions(3, unknownCommand));\n    TEST_ASSERT_EQUAL(1, UnityGetCommandLineOptions(5, unknownCommand));\n    TEST_ASSERT_EQUAL(1, UnityMain(3, unknownCommand, NULL));\n}",
          "fn_code_pos": [
            [
              294,
              0
            ],
            [
              299,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(UnityCommandOptions, GroupFilterReallyFilters)\n{\n    UNITY_UINT saved = Unity.NumberOfTests;\n    TEST_ASSERT_EQUAL(0, UnityGetCommandLineOptions(4, unknownCommand));\n    UnityIgnoreTest(NULL, \"non-matching\", NULL);\n    TEST_ASSERT_EQUAL(saved, Unity.NumberOfTests);\n}",
          "fn_code_pos": [
            [
              301,
              0
            ],
            [
              307,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "IGNORE_TEST(UnityCommandOptions, TestShouldBeIgnored)\n{\n    TEST_FAIL_MESSAGE(\"This test should not run!\");\n}",
          "fn_code_pos": [
            [
              309,
              0
            ],
            [
              312,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "IGNORE_TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_SETUP(LeakDetection)\n{\n#ifdef UNITY_EXCLUDE_STDLIB_MALLOC\n    UnityOutputCharSpy_Create(200);\n#else\n    UnityOutputCharSpy_Create(1000);\n#endif\n}",
          "fn_code_pos": [
            [
              318,
              0
            ],
            [
              325,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(LeakDetection)\n{\n    UnityOutputCharSpy_Destroy();\n}",
          "fn_code_pos": [
            [
              327,
              0
            ],
            [
              330,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(LeakDetection, DetectsLeak)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE_MESSAGE(\"Build with '-D UNITY_OUTPUT_CHAR=UnityOutputCharSpy_OutputChar' to enable tests\");\n#else\n    void* m = malloc(10);\n    TEST_ASSERT_NOT_NULL(m);\n    UnityOutputCharSpy_Enable(1);\n    EXPECT_ABORT_BEGIN\n    UnityMalloc_EndTest();\n    EXPECT_ABORT_END\n    UnityOutputCharSpy_Enable(0);\n    Unity.CurrentTestFailed = 0;\n    CHECK(strstr(UnityOutputCharSpy_Get(), \"This test leaks!\"));\n    free(m);\n#endif\n}",
          "fn_code_pos": [
            [
              366,
              0
            ],
            [
              382,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(LeakDetection, BufferOverrunFoundDuringFree)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    void* m = malloc(10);\n    char* s = (char*)m;\n    TEST_ASSERT_NOT_NULL(m);\n    s[10] = (char)0xFF;\n    UnityOutputCharSpy_Enable(1);\n    EXPECT_ABORT_BEGIN\n    free(m);\n    EXPECT_ABORT_END\n    UnityOutputCharSpy_Enable(0);\n    Unity.CurrentTestFailed = 0;\n    CHECK(strstr(UnityOutputCharSpy_Get(), \"Buffer overrun detected during free()\"));\n#endif\n}",
          "fn_code_pos": [
            [
              384,
              0
            ],
            [
              401,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(LeakDetection, BufferOverrunFoundDuringRealloc)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    void* m = malloc(10);\n    char* s = (char*)m;\n    TEST_ASSERT_NOT_NULL(m);\n    s[10] = (char)0xFF;\n    UnityOutputCharSpy_Enable(1);\n    EXPECT_ABORT_BEGIN\n    m = realloc(m, 100);\n    EXPECT_ABORT_END\n    UnityOutputCharSpy_Enable(0);\n    Unity.CurrentTestFailed = 0;\n    CHECK(strstr(UnityOutputCharSpy_Get(), \"Buffer overrun detected during realloc()\"));\n#endif\n}",
          "fn_code_pos": [
            [
              403,
              0
            ],
            [
              420,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(LeakDetection, BufferGuardWriteFoundDuringFree)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    void* m = malloc(10);\n    char* s = (char*)m;\n    TEST_ASSERT_NOT_NULL(m);\n    s[-1] = (char)0x00; /* Will not detect 0 */\n    s[-2] = (char)0x01;\n    UnityOutputCharSpy_Enable(1);\n    EXPECT_ABORT_BEGIN\n    free(m);\n    EXPECT_ABORT_END\n    UnityOutputCharSpy_Enable(0);\n    Unity.CurrentTestFailed = 0;\n    CHECK(strstr(UnityOutputCharSpy_Get(), \"Buffer overrun detected during free()\"));\n#endif\n}",
          "fn_code_pos": [
            [
              422,
              0
            ],
            [
              440,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(LeakDetection, BufferGuardWriteFoundDuringRealloc)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    void* m = malloc(10);\n    char* s = (char*)m;\n    TEST_ASSERT_NOT_NULL(m);\n    s[-1] = (char)0x0A;\n    UnityOutputCharSpy_Enable(1);\n    EXPECT_ABORT_BEGIN\n    m = realloc(m, 100);\n    EXPECT_ABORT_END\n    UnityOutputCharSpy_Enable(0);\n    Unity.CurrentTestFailed = 0;\n    CHECK(strstr(UnityOutputCharSpy_Get(), \"Buffer overrun detected during realloc()\"));\n#endif\n}",
          "fn_code_pos": [
            [
              442,
              0
            ],
            [
              459,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(LeakDetection, PointerSettingMax)\n{\n#ifndef USING_OUTPUT_SPY\n    TEST_IGNORE();\n#else\n    int i;\n    for (i = 0; i < UNITY_MAX_POINTERS; i++) UT_PTR_SET(pointer1, &int1);\n    UnityOutputCharSpy_Enable(1);\n    EXPECT_ABORT_BEGIN\n    UT_PTR_SET(pointer1, &int1);\n    EXPECT_ABORT_END\n    UnityOutputCharSpy_Enable(0);\n    Unity.CurrentTestFailed = 0;\n    CHECK(strstr(UnityOutputCharSpy_Get(), \"Too many pointers set\"));\n#endif\n}",
          "fn_code_pos": [
            [
              461,
              0
            ],
            [
              476,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_SETUP(InternalMalloc) { }",
          "fn_code_pos": [
            [
              486,
              0
            ],
            [
              486,
              30
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_SETUP",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST_TEAR_DOWN(InternalMalloc) { }",
          "fn_code_pos": [
            [
              487,
              0
            ],
            [
              487,
              34
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST_TEAR_DOWN",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(InternalMalloc, MallocPastBufferFails)\n{\n#ifdef UNITY_EXCLUDE_STDLIB_MALLOC\n    void* m = malloc(UNITY_INTERNAL_HEAP_SIZE_BYTES/2 + 1);\n    void* n = malloc(UNITY_INTERNAL_HEAP_SIZE_BYTES/2);\n    free(m);\n    TEST_ASSERT_NOT_NULL(m);\n    TEST_ASSERT_NULL(n);\n    TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER(m, n);\n#endif\n}",
          "fn_code_pos": [
            [
              489,
              0
            ],
            [
              499,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(InternalMalloc, CallocPastBufferFails)\n{\n#ifdef UNITY_EXCLUDE_STDLIB_MALLOC\n    void* m = calloc(1, UNITY_INTERNAL_HEAP_SIZE_BYTES/2 + 1);\n    void* n = calloc(1, UNITY_INTERNAL_HEAP_SIZE_BYTES/2);\n    free(m);\n    TEST_ASSERT_NOT_NULL(m);\n    TEST_ASSERT_NULL(n);\n    TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER(m, n);\n#endif\n}",
          "fn_code_pos": [
            [
              501,
              0
            ],
            [
              511,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(InternalMalloc, MallocThenReallocGrowsMemoryInPlace)\n{\n#ifdef UNITY_EXCLUDE_STDLIB_MALLOC\n    void* m = malloc(UNITY_INTERNAL_HEAP_SIZE_BYTES/2 + 1);\n    void* n = realloc(m, UNITY_INTERNAL_HEAP_SIZE_BYTES/2 + 9);\n    free(n);\n    TEST_ASSERT_NOT_NULL(m);\n    TEST_ASSERT_EQUAL(m, n);\n    TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER(m, n);\n#endif\n}",
          "fn_code_pos": [
            [
              513,
              0
            ],
            [
              523,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "TEST(InternalMalloc, ReallocFailDoesNotFreeMem)\n{\n#ifdef UNITY_EXCLUDE_STDLIB_MALLOC\n    void* m = malloc(UNITY_INTERNAL_HEAP_SIZE_BYTES/2);\n    void* n1 = malloc(10);\n    void* out_of_mem = realloc(n1, UNITY_INTERNAL_HEAP_SIZE_BYTES/2 + 1);\n    void* n2 = malloc(10);\n\n    free(n2);\n    if (out_of_mem == NULL) free(n1);\n    free(m);\n\n    TEST_ASSERT_NOT_NULL(m);       /* Got a real memory location */\n    TEST_ASSERT_NULL(out_of_mem);  /* The realloc should have failed */\n    TEST_ASSERT_NOT_EQUAL(n2, n1); /* If n1 != n2 then realloc did not free n1 */\n    TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER(m, n2);\n#endif\n}",
          "fn_code_pos": [
            [
              525,
              0
            ],
            [
              542,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TEST",
            "parameters": {},
            "return_type": null
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "UnityMalloc_EndTest()",
          "fn_dec_pos": [
            [
              375,
              4
            ],
            [
              375,
              25
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityMalloc_EndTest",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "free(m)",
          "fn_dec_pos": [
            [
              395,
              4
            ],
            [
              395,
              11
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "free",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        },
        {
          "fn_code": "free(m)",
          "fn_dec_pos": [
            [
              434,
              4
            ],
            [
              434,
              11
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "free",
            "parameters": {},
            "return_type": "EXPECT_ABORT_BEGIN"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity_fixture.h\"\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ],
        [
          "#include \"unity_output_Spy.h\"\n",
          [
            8,
            0
          ],
          [
            9,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            9,
            0
          ],
          [
            10,
            0
          ]
        ],
        [
          "#include <string.h>\n",
          [
            10,
            0
          ],
          [
            11,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/extras/fixture/test/main/AllTests.c": {
      "fn_def_list": [
        {
          "fn_code": "static void runAllTests(void)\n{\n    RUN_TEST_GROUP(UnityFixture);\n    RUN_TEST_GROUP(UnityCommandOptions);\n    RUN_TEST_GROUP(LeakDetection);\n    RUN_TEST_GROUP(InternalMalloc);\n}",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              15,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "runAllTests",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main(int argc, const char* argv[])\n{\n    return UnityMain(argc, argv, runAllTests);\n}",
          "fn_code_pos": [
            [
              17,
              0
            ],
            [
              20,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {
              "argc": "int",
              "argv": "char"
            },
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity_fixture.h\"\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    }
  },
  "head": {
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/mockMock.h": {
      "fn_def_list": [],
      "fn_declaraion": [
        {
          "fn_code": "mockMock_Init(void)",
          "fn_dec_pos": [
            [
              8,
              5
            ],
            [
              8,
              24
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "mockMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "mockMock_Verify(void)",
          "fn_dec_pos": [
            [
              9,
              5
            ],
            [
              9,
              26
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "mockMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "mockMock_Destroy(void)",
          "fn_dec_pos": [
            [
              10,
              5
            ],
            [
              10,
              27
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "mockMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/cmock.h": {
      "fn_def_list": [
        {
          "fn_code": "void CMock_Guts_MemFreeFinal(void) { CMockMemFreeFinalCounter++; }",
          "fn_code_pos": [
            [
              8,
              0
            ],
            [
              8,
              66
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CMock_Guts_MemFreeFinal",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void mockMock_Init(void)           { mockMock_Init_Counter++;    }",
          "fn_code_pos": [
            [
              9,
              0
            ],
            [
              9,
              66
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "mockMock_Init",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void mockMock_Verify(void)         { mockMock_Verify_Counter++;  }",
          "fn_code_pos": [
            [
              10,
              0
            ],
            [
              10,
              66
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "mockMock_Verify",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "void mockMock_Destroy(void)        { mockMock_Destroy_Counter++; }",
          "fn_code_pos": [
            [
              11,
              0
            ],
            [
              11,
              66
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "mockMock_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/Defs.h": {
      "fn_def_list": [],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/testdata/CException.h": {
      "fn_def_list": [],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_mock_head1.h": {
      "fn_def_list": [],
      "fn_declaraion": [
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              9,
              5
            ],
            [
              9,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              10,
              5
            ],
            [
              10,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            4,
            0
          ],
          [
            5,
            0
          ]
        ],
        [
          "#include \"cmock.h\"\n",
          [
            5,
            0
          ],
          [
            6,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            6,
            0
          ],
          [
            7,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/test/expectdata/testsample_head1.h": {
      "fn_def_list": [],
      "fn_declaraion": [
        {
          "fn_code": "test_TheFirstThingToTest(void)",
          "fn_dec_pos": [
            [
              9,
              5
            ],
            [
              9,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFirstThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheSecondThingToTest(void)",
          "fn_dec_pos": [
            [
              10,
              5
            ],
            [
              10,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheSecondThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheThirdThingToTest(void)",
          "fn_dec_pos": [
            [
              11,
              5
            ],
            [
              11,
              35
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheThirdThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "test_TheFourthThingToTest(void)",
          "fn_dec_pos": [
            [
              12,
              5
            ],
            [
              12,
              36
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "test_TheFourthThingToTest",
            "parameters": {},
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include \"unity.h\"\n",
          [
            4,
            0
          ],
          [
            5,
            0
          ]
        ],
        [
          "#include \"funky.h\"\n",
          [
            5,
            0
          ],
          [
            6,
            0
          ]
        ],
        [
          "#include \"stanky.h\"\n",
          [
            6,
            0
          ],
          [
            7,
            0
          ]
        ],
        [
          "#include <setjmp.h>\n",
          [
            7,
            0
          ],
          [
            8,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/cjson/tests/unity/extras/fixture/test/unity_output_Spy.h": {
      "fn_def_list": [],
      "fn_declaraion": [
        {
          "fn_code": "UnityOutputCharSpy_Create(int s)",
          "fn_dec_pos": [
            [
              10,
              5
            ],
            [
              10,
              37
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Create",
            "parameters": {
              "s": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "UnityOutputCharSpy_Destroy(void)",
          "fn_dec_pos": [
            [
              11,
              5
            ],
            [
              11,
              37
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Destroy",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "UnityOutputCharSpy_OutputChar(int c)",
          "fn_dec_pos": [
            [
              12,
              5
            ],
            [
              12,
              41
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_OutputChar",
            "parameters": {
              "c": "int"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "UnityOutputCharSpy_Get(void)",
          "fn_dec_pos": [
            [
              13,
              13
            ],
            [
              13,
              41
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Get",
            "parameters": {},
            "return_type": null
          }
        },
        {
          "fn_code": "UnityOutputCharSpy_Enable(int enable)",
          "fn_dec_pos": [
            [
              14,
              5
            ],
            [
              14,
              42
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "UnityOutputCharSpy_Enable",
            "parameters": {
              "enable": "int"
            },
            "return_type": "void"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [],
      "global_variables": [],
      "enumerate_node_list": []
    }
  }
}