"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"pack_2t_filter","_mm_loadu_si128","/src/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c","/usr/local/lib/clang/15.0.0/include/emmintrin.h",390,395,3552,3552,"pack_2t_filter(const int16_t *, __m256i *) -> void","const int16_t * filter, __m256i * f","void","void","_mm_loadu_si128(const __m128i_u *) -> __m128i","const __m128i_u * __p","__m128i","__attribute((vector_size(16))) long long"
"pack_2t_filter","_mm256_castsi128_si256","/src/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c","/usr/local/lib/clang/15.0.0/include/avxintrin.h",390,395,4495,4495,"pack_2t_filter(const int16_t *, __m256i *) -> void","const int16_t * filter, __m256i * f","void","void","_mm256_castsi128_si256(__m128i) -> __m256i","__m128i __a","__m256i","__attribute((vector_size(32))) long long"
"pack_2t_filter","_mm256_set1_epi32","/src/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c","/usr/local/lib/clang/15.0.0/include/avxintrin.h",390,395,4182,4182,"pack_2t_filter(const int16_t *, __m256i *) -> void","const int16_t * filter, __m256i * f","void","void","_mm256_set1_epi32(int) -> __m256i","int __i","__m256i","__attribute((vector_size(32))) long long"
"pack_2t_filter","_mm256_shuffle_epi8","/src/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c","/usr/local/lib/clang/15.0.0/include/avx2intrin.h",390,395,464,464,"pack_2t_filter(const int16_t *, __m256i *) -> void","const int16_t * filter, __m256i * f","void","void","_mm256_shuffle_epi8(__m256i, __m256i) -> __m256i","__m256i __a, __m256i __b","__m256i","__attribute((vector_size(32))) long long"
"pack_2t_filter","__builtin_ia32_vinsertf128_si256","/src/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c","",390,395,0,0,"pack_2t_filter(const int16_t *, __m256i *) -> void","const int16_t * filter, __m256i * f","void","void","__builtin_ia32_vinsertf128_si256(__attribute((vector_size(32))) int, __attribute((vector_size(16))) int, int) -> __attribute((vector_size(32))) int","__attribute((vector_size(32))) int (unnamed parameter 0), __attribute((vector_size(16))) int (unnamed parameter 1), int (unnamed parameter 2)","__attribute((vector_size(32))) int","__attribute((vector_size(32))) int"
