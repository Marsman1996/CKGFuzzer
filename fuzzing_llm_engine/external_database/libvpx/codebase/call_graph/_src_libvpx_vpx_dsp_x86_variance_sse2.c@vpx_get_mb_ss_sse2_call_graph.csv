"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"vpx_get_mb_ss_sse2","_mm_loadu_si128","/src/libvpx/vpx_dsp/x86/variance_sse2.c","/usr/local/lib/clang/15.0.0/include/emmintrin.h",25,36,3552,3552,"vpx_get_mb_ss_sse2(const int16_t *) -> unsigned int","const int16_t * src_ptr","unsigned int","unsigned int","_mm_loadu_si128(const __m128i_u *) -> __m128i","const __m128i_u * __p","__m128i","__attribute((vector_size(16))) long long"
"vpx_get_mb_ss_sse2","_mm_setzero_si128","/src/libvpx/vpx_dsp/x86/variance_sse2.c","/usr/local/lib/clang/15.0.0/include/emmintrin.h",25,36,3981,3981,"vpx_get_mb_ss_sse2(const int16_t *) -> unsigned int","const int16_t * src_ptr","unsigned int","unsigned int","_mm_setzero_si128() -> __m128i","","__m128i","__attribute((vector_size(16))) long long"
"vpx_get_mb_ss_sse2","_mm_add_epi32","/src/libvpx/vpx_dsp/x86/variance_sse2.c","/usr/local/lib/clang/15.0.0/include/emmintrin.h",25,36,2165,2165,"vpx_get_mb_ss_sse2(const int16_t *) -> unsigned int","const int16_t * src_ptr","unsigned int","unsigned int","_mm_add_epi32(__m128i, __m128i) -> __m128i","__m128i __a, __m128i __b","__m128i","__attribute((vector_size(16))) long long"
"vpx_get_mb_ss_sse2","_mm_madd_epi16","/src/libvpx/vpx_dsp/x86/variance_sse2.c","/usr/local/lib/clang/15.0.0/include/emmintrin.h",25,36,2356,2356,"vpx_get_mb_ss_sse2(const int16_t *) -> unsigned int","const int16_t * src_ptr","unsigned int","unsigned int","_mm_madd_epi16(__m128i, __m128i) -> __m128i","__m128i __a, __m128i __b","__m128i","__attribute((vector_size(16))) long long"
"vpx_get_mb_ss_sse2","add32x4_sse2","/src/libvpx/vpx_dsp/x86/variance_sse2.c","/src/libvpx/vpx_dsp/x86/variance_sse2.c",25,36,19,19,"vpx_get_mb_ss_sse2(const int16_t *) -> unsigned int","const int16_t * src_ptr","unsigned int","unsigned int","add32x4_sse2(__m128i) -> unsigned int","__m128i val","unsigned int","unsigned int"
