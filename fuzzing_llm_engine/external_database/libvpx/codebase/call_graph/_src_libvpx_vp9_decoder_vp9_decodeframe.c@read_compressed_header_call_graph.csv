"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"read_compressed_header","vpx_internal_error","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vpx/src/vpx_codec.c",2867,2914,116,116,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","vpx_internal_error(vpx_internal_error_info *, vpx_codec_err_t, const char *) -> void","vpx_internal_error_info * info, vpx_codec_err_t error, const char * fmt","void","void"
"read_compressed_header","frame_is_intra_only","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/common/vp9_onyxc_int.h",2867,2914,363,363,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","frame_is_intra_only(const VP9_COMMON *const) -> int","const VP9_COMMON *const cm","int","int"
"read_compressed_header","vp9_setup_compound_reference_mode","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/common/vp9_pred_common.c",2867,2914,24,24,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","vp9_setup_compound_reference_mode(VP9_COMMON *) -> void","VP9_COMMON * cm","void","void"
"read_compressed_header","vpx_reader_init","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vpx_dsp/bitreader.c",2867,2914,21,21,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","vpx_reader_init(vpx_reader *, const uint8_t *, size_t, vpx_decrypt_cb, void *) -> int","vpx_reader * r, const uint8_t * buffer, size_t size, vpx_decrypt_cb decrypt_cb, void * decrypt_state","int","int"
"read_compressed_header","read_tx_mode","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,68,68,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_tx_mode(vpx_reader *) -> TX_MODE","vpx_reader * r","TX_MODE","(unnamed enum)"
"read_compressed_header","read_tx_mode_probs","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,75,75,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_tx_mode_probs(tx_probs *, vpx_reader *) -> void","tx_probs * tx_probs, vpx_reader * r","void","void"
"read_compressed_header","read_coef_probs","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,1327,1327,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_coef_probs(FRAME_CONTEXT *, TX_MODE, vpx_reader *) -> void","FRAME_CONTEXT * fc, TX_MODE tx_mode, vpx_reader * r","void","void"
"read_compressed_header","vp9_diff_update_prob","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_dsubexp.c",2867,2914,67,67,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","vp9_diff_update_prob(vpx_reader *, vpx_prob *) -> void","vpx_reader * r, vpx_prob * p","void","void"
"read_compressed_header","read_inter_mode_probs","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,98,98,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_inter_mode_probs(FRAME_CONTEXT *, vpx_reader *) -> void","FRAME_CONTEXT * fc, vpx_reader * r","void","void"
"read_compressed_header","read_switchable_interp_probs","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,91,91,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_switchable_interp_probs(FRAME_CONTEXT *, vpx_reader *) -> void","FRAME_CONTEXT * fc, vpx_reader * r","void","void"
"read_compressed_header","read_frame_reference_mode","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,105,105,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_frame_reference_mode(const VP9_COMMON *, vpx_reader *) -> REFERENCE_MODE","const VP9_COMMON * cm, vpx_reader * r","REFERENCE_MODE","(unnamed enum)"
"read_compressed_header","read_frame_reference_mode_probs","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,116,116,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_frame_reference_mode_probs(VP9_COMMON *, vpx_reader *) -> void","VP9_COMMON * cm, vpx_reader * r","void","void"
"read_compressed_header","read_mv_probs","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vp9/decoder/vp9_decodeframe.c",2867,2914,141,141,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","read_mv_probs(nmv_context *, int, vpx_reader *) -> void","nmv_context * ctx, int allow_hp, vpx_reader * r","void","void"
"read_compressed_header","vpx_reader_has_error","/src/libvpx/vp9/decoder/vp9_decodeframe.c","/src/libvpx/vpx_dsp/bitreader.h",2867,2914,59,59,"read_compressed_header(VP9Decoder *, const uint8_t *, size_t) -> int","VP9Decoder * pbi, const uint8_t * data, size_t partition_size","int","int","vpx_reader_has_error(vpx_reader *) -> int","vpx_reader * r","int","int"
