"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"decode_split_mv","vp8_check_mv_bounds","/src/libvpx/vp8/decoder/decodemv.c","/src/libvpx/vp8/common/findnearmv.h",193,282,60,60,"decode_split_mv(vp8_reader *const, MODE_INFO *, const MODE_INFO *, const MODE_INFO *, MB_MODE_INFO *, int_mv, MV_CONTEXT *const, int, int, int, int) -> void","vp8_reader *const bc, MODE_INFO * mi, const MODE_INFO * left_mb, const MODE_INFO * above_mb, MB_MODE_INFO * mbmi, int_mv best_mv, MV_CONTEXT *const mvc, int mb_to_left_edge, int mb_to_right_edge, int mb_to_top_edge, int mb_to_bottom_edge","void","void","vp8_check_mv_bounds(int_mv *, int, int, int, int) -> unsigned int","int_mv * mv, int mb_to_left_edge, int mb_to_right_edge, int mb_to_top_edge, int mb_to_bottom_edge","unsigned int","unsigned int"
"decode_split_mv","vp8dx_decode_bool","/src/libvpx/vp8/decoder/decodemv.c","/src/libvpx/vp8/decoder/dboolhuff.h",193,282,54,54,"decode_split_mv(vp8_reader *const, MODE_INFO *, const MODE_INFO *, const MODE_INFO *, MB_MODE_INFO *, int_mv, MV_CONTEXT *const, int, int, int, int) -> void","vp8_reader *const bc, MODE_INFO * mi, const MODE_INFO * left_mb, const MODE_INFO * above_mb, MB_MODE_INFO * mbmi, int_mv best_mv, MV_CONTEXT *const mvc, int mb_to_left_edge, int mb_to_right_edge, int mb_to_top_edge, int mb_to_bottom_edge","void","void","vp8dx_decode_bool(BOOL_DECODER *, int) -> int","BOOL_DECODER * br, int probability","int","int"
"decode_split_mv","get_sub_mv_ref_prob","/src/libvpx/vp8/decoder/decodemv.c","/src/libvpx/vp8/decoder/decodemv.c",193,282,176,176,"decode_split_mv(vp8_reader *const, MODE_INFO *, const MODE_INFO *, const MODE_INFO *, MB_MODE_INFO *, int_mv, MV_CONTEXT *const, int, int, int, int) -> void","vp8_reader *const bc, MODE_INFO * mi, const MODE_INFO * left_mb, const MODE_INFO * above_mb, MB_MODE_INFO * mbmi, int_mv best_mv, MV_CONTEXT *const mvc, int mb_to_left_edge, int mb_to_right_edge, int mb_to_top_edge, int mb_to_bottom_edge","void","void","get_sub_mv_ref_prob(const uint32_t, const uint32_t) -> const vp8_prob *","const uint32_t left, const uint32_t above","const vp8_prob *","unsigned char *"
"decode_split_mv","read_mvcomponent","/src/libvpx/vp8/decoder/decodemv.c","/src/libvpx/vp8/decoder/decodemv.c",193,282,64,64,"decode_split_mv(vp8_reader *const, MODE_INFO *, const MODE_INFO *, const MODE_INFO *, MB_MODE_INFO *, int_mv, MV_CONTEXT *const, int, int, int, int) -> void","vp8_reader *const bc, MODE_INFO * mi, const MODE_INFO * left_mb, const MODE_INFO * above_mb, MB_MODE_INFO * mbmi, int_mv best_mv, MV_CONTEXT *const mvc, int mb_to_left_edge, int mb_to_right_edge, int mb_to_top_edge, int mb_to_bottom_edge","void","void","read_mvcomponent(vp8_reader *, const MV_CONTEXT *) -> int","vp8_reader * r, const MV_CONTEXT * mvc","int","int"
