"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"pcap_setnonblock","pcap_strlcpy","/src/libpcap/pcap.c","/src/libpcap/missing/strlcpy.c",3326,3343,34,34,"pcap_setnonblock(pcap_t *, int, char *) -> int","pcap_t * p, int nonblock, char * errbuf","int","int","pcap_strlcpy(char *__restrict__, const char *__restrict__, size_t) -> size_t","char *__restrict__ dst, const char *__restrict__ src, size_t dsize","size_t","unsigned long"
"pcap_setnonblock","pcap_setnonblock_fd","/src/libpcap/pcap.c","/src/libpcap/pcap.c",3326,3343,3353,3353,"pcap_setnonblock(pcap_t *, int, char *) -> int","pcap_t * p, int nonblock, char * errbuf","int","int","pcap_setnonblock_fd(pcap_t *, int) -> int","pcap_t * p, int nonblock","int","int"
"pcap_setnonblock","pcap_setnonblock_mmap","/src/libpcap/pcap.c","/src/libpcap/pcap-linux.c",3326,3343,4960,4960,"pcap_setnonblock(pcap_t *, int, char *) -> int","pcap_t * p, int nonblock, char * errbuf","int","int","pcap_setnonblock_mmap(pcap_t *, int) -> int","pcap_t * handle, int nonblock","int","int"
"pcap_setnonblock","pcap_setnonblock_dead","/src/libpcap/pcap.c","/src/libpcap/pcap.c",3326,3343,3881,3881,"pcap_setnonblock(pcap_t *, int, char *) -> int","pcap_t * p, int nonblock, char * errbuf","int","int","pcap_setnonblock_dead(pcap_t *, int) -> int","pcap_t * p, int nonblock","int","int"
"pcap_setnonblock","pcap_setnonblock_unactivated","/src/libpcap/pcap.c","/src/libpcap/pcap.c",3326,3343,2188,2188,"pcap_setnonblock(pcap_t *, int, char *) -> int","pcap_t * p, int nonblock, char * errbuf","int","int","pcap_setnonblock_unactivated(pcap_t *, int) -> int","pcap_t * p, int nonblock","int","int"
"pcap_setnonblock","sf_setnonblock","/src/libpcap/pcap.c","/src/libpcap/savefile.c",3326,3343,97,97,"pcap_setnonblock(pcap_t *, int, char *) -> int","pcap_t * p, int nonblock, char * errbuf","int","int","sf_setnonblock(pcap_t *, int) -> int","pcap_t * p, int nonblock","int","int"
