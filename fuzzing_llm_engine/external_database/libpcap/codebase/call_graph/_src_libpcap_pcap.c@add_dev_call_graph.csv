"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"add_dev","__builtin_constant_p","/src/libpcap/pcap.c","",1161,1276,0,0,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","__builtin_constant_p() -> int","","int","int"
"add_dev","pcap_fmt_errmsg_for_errno","/src/libpcap/pcap.c","/src/libpcap/fmtutils.c",1161,1276,61,61,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","pcap_fmt_errmsg_for_errno(char *, size_t, int, const char *) -> void","char * errbuf, size_t errbuflen, int errnum, const char * fmt","void","void"
"add_dev","free","/src/libpcap/pcap.c","/usr/include/stdlib.h",1161,1276,483,483,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","free(void *) -> void","void * __ptr","void","void"
"add_dev","calloc","/src/libpcap/pcap.c","/usr/include/stdlib.h",1161,1276,468,468,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","calloc(size_t, size_t) -> void *","size_t __nmemb, size_t __size","void *","void *"
"add_dev","malloc","/src/libpcap/pcap.c","/usr/include/stdlib.h",1161,1276,466,466,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","malloc(size_t) -> void *","size_t __size","void *","void *"
"add_dev","__strdup","/src/libpcap/pcap.c","/usr/include/x86_64-linux-gnu/bits/string2.h",1161,1276,1278,1278,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","__strdup(const char *) -> char *","const char * __string","char *","char *"
"add_dev","strlen","/src/libpcap/pcap.c","/usr/include/string.h",1161,1276,394,394,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","strlen(const char *) -> size_t","const char * __s","size_t","unsigned long"
"add_dev","memcpy","/src/libpcap/pcap.c","/usr/include/string.h",1161,1276,42,42,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","memcpy(void *__restrict__, const void *__restrict__, size_t) -> void *","void *__restrict__ __dest, const void *__restrict__ __src, size_t __n","void *","void *"
"add_dev","__errno_location","/src/libpcap/pcap.c","/usr/include/x86_64-linux-gnu/bits/errno.h",1161,1276,50,50,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","__errno_location() -> int *","","int *","int *"
"add_dev","get_figure_of_merit","/src/libpcap/pcap.c","/src/libpcap/pcap.c",1161,1276,630,630,"add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *, char *) -> pcap_if_t *","pcap_if_list_t * devlistp, const char * name, bpf_u_int32 flags, const char * description, char * errbuf","pcap_if_t *","pcap_if *","get_figure_of_merit(pcap_if_t *) -> u_int","pcap_if_t * dev","u_int","unsigned int"
