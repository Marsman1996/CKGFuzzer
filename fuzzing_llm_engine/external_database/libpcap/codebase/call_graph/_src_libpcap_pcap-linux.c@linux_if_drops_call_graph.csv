"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"linux_if_drops","fgets","/src/libpcap/pcap-linux.c","/usr/include/stdio.h",1179,1228,622,622,"linux_if_drops(const char *) -> long","const char * if_name","long","long","fgets(char *__restrict__, int, FILE *__restrict__) -> char *","char *__restrict__ __s, int __n, FILE *__restrict__ __stream","char *","char *"
"linux_if_drops","fopen","/src/libpcap/pcap-linux.c","/usr/include/stdio.h",1179,1228,272,272,"linux_if_drops(const char *) -> long","const char * if_name","long","long","fopen(const char *__restrict__, const char *__restrict__) -> FILE *","const char *__restrict__ __filename, const char *__restrict__ __modes","FILE *","_IO_FILE *"
"linux_if_drops","fclose","/src/libpcap/pcap-linux.c","/usr/include/stdio.h",1179,1228,237,237,"linux_if_drops(const char *) -> long","const char * if_name","long","long","fclose(FILE *) -> int","FILE * __stream","int","int"
"linux_if_drops","strtol","/src/libpcap/pcap-linux.c","/usr/include/stdlib.h",1179,1228,183,183,"linux_if_drops(const char *) -> long","const char * if_name","long","long","strtol(const char *__restrict__, char **__restrict__, int) -> long","const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base","long","long"
"linux_if_drops","strlen","/src/libpcap/pcap-linux.c","/usr/include/string.h",1179,1228,394,394,"linux_if_drops(const char *) -> long","const char * if_name","long","long","strlen(const char *) -> size_t","const char * __s","size_t","unsigned long"
"linux_if_drops","strstr","/src/libpcap/pcap-linux.c","/usr/include/string.h",1179,1228,337,337,"linux_if_drops(const char *) -> long","const char * if_name","long","long","strstr(const char *, const char *) -> char *","const char * __haystack, const char * __needle","char *","char *"
