{
  "src": {
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/lcms/plugins/threaded/testbed/threaded_testbed.c": {
      "fn_def_list": [
        {
          "fn_code": "cmsINLINE void MeasureTimeStart(void)\n{    \n#if defined(HAVE_TIMESPEC_GET)\n    timespec_get(&start, TIME_UTC);\n#else\n    clock_gettime(CLOCK_MONOTONIC, &start);\n#endif\n}",
          "fn_code_pos": [
            [
              55,
              0
            ],
            [
              62,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "MeasureTimeStart",
            "parameters": {},
            "return_type": "cmsINLINE"
          }
        },
        {
          "fn_code": "cmsINLINE double MeasureTimeStop(void)\n{\n    double elapsed;\n\n#if defined(HAVE_TIMESPEC_GET)\n    timespec_get(&finish, TIME_UTC);\n#else\n    clock_gettime(CLOCK_MONOTONIC, &finish);\n#endif\n\n    elapsed = ((double) finish.tv_sec - start.tv_sec);\n    elapsed += ((double) finish.tv_nsec - start.tv_nsec) / 1000000000.0;\n    return elapsed;\n}",
          "fn_code_pos": [
            [
              64,
              0
            ],
            [
              77,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "MeasureTimeStop",
            "parameters": {},
            "return_type": "cmsINLINE"
          }
        },
        {
          "fn_code": "static \nvoid trace(const char* frm, ...)\n{\n    va_list args;\n\n    va_start(args, frm);\n    vfprintf(stderr, frm, args);\n    fflush(stderr);\n    va_end(args);\n}",
          "fn_code_pos": [
            [
              82,
              0
            ],
            [
              91,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "trace",
            "parameters": {
              "frm": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid FatalErrorQuit(cmsContext ContextID, cmsUInt32Number ErrorCode, const char *Text)\n{\n       UNUSED_PARAMETER(ContextID);\n       UNUSED_PARAMETER(ErrorCode);\n\n       trace(\"** Fatal error: %s\\n\", Text);\n       exit(1);\n}",
          "fn_code_pos": [
            [
              95,
              0
            ],
            [
              103,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "FatalErrorQuit",
            "parameters": {
              "ContextID": "cmsContext",
              "ErrorCode": "cmsUInt32Number",
              "Text": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid Fail(const char* frm, ...)\n{\n       char ReasonToFailBuffer[1024];\n       va_list args;\n\n       va_start(args, frm);\n       vsprintf(ReasonToFailBuffer, frm, args);\n       FatalErrorQuit(0, 0, ReasonToFailBuffer);\n\n      // unreachable va_end(args);\n}",
          "fn_code_pos": [
            [
              106,
              0
            ],
            [
              117,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Fail",
            "parameters": {
              "frm": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsHPROFILE CreateCurves(void)\n{\n       cmsToneCurve* Gamma = cmsBuildGamma(0, 1.1);\n       cmsToneCurve* Transfer[3];\n       cmsHPROFILE h;\n\n       Transfer[0] = Transfer[1] = Transfer[2] = Gamma;\n       h = cmsCreateLinearizationDeviceLink(cmsSigRgbData, Transfer);\n\n       cmsFreeToneCurve(Gamma);\n\n       return h;\n}",
          "fn_code_pos": [
            [
              121,
              0
            ],
            [
              134,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CreateCurves",
            "parameters": {},
            "return_type": "cmsHPROFILE"
          }
        },
        {
          "fn_code": "static\nvoid CheckChangeFormat(void)\n{\n    cmsHPROFILE hsRGB, hLab;\n    cmsHTRANSFORM xform;\n    cmsUInt8Number rgb8[3]  = { 10, 120, 40 };\n    cmsUInt16Number rgb16[3] = { 10* 257, 120*257, 40*257 };\n    cmsUInt16Number lab16_1[3], lab16_2[3];\n\n    trace(\"Checking change format feature...\");\n\n    hsRGB = cmsCreate_sRGBProfile();\n    hLab = cmsCreateLab4Profile(NULL);\n\n    xform = cmsCreateTransform(hsRGB, TYPE_RGB_16, hLab, TYPE_Lab_16, INTENT_PERCEPTUAL, FLAGS);\n\n    cmsCloseProfile(hsRGB);\n    cmsCloseProfile(hLab);\n\n    cmsDoTransform(xform, rgb16, lab16_1, 1);\n\n    cmsChangeBuffersFormat(xform, TYPE_RGB_8, TYPE_Lab_16);\n\n    cmsDoTransform(xform, rgb8, lab16_2, 1);\n    cmsDeleteTransform(xform);\n\n    if (memcmp(lab16_1, lab16_2, sizeof(lab16_1)) != 0)\n        Fail(\"Change format failed!\");\n\n    trace(\"Ok\\n\");\n\n}",
          "fn_code_pos": [
            [
              144,
              0
            ],
            [
              175,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckChangeFormat",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid TryAllValues8bits(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{\n    cmsContext Raw = cmsCreateContext(NULL, NULL);\n    cmsContext Plugin = cmsCreateContext(cmsThreadedExtensions(CMS_THREADED_GUESS_MAX_THREADS, 0), NULL);\n\n    Scanline_rgba8bits* bufferIn;\n    Scanline_rgba8bits* bufferRawOut;\n    Scanline_rgba8bits* bufferPluginOut;\n    int r, g, b;\n\n    int j;\n    cmsUInt32Number npixels = 256 * 256 * 256;\n\n    cmsHTRANSFORM xformRaw = cmsCreateTransformTHR(Raw, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, Intent, FLAGS|cmsFLAGS_NOCACHE | cmsFLAGS_COPY_ALPHA);\n    cmsHTRANSFORM xformPlugin = cmsCreateTransformTHR(Plugin, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, Intent, FLAGS|cmsFLAGS_NOCACHE | cmsFLAGS_COPY_ALPHA);\n\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    if (xformRaw == NULL || xformPlugin == NULL) {\n\n        Fail(\"NULL transforms on check float conversions\");\n    }\n\n    // Again, no checking on mem alloc because this is just a test\n    bufferIn = (Scanline_rgba8bits*)malloc(npixels * sizeof(Scanline_rgba8bits));\n    bufferRawOut = (Scanline_rgba8bits*)malloc(npixels * sizeof(Scanline_rgba8bits));\n    bufferPluginOut = (Scanline_rgba8bits*)malloc(npixels * sizeof(Scanline_rgba8bits));\n\n    // Same input to both transforms\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                bufferIn[j].r = (cmsUInt8Number) r;\n                bufferIn[j].g = (cmsUInt8Number) g;\n                bufferIn[j].b = (cmsUInt8Number) b;\n                bufferIn[j].a = 0xff;\n\n                j++;\n            }\n\n    // Different transforms, different output buffers\n    cmsDoTransform(xformRaw, bufferIn, bufferRawOut, npixels);\n    cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, npixels);\n\n    // Lets compare results\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                if (bufferRawOut[j].r != bufferPluginOut[j].r ||\n                    bufferRawOut[j].g != bufferPluginOut[j].g ||\n                    bufferRawOut[j].b != bufferPluginOut[j].b ||\n                    bufferRawOut[j].a != bufferPluginOut[j].a)\n                    Fail(\n                        \"Conversion failed at [%x %x %x %x] (%x %x %x %x) != (%x %x %x %x)\",\n                        bufferIn[j].r, bufferIn[j].g, bufferIn[j].b, bufferIn[j].a,\n                        bufferRawOut[j].r, bufferRawOut[j].g, bufferRawOut[j].b, bufferRawOut[j].a,\n                        bufferPluginOut[j].r, bufferPluginOut[j].g, bufferPluginOut[j].b, bufferPluginOut[j].a);\n\n                j++;\n            }\n\n    free(bufferIn); free(bufferRawOut);\n    free(bufferPluginOut);\n\n    cmsDeleteTransform(xformRaw);\n    cmsDeleteTransform(xformPlugin);\n\n    cmsDeleteContext(Plugin);\n    cmsDeleteContext(Raw);\n}",
          "fn_code_pos": [
            [
              178,
              0
            ],
            [
              253,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValues8bits",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckAccuracy8Bits(void)\n{\n    \n    trace(\"Checking accuracy of 8 bits CLUT...\");\n    TryAllValues8bits(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"OK\\n\");\n}",
          "fn_code_pos": [
            [
              255,
              0
            ],
            [
              262,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckAccuracy8Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid TryAllValues16bits(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{\n    cmsContext Raw = cmsCreateContext(NULL, NULL);\n    cmsContext Plugin = cmsCreateContext(cmsThreadedExtensions(CMS_THREADED_GUESS_MAX_THREADS, 0), NULL);\n\n    Scanline_rgba16bits* bufferIn;\n    Scanline_rgba16bits* bufferRawOut;\n    Scanline_rgba16bits* bufferPluginOut;\n    int r, g, b;\n\n    int j;\n    cmsUInt32Number npixels = 256 * 256 * 256;\n\n    cmsHTRANSFORM xformRaw = cmsCreateTransformTHR(Raw, hlcmsProfileIn, TYPE_RGBA_16, hlcmsProfileOut, TYPE_RGBA_16, Intent, FLAGS|cmsFLAGS_NOCACHE | cmsFLAGS_COPY_ALPHA);\n    cmsHTRANSFORM xformPlugin = cmsCreateTransformTHR(Plugin, hlcmsProfileIn, TYPE_RGBA_16, hlcmsProfileOut, TYPE_RGBA_16, Intent, FLAGS|cmsFLAGS_NOCACHE | cmsFLAGS_COPY_ALPHA);\n\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    if (xformRaw == NULL || xformPlugin == NULL) {\n\n        Fail(\"NULL transforms on check float conversions\");\n    }\n\n    // Again, no checking on mem alloc because this is just a test\n    bufferIn = (Scanline_rgba16bits*)malloc(npixels * sizeof(Scanline_rgba16bits));\n    bufferRawOut = (Scanline_rgba16bits*)malloc(npixels * sizeof(Scanline_rgba16bits));\n    bufferPluginOut = (Scanline_rgba16bits*)malloc(npixels * sizeof(Scanline_rgba16bits));\n\n    // Same input to both transforms\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                bufferIn[j].r = FROM_8_TO_16(r);\n                bufferIn[j].g = FROM_8_TO_16(g);\n                bufferIn[j].b = FROM_8_TO_16(b);\n                bufferIn[j].a = 0xffff;\n\n                j++;\n            }\n\n    // Different transforms, different output buffers\n    cmsDoTransform(xformRaw, bufferIn, bufferRawOut, npixels);\n    cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, npixels);\n\n    // Lets compare results\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                if (bufferRawOut[j].r != bufferPluginOut[j].r ||\n                    bufferRawOut[j].g != bufferPluginOut[j].g ||\n                    bufferRawOut[j].b != bufferPluginOut[j].b ||\n                    bufferRawOut[j].a != bufferPluginOut[j].a)\n                    Fail(\n                        \"Conversion failed at [%x %x %x %x] (%x %x %x %x) != (%x %x %x %x)\",\n                        bufferIn[j].r, bufferIn[j].g, bufferIn[j].b, bufferIn[j].a,\n                        bufferRawOut[j].r, bufferRawOut[j].g, bufferRawOut[j].b, bufferRawOut[j].a,\n                        bufferPluginOut[j].r, bufferPluginOut[j].g, bufferPluginOut[j].b, bufferPluginOut[j].a);\n\n                j++;\n            }\n\n    free(bufferIn); free(bufferRawOut);\n    free(bufferPluginOut);\n\n    cmsDeleteTransform(xformRaw);\n    cmsDeleteTransform(xformPlugin);\n\n    cmsDeleteContext(Plugin);\n    cmsDeleteContext(Raw);\n}",
          "fn_code_pos": [
            [
              266,
              0
            ],
            [
              341,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValues16bits",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckAccuracy16Bits(void)\n{\n    // CLUT should be as 16 bits or better\n    trace(\"Checking accuracy of 16 bits CLUT...\");\n    TryAllValues16bits(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"OK\\n\");\n}",
          "fn_code_pos": [
            [
              343,
              0
            ],
            [
              350,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckAccuracy16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static \ncmsFloat64Number MPixSec(cmsFloat64Number seconds)\n{       \n       return (256.0 * 256.0 * 256.0) / (1024.0*1024.0*seconds);\n}",
          "fn_code_pos": [
            [
              358,
              0
            ],
            [
              362,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "MPixSec",
            "parameters": {
              "seconds": "cmsFloat64Number"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid PerformanceHeader(void)\n{\n       trace(\"                                  MPixel/sec.   MByte/sec.\\n\");\n}",
          "fn_code_pos": [
            [
              367,
              0
            ],
            [
              371,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "PerformanceHeader",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsHPROFILE loadProfile(const char* name)\n{\n    if (*name == '*')\n    {\n        if (strcmp(name, \"*lab\") == 0)\n        {\n            return cmsCreateLab4Profile(NULL);\n        }\n        else\n            if (strcmp(name, \"*xyz\") == 0)\n            {\n                return cmsCreateXYZProfile();\n            }\n            else\n                if (strcmp(name, \"*curves\") == 0)\n                {\n                    return CreateCurves();\n                }\n                else\n                    Fail(\"Unknown builtin '%s'\", name);\n\n    }\n\n    return cmsOpenProfileFromFile(name, \"r\");\n}",
          "fn_code_pos": [
            [
              374,
              0
            ],
            [
              399,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "loadProfile",
            "parameters": {
              "name": "char"
            },
            "return_type": "cmsHPROFILE"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number Performance(const char* Title, perf_fn fn, cmsContext ct, const char* inICC, const char* outICC, size_t sz, cmsFloat64Number prev)\n{\n    cmsHPROFILE hlcmsProfileIn = loadProfile(inICC);\n    cmsHPROFILE hlcmsProfileOut = loadProfile(outICC);\n\n    cmsFloat64Number n = fn(ct, hlcmsProfileIn, hlcmsProfileOut);\n\n    trace(\"%-30s: \", Title); fflush(stdout);\n    trace(\"%-12.2f %-12.2f\", n, n * sz);\n\n    if (prev > 0.0) {\n\n        cmsFloat64Number imp = n / prev;\n        if (imp > 1)\n            trace(\" (x %-2.1f)\", imp);\n    }\n\n    trace(\"\\n\"); fflush(stdout);\n    return n;\n}",
          "fn_code_pos": [
            [
              402,
              0
            ],
            [
              422,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Performance",
            "parameters": {
              "Title": "char",
              "fn": "perf_fn",
              "ct": "cmsContext",
              "inICC": "char",
              "outICC": "char",
              "sz": "size_t",
              "prev": "cmsFloat64Number"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid ComparativeCt(cmsContext ct1, cmsContext ct2, const char* Title, perf_fn fn1, perf_fn fn2, const char* inICC, const char* outICC)\n{\n    cmsHPROFILE hlcmsProfileIn;\n    cmsHPROFILE hlcmsProfileOut;\n\n    if (inICC == NULL)\n        hlcmsProfileIn = CreateCurves();\n    else\n        hlcmsProfileIn = cmsOpenProfileFromFile(inICC, \"r\");\n\n    if (outICC == NULL)\n        hlcmsProfileOut = CreateCurves();\n    else\n        hlcmsProfileOut = cmsOpenProfileFromFile(outICC, \"r\");\n\n\n    cmsFloat64Number n1 = fn1(ct1, hlcmsProfileIn, hlcmsProfileOut);\n\n    if (inICC == NULL)\n        hlcmsProfileIn = CreateCurves();\n    else\n        hlcmsProfileIn = cmsOpenProfileFromFile(inICC, \"r\");\n\n    if (outICC == NULL)\n        hlcmsProfileOut = CreateCurves();\n    else\n        hlcmsProfileOut = cmsOpenProfileFromFile(outICC, \"r\");\n\n    cmsFloat64Number n2 = fn2(ct2, hlcmsProfileIn, hlcmsProfileOut);\n\n\n    trace(\"%-30s: \", Title); fflush(stdout);\n    trace(\"%-12.2f %-12.2f\\n\", n1, n2);\n}",
          "fn_code_pos": [
            [
              425,
              0
            ],
            [
              459,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ComparativeCt",
            "parameters": {
              "ct1": "cmsContext",
              "ct2": "cmsContext",
              "Title": "char",
              "fn1": "perf_fn",
              "fn2": "perf_fn",
              "inICC": "char",
              "outICC": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid Comparative(const char* Title, perf_fn fn1, perf_fn fn2, const char* inICC, const char* outICC)\n{\n       ComparativeCt(0, 0, Title, fn1, fn2, inICC, outICC);\n}",
          "fn_code_pos": [
            [
              461,
              0
            ],
            [
              465,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Comparative",
            "parameters": {
              "Title": "char",
              "fn1": "perf_fn",
              "fn2": "perf_fn",
              "inICC": "char",
              "outICC": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitsRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number r, g, b, j;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_rgb8bits* In;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGB_8, hlcmsProfileOut, TYPE_RGB_8, INTENT_PERCEPTUAL, FLAGS|cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_rgb8bits);\n    In = (Scanline_rgb8bits*)malloc(Mb);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In[j].r = (cmsUInt8Number)r;\n                In[j].g = (cmsUInt8Number)g;\n                In[j].b = (cmsUInt8Number)b;\n\n                j++;\n            }\n\n    MeasureTimeStart();\n\n    cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n    diff = MeasureTimeStop();\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n\n    return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              468,
              0
            ],
            [
              509,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitsRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitsRGBA(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number r, g, b, j;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_rgba8bits* In;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, INTENT_PERCEPTUAL, FLAGS|cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_rgba8bits);\n    In = (Scanline_rgba8bits*)malloc(Mb);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In[j].r = (cmsUInt8Number)r;\n                In[j].g = (cmsUInt8Number)g;\n                In[j].b = (cmsUInt8Number)b;\n                In[j].a = 0;\n\n                j++;\n            }\n\n    MeasureTimeStart();\n\n    cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n    diff = MeasureTimeStop();\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n    return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              511,
              0
            ],
            [
              553,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitsRGBA",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest16bitsRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number r, g, b, j;    \n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_rgb16bits *In;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGB_16, hlcmsProfileOut, TYPE_RGB_16, INTENT_PERCEPTUAL, FLAGS | cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_rgb16bits);\n    In = (Scanline_rgb16bits*)malloc(Mb);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In[j].r = (cmsUInt16Number)FROM_8_TO_16(r);\n                In[j].g = (cmsUInt16Number)FROM_8_TO_16(g);\n                In[j].b = (cmsUInt16Number)FROM_8_TO_16(b);\n\n                j++;\n            }\n\n    MeasureTimeStart();\n\n    cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n    diff = MeasureTimeStop();\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n\n    return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              557,
              0
            ],
            [
              598,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest16bitsRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest16bitsCMYK(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n\n    cmsInt32Number r, g, b, j;    \n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_cmyk16bits* In;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_CMYK_16, hlcmsProfileOut, TYPE_CMYK_16, INTENT_PERCEPTUAL, FLAGS | cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_cmyk16bits);\n    In = (Scanline_cmyk16bits*)malloc(Mb);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In[j].c = (cmsUInt16Number)r;\n                In[j].m = (cmsUInt16Number)g;\n                In[j].y = (cmsUInt16Number)b;\n                In[j].k = (cmsUInt16Number)r;\n\n                j++;\n            }\n\n    MeasureTimeStart();\n\n    cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n    diff = MeasureTimeStop();\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n    return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              600,
              0
            ],
            [
              642,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest16bitsCMYK",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid SpeedTest8(void)\n{\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n    cmsFloat64Number t[10];\n\n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S   8 B I T S  (D E F A U L T)\\n\");\n    trace(\"==============================================================\\n\\n\");\n    fflush(stdout);\n\n    PerformanceHeader();\n    t[0] = Performance(\"8 bits on CLUT profiles  \", SpeedTest8bitsRGB, noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgb8bits), 0);\n    t[1] = Performance(\"8 bits on Matrix-Shaper  \", SpeedTest8bitsRGB, noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), 0);\n    t[2] = Performance(\"8 bits on same MatrixSh  \", SpeedTest8bitsRGB, noPlugin, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), 0);\n    t[3] = Performance(\"8 bits on curves         \", SpeedTest8bitsRGB, noPlugin, \"*curves\",   \"*curves\",   sizeof(Scanline_rgb8bits), 0);\n\n    // Note that context 0 has the plug-in installed\n\n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S  8 B I T S  (P L U G I N)\\n\");\n    trace(\"===========================================================\\n\\n\");\n    fflush(stdout);\n\n    PerformanceHeader();\n    Performance(\"8 bits on CLUT profiles  \", SpeedTest8bitsRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgb8bits), t[0]);\n    Performance(\"8 bits on Matrix-Shaper  \", SpeedTest8bitsRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), t[1]);\n    Performance(\"8 bits on same MatrixSh  \", SpeedTest8bitsRGB, 0, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), t[2]);\n    Performance(\"8 bits on curves         \", SpeedTest8bitsRGB, 0, \"*curves\",   \"*curves\",   sizeof(Scanline_rgb8bits), t[3]);\n\n    cmsDeleteContext(noPlugin);\n}",
          "fn_code_pos": [
            [
              645,
              0
            ],
            [
              677,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid SpeedTest16(void)\n{\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n    cmsFloat64Number t[10];\n\n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S   1 6  B I T S  (D E F A U L T)\\n\");\n    trace(\"=================================================================\\n\\n\");\n    \n    PerformanceHeader();\n    t[0] = Performance(\"16 bits on CLUT profiles         \", SpeedTest16bitsRGB,  noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\",  sizeof(Scanline_rgb16bits), 0);\n    t[1] = Performance(\"16 bits on Matrix-Shaper profiles\", SpeedTest16bitsRGB,  noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\",  sizeof(Scanline_rgb16bits), 0);\n    t[2] = Performance(\"16 bits on same Matrix-Shaper    \", SpeedTest16bitsRGB,  noPlugin, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\",  sizeof(Scanline_rgb16bits), 0);\n    t[3] = Performance(\"16 bits on curves                \", SpeedTest16bitsRGB,  noPlugin, \"*curves\",                \"*curves\",                 sizeof(Scanline_rgb16bits), 0);\n    t[4] = Performance(\"16 bits on CMYK CLUT profiles    \", SpeedTest16bitsCMYK, noPlugin, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\",  sizeof(Scanline_cmyk16bits), 0);\n    \n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S   1 6  B I T S  (P L U G I N)\\n\");\n    trace(\"===============================================================\\n\\n\");\n\n    PerformanceHeader();\n    Performance(\"16 bits on CLUT profiles         \", SpeedTest16bitsRGB,  0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgb16bits), t[0]);\n    Performance(\"16 bits on Matrix-Shaper profiles\", SpeedTest16bitsRGB,  0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb16bits), t[1]);\n    Performance(\"16 bits on same Matrix-Shaper    \", SpeedTest16bitsRGB,  0, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb16bits), t[2]);\n    Performance(\"16 bits on curves                \", SpeedTest16bitsRGB,  0, \"*curves\",                \"*curves\",                sizeof(Scanline_rgb16bits), t[3]);\n    Performance(\"16 bits on CMYK CLUT profiles    \", SpeedTest16bitsCMYK, 0, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\", sizeof(Scanline_cmyk16bits), t[4]);\n\n    cmsDeleteContext(noPlugin);\n}",
          "fn_code_pos": [
            [
              679,
              0
            ],
            [
              709,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitDoTransform(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number r, g, b, j;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    big_bitmap* In;\n    big_bitmap* Out;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, INTENT_PERCEPTUAL, FLAGS | cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n\n    // Our test bitmap is 256 x 256 padded lines\n    Mb = sizeof(big_bitmap);\n\n    In = (big_bitmap*)malloc(Mb);\n    Out = (big_bitmap*)malloc(Mb);\n\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In->line[r].pixels[g][b].r = (cmsUInt8Number)r;\n                In->line[r].pixels[g][b].g = (cmsUInt8Number)g;\n                In->line[r].pixels[g][b].b = (cmsUInt8Number)b;\n                In->line[r].pixels[g][b].a = 0;\n            }\n\n    MeasureTimeStart();\n\n    for (j = 0; j < 256; j++) {\n\n        cmsDoTransform(hlcmsxform, In->line[j].pixels, Out->line[j].pixels, 256 * 256);\n    }\n\n    diff = MeasureTimeStop();\n    free(In); free(Out);\n\n    cmsDeleteTransform(hlcmsxform);\n    return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              727,
              0
            ],
            [
              774,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitDoTransform",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitLineStride(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number r, g, b;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    big_bitmap* In;\n    big_bitmap* Out;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, INTENT_PERCEPTUAL, FLAGS | cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n\n    // Our test bitmap is 256 x 256 padded lines\n    Mb = sizeof(big_bitmap);\n\n    In = (big_bitmap*)malloc(Mb);\n    Out = (big_bitmap*)malloc(Mb);\n\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In->line[r].pixels[g][b].r = (cmsUInt8Number)r;\n                In->line[r].pixels[g][b].g = (cmsUInt8Number)g;\n                In->line[r].pixels[g][b].b = (cmsUInt8Number)b;\n                In->line[r].pixels[g][b].a = 0;\n            }\n\n    MeasureTimeStart();\n\n    cmsDoTransformLineStride(hlcmsxform, In, Out, 256 * 256, 256, sizeof(padded_line), sizeof(padded_line), 0, 0);\n\n    diff = MeasureTimeStop();\n    free(In); free(Out);\n\n    cmsDeleteTransform(hlcmsxform);\n    return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              777,
              0
            ],
            [
              821,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitLineStride",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid ComparativeLineStride8bits(void)\n{\n       cmsContext NoPlugin, Plugin;\n\n       trace(\"\\n\\n\");\n       trace(\"C O M P A R A T I V E cmsDoTransform() vs. cmsDoTransformLineStride()\\n\");\n       trace(\"                              values given in MegaPixels per second.\\n\");\n       trace(\"====================================================================\\n\");\n\n       fflush(stdout);\n\n       NoPlugin = cmsCreateContext(NULL, NULL);\n       Plugin = cmsCreateContext(cmsThreadedExtensions(CMS_THREADED_GUESS_MAX_THREADS, 0), NULL);\n\n       ComparativeCt(NoPlugin, Plugin, \"CLUT profiles  \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"CLUT 16 bits   \", SpeedTest16bitsRGB,       SpeedTest16bitsRGB,      PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"Matrix-Shaper  \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"same MatrixSh  \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"curves         \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, NULL, NULL);\n\n       cmsDeleteContext(Plugin);\n       cmsDeleteContext(NoPlugin);\n}",
          "fn_code_pos": [
            [
              823,
              0
            ],
            [
              846,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ComparativeLineStride8bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main()\n{\n#ifdef _MSC_VER\n    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);\n#endif\n\n    trace(\"Multithreaded extensions testbed - 1.1\\n\");\n    trace(\"Copyright (c) 1998-2024 Marti Maria Saguer, all rights reserved\\n\");\n\n    trace(\"\\nInstalling error logger ... \");\n    cmsSetLogErrorHandler(FatalErrorQuit);\n    trace(\"done.\\n\");\n\n    trace(\"Installing plug-in ... \");\n    cmsPlugin(cmsThreadedExtensions(CMS_THREADED_GUESS_MAX_THREADS, 0));\n    trace(\"done.\\n\\n\");\n\n    // Change format\n    CheckChangeFormat();\n\n    // Accuracy\n    CheckAccuracy8Bits();\n    CheckAccuracy16Bits();\n\n    // Check speed\n    SpeedTest8();\n    SpeedTest16();\n    ComparativeLineStride8bits();\n\n    cmsUnregisterPlugins();\n\n    trace(\"\\nAll tests passed OK\\n\");\n    return 0;\n}",
          "fn_code_pos": [
            [
              851,
              0
            ],
            [
              884,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "(*perf_fn)(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)",
          "fn_dec_pos": [
            [
              364,
              24
            ],
            [
              364,
              106
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [
        [
          "typedef struct { cmsUInt8Number  r, g, b;    }  Scanline_rgb8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgb8bits",
          [
            45,
            0
          ],
          [
            45,
            66
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  r, g, b, a; }  Scanline_rgba8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgba8bits",
          [
            46,
            0
          ],
          [
            46,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  c, m, y, k; }  Scanline_cmyk8bits;",
          {
            "c": "cmsUInt8Number"
          },
          "Scanline_cmyk8bits",
          [
            47,
            0
          ],
          [
            47,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b;    }  Scanline_rgb16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgb16bits",
          [
            48,
            0
          ],
          [
            48,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_rgba16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgba16bits",
          [
            49,
            0
          ],
          [
            49,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number c, m, y, k; }  Scanline_cmyk16bits;",
          {
            "c": "cmsUInt16Number"
          },
          "Scanline_cmyk16bits",
          [
            50,
            0
          ],
          [
            50,
            68
          ]
        ],
        [
          "typedef struct\n{\n    Scanline_rgba8bits pixels[256][256];\n    cmsUInt8Number     padding[4];\n\n} padded_line;",
          {
            "pixels[256][256]": "Scanline_rgba8bits",
            "padding[4]": "cmsUInt8Number"
          },
          "padded_line",
          [
            713,
            0
          ],
          [
            718,
            14
          ]
        ],
        [
          "typedef struct\n{\n    padded_line line[256];\n\n} big_bitmap;",
          {
            "line[256]": "padded_line"
          },
          "big_bitmap",
          [
            720,
            0
          ],
          [
            724,
            13
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  r, g, b;    }  Scanline_rgb8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgb8bits",
          [
            45,
            0
          ],
          [
            45,
            66
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  r, g, b, a; }  Scanline_rgba8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgba8bits",
          [
            46,
            0
          ],
          [
            46,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  c, m, y, k; }  Scanline_cmyk8bits;",
          {
            "c": "cmsUInt8Number"
          },
          "Scanline_cmyk8bits",
          [
            47,
            0
          ],
          [
            47,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b;    }  Scanline_rgb16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgb16bits",
          [
            48,
            0
          ],
          [
            48,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_rgba16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgba16bits",
          [
            49,
            0
          ],
          [
            49,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number c, m, y, k; }  Scanline_cmyk16bits;",
          {
            "c": "cmsUInt16Number"
          },
          "Scanline_cmyk16bits",
          [
            50,
            0
          ],
          [
            50,
            68
          ]
        ],
        [
          "struct timespec",
          {},
          "",
          [
            53,
            7
          ],
          [
            53,
            22
          ]
        ],
        [
          "typedef struct\n{\n    Scanline_rgba8bits pixels[256][256];\n    cmsUInt8Number     padding[4];\n\n} padded_line;",
          {
            "pixels[256][256]": "Scanline_rgba8bits",
            "padding[4]": "cmsUInt8Number"
          },
          "padded_line",
          [
            713,
            0
          ],
          [
            718,
            14
          ]
        ],
        [
          "typedef struct\n{\n    padded_line line[256];\n\n} big_bitmap;",
          {
            "line[256]": "padded_line"
          },
          "big_bitmap",
          [
            720,
            0
          ],
          [
            724,
            13
          ]
        ]
      ],
      "include_list": [
        [
          "#include \"threaded_internal.h\"\n",
          [
            20,
            0
          ],
          [
            21,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            22,
            0
          ],
          [
            23,
            0
          ]
        ],
        [
          "#include <memory.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <time.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#    include \"crtdbg.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/lcms/plugins/fast_float/testbed/fast_float_testbed.c": {
      "fn_def_list": [
        {
          "fn_code": "static \nvoid trace(const char* frm, ...)\n{\n    va_list args;\n\n    va_start(args, frm);\n    vfprintf(stderr, frm, args);\n    fflush(stderr);\n    va_end(args);\n}",
          "fn_code_pos": [
            [
              59,
              0
            ],
            [
              68,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "trace",
            "parameters": {
              "frm": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid FatalErrorQuit(cmsContext ContextID, cmsUInt32Number ErrorCode, const char *Text)\n{\n       UNUSED_PARAMETER(ContextID);\n       UNUSED_PARAMETER(ErrorCode);\n\n       trace(\"** Fatal error: %s\\n\", Text);\n       exit(1);\n}",
          "fn_code_pos": [
            [
              72,
              0
            ],
            [
              80,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "FatalErrorQuit",
            "parameters": {
              "ContextID": "cmsContext",
              "ErrorCode": "cmsUInt32Number",
              "Text": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid Fail(const char* frm, ...)\n{\n       char ReasonToFailBuffer[1024];\n       va_list args;\n\n       va_start(args, frm);\n       vsprintf(ReasonToFailBuffer, frm, args);\n       FatalErrorQuit(0, 0, ReasonToFailBuffer);\n\n      // unreachable va_end(args);\n}",
          "fn_code_pos": [
            [
              83,
              0
            ],
            [
              94,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Fail",
            "parameters": {
              "frm": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsHPROFILE CreateCurves(void)\n{\n       cmsToneCurve* Gamma = cmsBuildGamma(0, 1.1);\n       cmsToneCurve* Transfer[3];\n       cmsHPROFILE h;\n\n       Transfer[0] = Transfer[1] = Transfer[2] = Gamma;\n       h = cmsCreateLinearizationDeviceLink(cmsSigRgbData, Transfer);\n\n       cmsFreeToneCurve(Gamma);\n\n       return h;\n}",
          "fn_code_pos": [
            [
              98,
              0
            ],
            [
              111,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CreateCurves",
            "parameters": {},
            "return_type": "cmsHPROFILE"
          }
        },
        {
          "fn_code": "static\nvoid CheckSingleFormatter15(cmsContext id, cmsUInt32Number Type, const char* Text)\n{\n       cmsUInt16Number Values[cmsMAXCHANNELS];\n       cmsUInt8Number Buffer[1024];\n       cmsFormatter f, b;\n       cmsInt32Number i, j, nChannels, bytes;\n       _xform_head info;\n\n       UNUSED_PARAMETER(id);\n\n       memset(&info, 0, sizeof(info));\n       info.OutputFormat = info.InputFormat = Type;\n\n       // Get functions to go forth and back\n       f = Formatter_15Bit_Factory(Type, cmsFormatterInput, CMS_PACK_FLAGS_16BITS);\n       b = Formatter_15Bit_Factory(Type, cmsFormatterOutput, CMS_PACK_FLAGS_16BITS);\n\n       if (f.Fmt16 == NULL || b.Fmt16 == NULL) {\n\n              Fail(\"no formatter for %s\", Text);\n              return;\n       }\n\n       nChannels = T_CHANNELS(Type);\n       bytes = T_BYTES(Type);\n\n       for (j = 0; j < 5; j++) {\n\n              for (i = 0; i < nChannels; i++) {\n\n                     Values[i] = (cmsUInt16Number)(i + j) << 1;\n              }\n\n              b.Fmt16((struct _cmstransform_struct*) &info, Values, Buffer, 1);\n              memset(Values, 0, sizeof(Values));\n              f.Fmt16((struct _cmstransform_struct*) &info, Values, Buffer, 1);\n\n              for (i = 0; i < nChannels; i++) {\n\n                     if (Values[i] != ((i + j) << 1)) {\n\n                            Fail(\"%s failed\", Text);\n                            return;\n                     }\n              }\n       }\n}",
          "fn_code_pos": [
            [
              115,
              0
            ],
            [
              162,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckSingleFormatter15",
            "parameters": {
              "id": "cmsContext",
              "Type": "cmsUInt32Number",
              "Text": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckFormatters15(void)\n{\n       C(TYPE_GRAY_15);\n       C(TYPE_GRAY_15_REV);\n       C(TYPE_GRAY_15_SE);\n       C(TYPE_GRAYA_15);\n       C(TYPE_GRAYA_15_SE);\n       C(TYPE_GRAYA_15_PLANAR);\n       C(TYPE_RGB_15);\n       C(TYPE_RGB_15_PLANAR);\n       C(TYPE_RGB_15_SE);\n       C(TYPE_BGR_15);\n       C(TYPE_BGR_15_PLANAR);\n       C(TYPE_BGR_15_SE);\n       C(TYPE_RGBA_15);\n       C(TYPE_RGBA_15_PLANAR);\n       C(TYPE_RGBA_15_SE);\n       C(TYPE_ARGB_15);\n       C(TYPE_ABGR_15);\n       C(TYPE_ABGR_15_PLANAR);\n       C(TYPE_ABGR_15_SE);\n       C(TYPE_BGRA_15);\n       C(TYPE_BGRA_15_SE);\n       C(TYPE_YMC_15);\n       C(TYPE_CMY_15);\n       C(TYPE_CMY_15_PLANAR);\n       C(TYPE_CMY_15_SE);\n       C(TYPE_CMYK_15);\n       C(TYPE_CMYK_15_REV);\n       C(TYPE_CMYK_15_PLANAR);\n       C(TYPE_CMYK_15_SE);\n       C(TYPE_KYMC_15);\n       C(TYPE_KYMC_15_SE);\n       C(TYPE_KCMY_15);\n       C(TYPE_KCMY_15_REV);\n       C(TYPE_KCMY_15_SE);\n}",
          "fn_code_pos": [
            [
              167,
              0
            ],
            [
              204,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckFormatters15",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsInt32Number checkSingleComputeIncrements(cmsUInt32Number Format, cmsUInt32Number planeStride, cmsUInt32Number ExpectedChannels, cmsUInt32Number ExpectedAlpha, ...)\n{\n       cmsUInt32Number nChannels, nAlpha, nTotal, i, rc = 0 ;\n       cmsUInt32Number ComponentStartingOrder[cmsMAXCHANNELS], ComponentPointerIncrements[cmsMAXCHANNELS];\n       va_list args;\n\n  \n       va_start(args, ExpectedAlpha);\n\n       _cmsComputeComponentIncrements(Format, planeStride, &nChannels, &nAlpha, ComponentStartingOrder, ComponentPointerIncrements);\n\n       if (nChannels != ExpectedChannels)\n              return 0;\n\n       if (nAlpha != ExpectedAlpha)\n              return 0;\n\n       nTotal = nAlpha + nChannels;\n     \n       for (i = 0; i < nTotal; i++)\n       {\n              cmsUInt32Number so = va_arg(args, cmsUInt32Number);\n              if (so != ComponentStartingOrder[i])\n                     goto Error;                     \n       }\n\n       for (i = 0; i < nTotal; i++)\n       {\n              cmsUInt32Number so = va_arg(args, cmsUInt32Number);\n              if (so != ComponentPointerIncrements[i])\n                     goto Error;\n       }\n\n       // Success\n       rc = 1;\n\nError:\n       va_end(args);\n\n       return rc;\n}",
          "fn_code_pos": [
            [
              208,
              0
            ],
            [
              249,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "checkSingleComputeIncrements",
            "parameters": {
              "Format": "cmsUInt32Number",
              "planeStride": "cmsUInt32Number",
              "ExpectedChannels": "cmsUInt32Number",
              "ExpectedAlpha": "cmsUInt32Number"
            },
            "return_type": "cmsInt32Number"
          }
        },
        {
          "fn_code": "cmsInt32Number CheckComputeIncrements(void)\n{      \n       CHECK(TYPE_GRAY_8,    0, 1, 0, /**/ 0,    /**/ 1);\n       CHECK(TYPE_GRAYA_8,   0, 1, 1, /**/ 0, 1, /**/ 2, 2);\n       CHECK(TYPE_AGRAY_8,   0, 1, 1, /**/ 1, 0, /**/ 2, 2);\n       CHECK(TYPE_GRAY_16,   0, 1, 0, /**/ 0,    /**/ 2);\n       CHECK(TYPE_GRAYA_16,  0, 1, 1, /**/ 0, 2, /**/ 4, 4);\n       CHECK(TYPE_AGRAY_16,  0, 1, 1, /**/ 2, 0, /**/ 4, 4);\n\n       CHECK(TYPE_GRAY_FLT,  0, 1, 0, /**/ 0,    /**/ 4);\n       CHECK(TYPE_GRAYA_FLT, 0, 1, 1, /**/ 0, 4, /**/ 8, 8);\n       CHECK(TYPE_AGRAY_FLT, 0, 1, 1, /**/ 4, 0, /**/ 8, 8);\n\n       CHECK(TYPE_GRAY_DBL,  0, 1, 0, /**/ 0,      /**/ 8);\n       CHECK(TYPE_AGRAY_DBL, 0, 1, 1, /**/ 8, 0,   /**/ 16, 16);\n\n       CHECK(TYPE_RGB_8,    0, 3, 0, /**/ 0, 1, 2,     /**/ 3, 3, 3);\n       CHECK(TYPE_RGBA_8,   0, 3, 1, /**/ 0, 1, 2, 3,  /**/ 4, 4, 4, 4);\n       CHECK(TYPE_ARGB_8,   0, 3, 1, /**/ 1, 2, 3, 0,  /**/ 4, 4, 4, 4);\n\n       CHECK(TYPE_RGB_16,  0, 3, 0, /**/ 0, 2, 4,     /**/ 6, 6, 6);\n       CHECK(TYPE_RGBA_16, 0, 3, 1, /**/ 0, 2, 4, 6,  /**/ 8, 8, 8, 8);\n       CHECK(TYPE_ARGB_16, 0, 3, 1, /**/ 2, 4, 6, 0,  /**/ 8, 8, 8, 8);\n\n       CHECK(TYPE_RGB_FLT,  0, 3, 0, /**/ 0, 4, 8,     /**/ 12, 12, 12);\n       CHECK(TYPE_RGBA_FLT, 0, 3, 1, /**/ 0, 4, 8, 12,  /**/ 16, 16, 16, 16);\n       CHECK(TYPE_ARGB_FLT, 0, 3, 1, /**/ 4, 8, 12, 0,  /**/ 16, 16, 16, 16);\n\n       CHECK(TYPE_BGR_8,  0, 3, 0, /**/ 2, 1, 0,     /**/ 3, 3, 3);\n       CHECK(TYPE_BGRA_8, 0, 3, 1, /**/ 2, 1, 0, 3,  /**/ 4, 4, 4, 4);\n       CHECK(TYPE_ABGR_8, 0, 3, 1, /**/ 3, 2, 1, 0,  /**/ 4, 4, 4, 4);\n\n       CHECK(TYPE_BGR_16,  0, 3, 0, /**/ 4, 2, 0,     /**/ 6, 6, 6);\n       CHECK(TYPE_BGRA_16, 0, 3, 1, /**/ 4, 2, 0, 6,  /**/ 8, 8, 8, 8);\n       CHECK(TYPE_ABGR_16, 0, 3, 1, /**/ 6, 4, 2, 0,  /**/ 8, 8, 8, 8);\n\n       CHECK(TYPE_BGR_FLT, 0, 3, 0,  /**/ 8, 4, 0,     /**/  12, 12, 12);\n       CHECK(TYPE_BGRA_FLT, 0, 3, 1, /**/ 8, 4, 0, 12,  /**/ 16, 16, 16, 16);\n       CHECK(TYPE_ABGR_FLT, 0, 3, 1, /**/ 12, 8, 4, 0,  /**/ 16, 16, 16, 16);\n\n\n       CHECK(TYPE_CMYK_8,  0, 4, 0, /**/ 0, 1, 2, 3,     /**/ 4, 4, 4, 4);\n       CHECK(TYPE_CMYKA_8, 0, 4, 1, /**/ 0, 1, 2, 3, 4,  /**/ 5, 5, 5, 5, 5);\n       CHECK(TYPE_ACMYK_8, 0, 4, 1, /**/ 1, 2, 3, 4, 0,  /**/ 5, 5, 5, 5, 5);\n\n       CHECK(TYPE_KYMC_8,  0, 4, 0, /**/ 3, 2, 1, 0,     /**/ 4, 4, 4, 4);\n       CHECK(TYPE_KYMCA_8, 0, 4, 1, /**/ 3, 2, 1, 0, 4,  /**/ 5, 5, 5, 5, 5);\n       CHECK(TYPE_AKYMC_8, 0, 4, 1, /**/ 4, 3, 2, 1, 0,  /**/ 5, 5, 5, 5, 5);\n\n       CHECK(TYPE_KCMY_8,  0, 4, 0, /**/ 1, 2, 3, 0,      /**/ 4, 4, 4, 4);\n       \n       CHECK(TYPE_CMYK_16, 0, 4, 0, /**/ 0, 2, 4, 6,      /**/ 8, 8, 8, 8);\n       CHECK(TYPE_CMYKA_16, 0, 4, 1, /**/ 0, 2, 4, 6, 8,  /**/ 10, 10, 10, 10, 10);\n       CHECK(TYPE_ACMYK_16, 0, 4, 1, /**/ 2, 4, 6, 8, 0,  /**/ 10, 10, 10, 10, 10);\n\n       CHECK(TYPE_KYMC_16, 0, 4, 0,  /**/ 6, 4, 2, 0,     /**/ 8, 8, 8, 8);\n       CHECK(TYPE_KYMCA_16, 0, 4, 1, /**/ 6, 4, 2, 0, 8,  /**/ 10, 10, 10, 10, 10);\n       CHECK(TYPE_AKYMC_16, 0, 4, 1, /**/ 8, 6, 4, 2, 0,  /**/ 10, 10, 10, 10, 10);\n\n       CHECK(TYPE_KCMY_16, 0, 4, 0, /**/ 2, 4, 6, 0,      /**/ 8, 8, 8, 8);\n\n       // Planar\n\n       CHECK(TYPE_GRAYA_8_PLANAR, 100, 1, 1, /**/ 0, 100,  /**/ 1, 1);\n       CHECK(TYPE_AGRAY_8_PLANAR, 100, 1, 1, /**/ 100, 0,  /**/ 1, 1);\n\n       CHECK(TYPE_GRAYA_16_PLANAR, 100, 1, 1, /**/ 0, 100,   /**/ 2, 2);\n       CHECK(TYPE_AGRAY_16_PLANAR, 100, 1, 1, /**/ 100, 0,   /**/ 2, 2);\n\n       CHECK(TYPE_GRAYA_FLT_PLANAR, 100, 1, 1, /**/ 0, 100,   /**/ 4, 4);\n       CHECK(TYPE_AGRAY_FLT_PLANAR, 100, 1, 1, /**/ 100, 0,   /**/ 4, 4);\n\n       CHECK(TYPE_GRAYA_DBL_PLANAR, 100, 1, 1, /**/ 0, 100,   /**/ 8, 8);\n       CHECK(TYPE_AGRAY_DBL_PLANAR, 100, 1, 1, /**/ 100, 0,   /**/ 8, 8);\n\n       CHECK(TYPE_RGB_8_PLANAR,  100, 3, 0, /**/ 0, 100, 200,      /**/ 1, 1, 1);\n       CHECK(TYPE_RGBA_8_PLANAR, 100, 3, 1, /**/ 0, 100, 200, 300, /**/ 1, 1, 1, 1);\n       CHECK(TYPE_ARGB_8_PLANAR, 100, 3, 1, /**/ 100, 200, 300, 0,  /**/ 1, 1, 1, 1);\n\n       CHECK(TYPE_BGR_8_PLANAR,  100, 3, 0, /**/ 200, 100, 0,       /**/ 1, 1, 1);\n       CHECK(TYPE_BGRA_8_PLANAR, 100, 3, 1, /**/ 200, 100, 0, 300,  /**/ 1, 1, 1, 1);\n       CHECK(TYPE_ABGR_8_PLANAR, 100, 3, 1, /**/ 300, 200, 100, 0,  /**/ 1, 1, 1, 1);\n\n       CHECK(TYPE_RGB_16_PLANAR, 100, 3, 0, /**/ 0, 100, 200,      /**/ 2, 2, 2);\n       CHECK(TYPE_RGBA_16_PLANAR, 100, 3, 1, /**/ 0, 100, 200, 300, /**/ 2, 2, 2, 2);\n       CHECK(TYPE_ARGB_16_PLANAR, 100, 3, 1, /**/ 100, 200, 300, 0,  /**/ 2, 2, 2, 2);\n\n       CHECK(TYPE_BGR_16_PLANAR, 100, 3, 0, /**/ 200, 100, 0,       /**/ 2, 2, 2);\n       CHECK(TYPE_BGRA_16_PLANAR, 100, 3, 1, /**/ 200, 100, 0, 300,  /**/ 2, 2, 2, 2);\n       CHECK(TYPE_ABGR_16_PLANAR, 100, 3, 1, /**/ 300, 200, 100, 0,  /**/ 2, 2, 2, 2);\n\n       return 1;\n}",
          "fn_code_pos": [
            [
              256,
              0
            ],
            [
              348,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckComputeIncrements",
            "parameters": {},
            "return_type": "cmsInt32Number"
          }
        },
        {
          "fn_code": "static\ncmsBool Valid15(cmsUInt16Number a, cmsUInt8Number b)\n{\n       return abs(FROM_15_TO_8(a) - b) <= 2;\n}",
          "fn_code_pos": [
            [
              353,
              0
            ],
            [
              357,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Valid15",
            "parameters": {
              "a": "cmsUInt16Number",
              "b": "cmsUInt8Number"
            },
            "return_type": "cmsBool"
          }
        },
        {
          "fn_code": "static\nvoid Check15bitMacros(void)\n{\n       int i;\n\n       trace(\"Checking 15 bit <=> 8 bit macros...\");\n\n       for (i = 0; i < 256; i++)\n       {\n              cmsUInt16Number n = FROM_8_TO_15(i);\n              cmsUInt8Number m = FROM_15_TO_8(n);\n\n              if (m != i)\n                     Fail(\"Failed on %d (->%d->%d)\", i, n, m);\n       }\n       trace(\"ok\\n\");\n}",
          "fn_code_pos": [
            [
              360,
              0
            ],
            [
              376,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Check15bitMacros",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static \nvoid TryAllValues15(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{\n       Scanline_rgb8bits* buffer8in;\n       Scanline_rgb15bits* buffer15in;\n       Scanline_rgb8bits* buffer8out;\n       Scanline_rgb15bits* buffer15out;\n       int r, g, b, j;\n       cmsUInt32Number npixels = 256 * 256 * 256;  // All RGB cube in 8 bits\n\n       cmsHTRANSFORM xform15 = cmsCreateTransformTHR(0, hlcmsProfileIn, TYPE_RGB_15, hlcmsProfileOut, TYPE_RGB_15, Intent, cmsFLAGS_NOCACHE);\n       cmsHTRANSFORM xform8 = cmsCreateTransformTHR(0, hlcmsProfileIn, TYPE_RGB_8, hlcmsProfileOut, TYPE_RGB_8, Intent, cmsFLAGS_NOCACHE);       // Transforms already created\n       \n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       if (xform15 == NULL || xform8 == NULL) {\n\n              Fail(\"NULL transforms on check for 15 bit conversions\");\n       }\n\n       // Since this is just a test, I will not check memory allocation...\n       buffer8in = (Scanline_rgb8bits*)malloc(npixels * sizeof(Scanline_rgb8bits));\n       buffer15in = (Scanline_rgb15bits*)malloc(npixels * sizeof(Scanline_rgb15bits));\n       buffer8out = (Scanline_rgb8bits*)malloc(npixels * sizeof(Scanline_rgb8bits));\n       buffer15out = (Scanline_rgb15bits*)malloc(npixels * sizeof(Scanline_rgb15bits));\n\n       // Fill input values for 8 and 15 bits\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              buffer8in[j].r = (cmsUInt8Number)r;\n              buffer8in[j].g = (cmsUInt8Number)g;\n              buffer8in[j].b = (cmsUInt8Number)b;\n\n              buffer15in[j].r = FROM_8_TO_15(r);\n              buffer15in[j].g = FROM_8_TO_15(g);\n              buffer15in[j].b = FROM_8_TO_15(b);\n\n              j++;\n       }\n       \n       cmsDoTransform(xform15, buffer15in, buffer15out, npixels);\n       cmsDoTransform(xform8,  buffer8in, buffer8out,  npixels);\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              // Check the results\n              if (!Valid15(buffer15out[j].r, buffer8out[j].r) ||\n                  !Valid15(buffer15out[j].g, buffer8out[j].g) ||\n                  !Valid15(buffer15out[j].b, buffer8out[j].b))\n                  Fail(\"Conversion failed at (%d %d %d) != (%d %d %d)\", buffer8out[j].r, buffer8out[j].g, buffer8out[j].b,\n                  FROM_15_TO_8(buffer15out[j].r), FROM_15_TO_8(buffer15out[j].g), FROM_15_TO_8(buffer15out[j].b));\n\n              j++;\n       }\n\n       free(buffer8in); free(buffer15in);\n       free(buffer8out); free(buffer15out);\n       cmsDeleteTransform(xform15);\n       cmsDeleteTransform(xform8);   \n}",
          "fn_code_pos": [
            [
              381,
              0
            ],
            [
              447,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValues15",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid Check15bitsConversions(void)\n{\n       Check15bitMacros();\n\n       trace(\"Checking accuracy of 15 bits on CLUT...\");\n       TryAllValues15(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\"), INTENT_PERCEPTUAL);\n       trace(\"Ok\\n\");\n\n       trace(\"Checking accuracy of 15 bits on same profile ...\");\n       TryAllValues15(cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL);\n       trace(\"Ok\\n\");\n\n       trace(\"Checking accuracy of 15 bits on Matrix...\");\n       TryAllValues15(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL);\n       trace(\"Ok\\n\");\n\n       trace(\"All 15 bits tests passed OK\\n\\n\");\n}",
          "fn_code_pos": [
            [
              450,
              0
            ],
            [
              468,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Check15bitsConversions",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid TryAllValues16bits(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{\n    cmsContext Raw = cmsCreateContext(NULL, NULL);\n    cmsContext Plugin = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n\n    Scanline_rgba16bits* bufferIn;\n    Scanline_rgba16bits* bufferRawOut;\n    Scanline_rgba16bits* bufferPluginOut;\n    int r, g, b;\n\n    int j;\n    cmsUInt32Number npixels = 256 * 256 * 256;\n\n    cmsHTRANSFORM xformRaw = cmsCreateTransformTHR(Raw, hlcmsProfileIn, TYPE_RGBA_16, hlcmsProfileOut, TYPE_RGBA_16, Intent, cmsFLAGS_NOCACHE| cmsFLAGS_COPY_ALPHA);\n    cmsHTRANSFORM xformPlugin = cmsCreateTransformTHR(Plugin, hlcmsProfileIn, TYPE_RGBA_16, hlcmsProfileOut, TYPE_RGBA_16, Intent, cmsFLAGS_NOCACHE| cmsFLAGS_COPY_ALPHA);\n\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    if (xformRaw == NULL || xformPlugin == NULL) {\n\n        Fail(\"NULL transforms on check float conversions\");\n    }\n\n    // Again, no checking on mem alloc because this is just a test\n    bufferIn = (Scanline_rgba16bits*)malloc(npixels * sizeof(Scanline_rgba16bits));\n    bufferRawOut = (Scanline_rgba16bits*)malloc(npixels * sizeof(Scanline_rgba16bits));\n    bufferPluginOut = (Scanline_rgba16bits*)malloc(npixels * sizeof(Scanline_rgba16bits));\n\n    // Same input to both transforms\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                bufferIn[j].r = FROM_8_TO_16(0xf8);\n                bufferIn[j].g = FROM_8_TO_16(0xf8);\n                bufferIn[j].b = FROM_8_TO_16(0xf8);\n                bufferIn[j].a = 0xffff;\n\n                j++;\n            }\n\n    // Different transforms, different output buffers\n    cmsDoTransform(xformRaw, bufferIn, bufferRawOut, npixels);\n    cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, npixels);\n\n    // Lets compare results\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                if (bufferRawOut[j].r != bufferPluginOut[j].r ||\n                    bufferRawOut[j].g != bufferPluginOut[j].g ||\n                    bufferRawOut[j].b != bufferPluginOut[j].b ||\n                    bufferRawOut[j].a != bufferPluginOut[j].a)\n                    Fail(\n                    \"Conversion failed at [%x %x %x %x] (%x %x %x %x) != (%x %x %x %x)\", \n                        bufferIn[j].r, bufferIn[j].g, bufferIn[j].b, bufferIn[j].a,\n                        bufferRawOut[j].r, bufferRawOut[j].g, bufferRawOut[j].b, bufferRawOut[j].a,\n                        bufferPluginOut[j].r, bufferPluginOut[j].g, bufferPluginOut[j].b, bufferPluginOut[j].a);\n\n                j++;\n            }\n\n    free(bufferIn); free(bufferRawOut);\n    free(bufferPluginOut);\n\n    cmsDeleteTransform(xformRaw);\n    cmsDeleteTransform(xformPlugin);\n\n    cmsDeleteContext(Plugin);\n    cmsDeleteContext(Raw);\n}",
          "fn_code_pos": [
            [
              471,
              0
            ],
            [
              546,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValues16bits",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckAccuracy16Bits(void)\n{\n    // CLUT should be as 16 bits or better\n    trace(\"Checking accuracy of 16 bits CLUT...\");\n    TryAllValues16bits(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"All 16 bits tests passed OK\\n\\n\");\n}",
          "fn_code_pos": [
            [
              548,
              0
            ],
            [
              555,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckAccuracy16Bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckUncommonValues(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{   \n    union\n    {\n        cmsFloat32Number subnormal;\n        cmsUInt32Number Int;\n\n    } sub_pos, sub_neg;\n\n    Scanline_rgbFloat* bufferIn;\n    Scanline_rgbFloat* bufferPluginOut;\n\n    cmsUInt32Number i, npixels = 100;\n\n    cmsContext Plugin = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n\n    cmsHTRANSFORM xformPlugin = cmsCreateTransformTHR(Plugin, hlcmsProfileIn, TYPE_RGB_FLT, hlcmsProfileOut, TYPE_RGB_FLT, Intent, 0);\n\n  \n    sub_pos.Int = 0x00000002;\n    sub_neg.Int = 0x80000002;\n\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    if (xformPlugin == NULL) {\n\n        Fail(\"NULL transform on check uncommon values\");\n    }\n\n\n    bufferIn = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n    bufferPluginOut = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n\n    for (i = 0; i < npixels; i++)\n    {\n        bufferIn[i].r = i / 40.0f - 0.5f;\n        bufferIn[i].g = i / 20.0f - 0.5f;\n        bufferIn[i].b = i / 60.0f - 0.5f;\n    }\n\n    cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, npixels);\n\n\n    bufferIn[0].r = NAN;\n    bufferIn[0].g = NAN;\n    bufferIn[0].b = NAN;\n\n    bufferIn[1].r = INFINITY;\n    bufferIn[1].g = INFINITY;\n    bufferIn[1].b = INFINITY;\n\n    bufferIn[2].r = sub_pos.subnormal;\n    bufferIn[2].g = sub_pos.subnormal;\n    bufferIn[2].b = sub_pos.subnormal;\n\n    bufferIn[3].r = sub_neg.subnormal;\n    bufferIn[3].g = sub_neg.subnormal;\n    bufferIn[3].b = sub_neg.subnormal;\n\n    cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, 4);\n\n    free(bufferIn); \n    free(bufferPluginOut);\n\n    cmsDeleteTransform(xformPlugin);\n\n    cmsDeleteContext(Plugin);    \n}",
          "fn_code_pos": [
            [
              559,
              0
            ],
            [
              628,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckUncommonValues",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid lab8toLab(cmsUInt8Number lab8[3], cmsCIELab* Lab)\n{\n    cmsUInt16Number lab16[3];\n\n    lab16[0] = FROM_8_TO_16(lab8[0]);\n    lab16[1] = FROM_8_TO_16(lab8[1]);\n    lab16[2] = FROM_8_TO_16(lab8[2]);\n\n    cmsLabEncoded2Float(Lab, lab16);\n}",
          "fn_code_pos": [
            [
              631,
              0
            ],
            [
              641,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "lab8toLab",
            "parameters": {
              "lab8": "cmsUInt8Number",
              "Lab": "cmsCIELab"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckToEncodedLab(void)\n{\n    cmsContext Plugin = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n    cmsContext Raw = cmsCreateContext(NULL, NULL);\n\n    cmsHPROFILE hsRGB = cmsCreate_sRGBProfile();\n    cmsHPROFILE hLab = cmsCreateLab4Profile(NULL);\n\n    cmsHTRANSFORM xform_plugin = cmsCreateTransformTHR(Plugin, hsRGB, TYPE_RGB_8, hLab, TYPE_Lab_8, INTENT_PERCEPTUAL, 0);\n    cmsHTRANSFORM xform = cmsCreateTransformTHR(Raw, hsRGB, TYPE_RGB_8, hLab, TYPE_Lab_8, INTENT_PERCEPTUAL, 0);\n\n    int r, g, b;\n    cmsCIELab Lab1, Lab2;\n    cmsUInt8Number rgb[3], lab1[3], lab2[3];    \n    double err;\n\n    for (r=0; r < 256; r += 5)\n        for (g = 0; g < 256; g += 5)\n            for (b = 0; b < 256; b += 5)\n            {\n                rgb[0] = (cmsUInt8Number) r; rgb[1] = (cmsUInt8Number) g; rgb[2] = (cmsUInt8Number) b;\n\n                cmsDoTransform(xform_plugin, rgb, lab1, 1);\n                cmsDoTransform(xform, rgb, lab2, 1);\n                \n                lab8toLab(lab1, &Lab1);\n                lab8toLab(lab2, &Lab2);\n                \n                err = cmsDeltaE(&Lab1, &Lab2);\n                if (err > 0.1)\n                {\n                    trace(\"Error on lab encoded (%f, %f, %f) <> (% f, % f, % f)\\n\",\n                        Lab1.L, Lab1.a, Lab1.b, Lab2.L, Lab2.a, Lab2.b);                   \n                }\n            }\n\n\n    cmsDeleteTransform(xform); cmsDeleteTransform(xform_plugin);\n    cmsCloseProfile(hsRGB); cmsCloseProfile(hLab);\n    cmsDeleteContext(Raw);\n    cmsDeleteContext(Plugin);\n\n}",
          "fn_code_pos": [
            [
              643,
              0
            ],
            [
              686,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckToEncodedLab",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckToFloatLab(void)\n{\n    cmsContext Plugin = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n    cmsContext Raw = cmsCreateContext(NULL, NULL);\n\n    cmsHPROFILE hsRGB = cmsCreate_sRGBProfile();\n    cmsHPROFILE hLab = cmsCreateLab4Profile(NULL);\n\n    cmsHTRANSFORM xform_plugin = cmsCreateTransformTHR(Plugin, hsRGB, TYPE_RGB_8, hLab, TYPE_Lab_DBL, INTENT_PERCEPTUAL, 0);\n    cmsHTRANSFORM xform = cmsCreateTransformTHR(Raw, hsRGB, TYPE_RGB_8, hLab, TYPE_Lab_DBL, INTENT_PERCEPTUAL, 0);\n\n    int r, g, b;\n    cmsCIELab Lab1, Lab2;\n    cmsUInt8Number rgb[3];\n    double err;\n\n    for (r = 0; r < 256; r += 10)\n        for (g = 0; g < 256; g += 10)\n            for (b = 0; b < 256; b += 10)\n            {\n                rgb[0] = (cmsUInt8Number)r; rgb[1] = (cmsUInt8Number)g; rgb[2] = (cmsUInt8Number)b;\n\n                cmsDoTransform(xform_plugin, rgb, &Lab1, 1);\n                cmsDoTransform(xform, rgb, &Lab2, 1);\n                \n                err = cmsDeltaE(&Lab1, &Lab2);\n                if (err > 0.1)\n                {\n                    trace(\"Error on lab encoded (%f, %f, %f) <> (% f, % f, % f)\\n\",\n                        Lab1.L, Lab1.a, Lab1.b, Lab2.L, Lab2.a, Lab2.b);\n                }\n            }\n\n\n    cmsDeleteTransform(xform); cmsDeleteTransform(xform_plugin);\n    cmsCloseProfile(hsRGB); cmsCloseProfile(hLab);\n    cmsDeleteContext(Raw);\n    cmsDeleteContext(Plugin);\n\n}",
          "fn_code_pos": [
            [
              689,
              0
            ],
            [
              729,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckToFloatLab",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckFloatToFloatLab(void)\n{\n    cmsContext Plugin = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n    cmsContext Raw = cmsCreateContext(NULL, NULL);\n\n    cmsHPROFILE hsRGB = cmsCreate_sRGBProfile();\n    cmsHPROFILE hLab = cmsCreateLab4Profile(NULL);\n\n    cmsHTRANSFORM xform_plugin = cmsCreateTransformTHR(Plugin, hsRGB, TYPE_RGB_FLT, hLab, TYPE_Lab_FLT, INTENT_PERCEPTUAL, 0);\n    cmsHTRANSFORM xform = cmsCreateTransformTHR(Raw, hsRGB, TYPE_RGB_FLT, hLab, TYPE_Lab_FLT, INTENT_PERCEPTUAL, 0);\n\n    int r, g, b;\n    cmsCIELab Lab1, Lab2;\n    cmsFloat32Number rgb[3];\n    cmsFloat32Number Lab[3];\n    double err;\n\n\n    for (r = 0; r < 256; r += 10)\n        for (g = 0; g < 256; g += 10)\n            for (b = 0; b < 256; b += 10)\n            {\n                rgb[0] = (cmsFloat32Number)r / 255.0f;\n                rgb[1] = (cmsFloat32Number)g / 255.0f;\n                rgb[2] = (cmsFloat32Number)b / 255.0f;\n\n                cmsDoTransform(xform_plugin, rgb, Lab, 1);\n                Lab1.L = Lab[0]; Lab1.a = Lab[1]; Lab1.b = Lab[2];\n                cmsDoTransform(xform, rgb, Lab, 1);\n                Lab2.L = Lab[0]; Lab2.a = Lab[1]; Lab2.b = Lab[2];\n\n                err = cmsDeltaE(&Lab1, &Lab2);\n                if (err > 0.5)\n                {\n                    trace(\"Error on lab encoded (%f, %f, %f) <> (% f, % f, % f)\\n\",\n                        Lab1.L, Lab1.a, Lab1.b, Lab2.L, Lab2.a, Lab2.b);\n                }\n            }\n\n\n    cmsDeleteTransform(xform); cmsDeleteTransform(xform_plugin);\n    cmsCloseProfile(hsRGB); cmsCloseProfile(hLab);\n    cmsDeleteContext(Raw);\n    cmsDeleteContext(Plugin);\n\n}",
          "fn_code_pos": [
            [
              733,
              0
            ],
            [
              779,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckFloatToFloatLab",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsBool ValidFloat(cmsFloat32Number a, cmsFloat32Number b)\n{\n       return fabsf(a-b) < EPSILON_FLOAT_TESTS;\n}",
          "fn_code_pos": [
            [
              786,
              0
            ],
            [
              790,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ValidFloat",
            "parameters": {
              "a": "cmsFloat32Number",
              "b": "cmsFloat32Number"
            },
            "return_type": "cmsBool"
          }
        },
        {
          "fn_code": "static\nvoid TryAllValuesFloat(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{\n       cmsContext Raw     = cmsCreateContext(NULL, NULL);\n       cmsContext Plugin  = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n\n       Scanline_rgbFloat* bufferIn;\n       Scanline_rgbFloat* bufferRawOut;\n       Scanline_rgbFloat* bufferPluginOut;\n       int r, g, b;\n       \n       int j;\n       cmsUInt32Number npixels = 256 * 256 * 256;\n\n       cmsHTRANSFORM xformRaw = cmsCreateTransformTHR(Raw, hlcmsProfileIn, TYPE_RGB_FLT, hlcmsProfileOut, TYPE_RGB_FLT, Intent, cmsFLAGS_NOCACHE);\n       cmsHTRANSFORM xformPlugin = cmsCreateTransformTHR(Plugin, hlcmsProfileIn, TYPE_RGB_FLT, hlcmsProfileOut, TYPE_RGB_FLT, Intent, cmsFLAGS_NOCACHE);\n\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       if (xformRaw == NULL || xformPlugin == NULL) {\n\n              Fail(\"NULL transforms on check float conversions\");\n       }\n\n       // Again, no checking on mem alloc because this is just a test\n       bufferIn = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n       bufferRawOut = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n       bufferPluginOut = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n\n       // Same input to both transforms\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              bufferIn[j].r = (cmsFloat32Number)r / 255.0f;\n              bufferIn[j].g = (cmsFloat32Number)g / 255.0f;\n              bufferIn[j].b = (cmsFloat32Number)b / 255.0f;\n              \n              j++;\n              }\n       \n       // Different transforms, different output buffers\n       cmsDoTransform(xformRaw,    bufferIn, bufferRawOut, npixels);\n       cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, npixels);\n\n       // Lets compare results\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              if (!ValidFloat(bufferRawOut[j].r, bufferPluginOut[j].r) ||\n                     !ValidFloat(bufferRawOut[j].g, bufferPluginOut[j].g) ||\n                     !ValidFloat(bufferRawOut[j].b, bufferPluginOut[j].b))\n                     Fail(\"Conversion failed at (%f %f %f) != (%f %f %f)\", bufferRawOut[j].r, bufferRawOut[j].g, bufferRawOut[j].b,\n                     bufferPluginOut[j].r, bufferPluginOut[j].g, bufferPluginOut[j].b);\n\n              j++;\n              }\n\n       free(bufferIn); free(bufferRawOut);\n       free(bufferPluginOut);\n\n       cmsDeleteTransform(xformRaw);\n       cmsDeleteTransform(xformPlugin);\n\n       cmsDeleteContext(Plugin);\n       cmsDeleteContext(Raw);\n}",
          "fn_code_pos": [
            [
              795,
              0
            ],
            [
              865,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValuesFloat",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid TryAllValuesFloatAlpha(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent, cmsBool copyAlpha)\n{\n       cmsContext Raw     = cmsCreateContext(NULL, NULL);\n       cmsContext Plugin  = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n\n       Scanline_rgbaFloat* bufferIn;\n       Scanline_rgbaFloat* bufferRawOut;\n       Scanline_rgbaFloat* bufferPluginOut;\n       int r, g, b;\n       \n       int j;\n       cmsUInt32Number npixels = 256 * 256 * 256;\n\n       cmsUInt32Number flags = cmsFLAGS_NOCACHE | ( copyAlpha? cmsFLAGS_COPY_ALPHA : 0);\n\n       cmsHTRANSFORM xformRaw = cmsCreateTransformTHR(Raw, hlcmsProfileIn, TYPE_RGBA_FLT, hlcmsProfileOut, TYPE_RGBA_FLT, Intent, flags);\n       cmsHTRANSFORM xformPlugin = cmsCreateTransformTHR(Plugin, hlcmsProfileIn, TYPE_RGBA_FLT, hlcmsProfileOut, TYPE_RGBA_FLT, Intent, flags);\n\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       if (xformRaw == NULL || xformPlugin == NULL) {\n\n              Fail(\"NULL transforms on check float conversions\");\n       }\n\n       // Again, no checking on mem alloc because this is just a test\n       bufferIn = (Scanline_rgbaFloat*)malloc(npixels * sizeof(Scanline_rgbaFloat));\n       bufferRawOut = (Scanline_rgbaFloat*)malloc(npixels * sizeof(Scanline_rgbaFloat));\n       bufferPluginOut = (Scanline_rgbaFloat*)malloc(npixels * sizeof(Scanline_rgbaFloat));\n\n       memset(bufferRawOut, 0, npixels * sizeof(Scanline_rgbaFloat));\n       memset(bufferPluginOut, 0, npixels * sizeof(Scanline_rgbaFloat));\n\n       // Same input to both transforms\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              bufferIn[j].r = (cmsFloat32Number)r / 255.0f;\n              bufferIn[j].g = (cmsFloat32Number)g / 255.0f;\n              bufferIn[j].b = (cmsFloat32Number)b / 255.0f;\n              bufferIn[j].a = (cmsFloat32Number) 1.0f;\n              \n              j++;\n              }\n       \n       // Different transforms, different output buffers\n       cmsDoTransform(xformRaw,    bufferIn, bufferRawOut, npixels);\n       cmsDoTransform(xformPlugin, bufferIn, bufferPluginOut, npixels);\n\n       // Lets compare results\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              if (!ValidFloat(bufferRawOut[j].r, bufferPluginOut[j].r) ||\n                  !ValidFloat(bufferRawOut[j].g, bufferPluginOut[j].g) ||\n                  !ValidFloat(bufferRawOut[j].b, bufferPluginOut[j].b) ||\n                  !ValidFloat(bufferRawOut[j].a, bufferPluginOut[j].a))\n                    Fail(\"Conversion failed at (%f %f %f %f) != (%f %f %f %f)\", bufferRawOut[j].r, bufferRawOut[j].g, bufferRawOut[j].b, bufferRawOut[j].a,\n                     bufferPluginOut[j].r, bufferPluginOut[j].g, bufferPluginOut[j].b, bufferPluginOut[j].a);\n\n              j++;\n              }\n\n       free(bufferIn); free(bufferRawOut);\n       free(bufferPluginOut);\n\n       cmsDeleteTransform(xformRaw);\n       cmsDeleteTransform(xformPlugin);\n\n       cmsDeleteContext(Plugin);\n       cmsDeleteContext(Raw);\n}",
          "fn_code_pos": [
            [
              867,
              0
            ],
            [
              944,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValuesFloatAlpha",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number",
              "copyAlpha": "cmsBool"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsBool Valid16Float(cmsUInt16Number a, cmsFloat32Number b)\n{\n       return fabs(((cmsFloat32Number)a / (cmsFloat32Number) 0xFFFF) - b) < EPSILON_FLOAT_TESTS;\n}",
          "fn_code_pos": [
            [
              950,
              0
            ],
            [
              954,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Valid16Float",
            "parameters": {
              "a": "cmsUInt16Number",
              "b": "cmsFloat32Number"
            },
            "return_type": "cmsBool"
          }
        },
        {
          "fn_code": "static\nvoid TryAllValuesFloatVs16(cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut, cmsInt32Number Intent)\n{          \n       Scanline_rgbFloat* bufferIn;\n       Scanline_rgb16bits* bufferIn16;\n\n       Scanline_rgbFloat* bufferFloatOut;\n       Scanline_rgb16bits* buffer16Out;\n       int r, g, b;\n\n       int j;\n       cmsUInt32Number npixels = 256 * 256 * 256;\n\n       cmsHTRANSFORM xformRaw = cmsCreateTransform(hlcmsProfileIn, TYPE_RGB_16, hlcmsProfileOut, TYPE_RGB_16, Intent, cmsFLAGS_NOCACHE);\n       cmsHTRANSFORM xformPlugin = cmsCreateTransform(hlcmsProfileIn, TYPE_RGB_FLT, hlcmsProfileOut, TYPE_RGB_FLT, Intent, cmsFLAGS_NOCACHE);\n\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       if (xformRaw == NULL || xformPlugin == NULL) {\n\n              Fail(\"NULL transforms on check float vs 16 conversions\");\n       }\n\n       // Again, no checking on mem alloc because this is just a test\n       bufferIn = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n       bufferIn16 = (Scanline_rgb16bits*)malloc(npixels * sizeof(Scanline_rgb16bits));\n       bufferFloatOut = (Scanline_rgbFloat*)malloc(npixels * sizeof(Scanline_rgbFloat));\n       buffer16Out = (Scanline_rgb16bits*)malloc(npixels * sizeof(Scanline_rgb16bits));\n\n\n       // Fill two equivalent input buffers\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              bufferIn[j].r = (cmsFloat32Number)r / 255.0f;\n              bufferIn[j].g = (cmsFloat32Number)g / 255.0f;\n              bufferIn[j].b = (cmsFloat32Number)b / 255.0f;\n\n              bufferIn16[j].r = FROM_8_TO_16(r);\n              bufferIn16[j].g = FROM_8_TO_16(g);\n              bufferIn16[j].b = FROM_8_TO_16(b);\n\n              j++;\n       }\n\n       // Convert \n       cmsDoTransform(xformRaw, bufferIn16, buffer16Out, npixels);\n       cmsDoTransform(xformPlugin, bufferIn, bufferFloatOut, npixels);\n\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              // Check for same values\n              if (!Valid16Float(buffer16Out[j].r, bufferFloatOut[j].r) ||\n                     !Valid16Float(buffer16Out[j].g, bufferFloatOut[j].g) ||\n                     !Valid16Float(buffer16Out[j].b, bufferFloatOut[j].b))\n                     Fail(\"Conversion failed at (%f %f %f) != (%f %f %f)\", buffer16Out[j].r / 65535.0, buffer16Out[j].g / 65535.0, buffer16Out[j].b / 65535.0,\n                     bufferFloatOut[j].r, bufferFloatOut[j].g, bufferFloatOut[j].b);\n\n              j++;\n       }\n\n       free(bufferIn16); free(buffer16Out);\n       free(bufferIn); free(bufferFloatOut);\n       cmsDeleteTransform(xformRaw);\n       cmsDeleteTransform(xformPlugin);\n}",
          "fn_code_pos": [
            [
              957,
              0
            ],
            [
              1029,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TryAllValuesFloatVs16",
            "parameters": {
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE",
              "Intent": "cmsInt32Number"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckChangeFormat(void)\n{\n    cmsHPROFILE hsRGB, hLab;\n    cmsHTRANSFORM xform;\n    cmsUInt8Number rgb8[3]  = { 10, 120, 40 };\n    cmsUInt16Number rgb16[3] = { 10* 257, 120*257, 40*257 };\n    cmsUInt16Number lab16_1[3], lab16_2[3];\n\n    trace(\"Checking change format feature...\");\n\n    hsRGB = cmsCreate_sRGBProfile();\n    hLab = cmsCreateLab4Profile(NULL);\n\n    xform = cmsCreateTransform(hsRGB, TYPE_RGB_16, hLab, TYPE_Lab_16, INTENT_PERCEPTUAL, 0);\n\n    cmsCloseProfile(hsRGB);\n    cmsCloseProfile(hLab);\n\n    cmsDoTransform(xform, rgb16, lab16_1, 1);\n\n    cmsChangeBuffersFormat(xform, TYPE_RGB_8, TYPE_Lab_16);\n\n    cmsDoTransform(xform, rgb8, lab16_2, 1);\n    cmsDeleteTransform(xform);\n\n    if (memcmp(lab16_1, lab16_2, sizeof(lab16_1)) != 0)\n        Fail(\"Change format failed!\");\n\n    trace(\"Ok\\n\");\n\n}",
          "fn_code_pos": [
            [
              1033,
              0
            ],
            [
              1064,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckChangeFormat",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsBool ValidInt(cmsUInt16Number a, cmsUInt16Number b)\n{\n    return abs(a - b) <= 32;\n}",
          "fn_code_pos": [
            [
              1066,
              0
            ],
            [
              1070,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ValidInt",
            "parameters": {
              "a": "cmsUInt16Number",
              "b": "cmsUInt16Number"
            },
            "return_type": "cmsBool"
          }
        },
        {
          "fn_code": "static\nvoid CheckLab2Roundtrip(void)\n{\n    cmsHPROFILE hsRGB, hLab;\n    cmsHTRANSFORM xform, xform2;\n    cmsInt8Number* lab;\n    cmsInt32Number Mb, j;\n    cmsInt32Number r, g, b;\n    Scanline_rgb8bits* In;\n    Scanline_rgb8bits* Out;\n\n    trace(\"Checking lab2 roundtrip...\");\n\n    hsRGB = cmsCreate_sRGBProfile();\n    hLab = cmsCreateLab2Profile(NULL);\n\n\n    xform = cmsCreateTransform(hsRGB, TYPE_RGB_8, hLab, TYPE_Lab_8, INTENT_RELATIVE_COLORIMETRIC, cmsFLAGS_NOOPTIMIZE|cmsFLAGS_BLACKPOINTCOMPENSATION);\n    xform2 = cmsCreateTransform(hLab, TYPE_Lab_8, hsRGB, TYPE_RGB_8, INTENT_RELATIVE_COLORIMETRIC, cmsFLAGS_NOOPTIMIZE | cmsFLAGS_BLACKPOINTCOMPENSATION);\n\n    cmsCloseProfile(hsRGB);\n    cmsCloseProfile(hLab);\n\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_rgb8bits);\n    In = (Scanline_rgb8bits*)malloc(Mb);\n    Out = (Scanline_rgb8bits*)malloc(Mb);\n    lab = (cmsInt8Number*)malloc(256 * 256 * 256 * 3 * sizeof(cmsInt8Number));\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++)\n            {\n\n                In[j].r = (cmsUInt8Number)r;\n                In[j].g = (cmsUInt8Number)g;\n                In[j].b = (cmsUInt8Number)b;\n                j++;\n            }\n\n\n    cmsDoTransform(xform, In, lab, 256 * 256 * 256);\n    cmsDoTransform(xform2, lab, Out, 256 * 256 * 256);\n\n    cmsDeleteTransform(xform);\n    cmsDeleteTransform(xform2);\n\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                // Check for same values\n                if (!ValidInt(In[j].r, Out[j].r) ||\n                    !ValidInt(In[j].g, Out[j].g) ||\n                    !ValidInt(In[j].b, Out[j].b))\n                    Fail(\"Conversion failed at (%d %d %d) != (%d %d %d)\", In[j].r, In[j].g, In[j].b,\n                        Out[j].r, Out[j].g, Out[j].b);\n\n                j++;\n            }\n\n\n    free(In);\n    free(Out);\n    free(lab);\n    trace(\"Ok\\n\");\n\n}",
          "fn_code_pos": [
            [
              1072,
              0
            ],
            [
              1142,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckLab2Roundtrip",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckAlphaDetect(void)\n{\n    cmsHPROFILE hsRGB;\n    cmsHTRANSFORM xform;\n\n    cmsSetLogErrorHandler(NULL);\n\n    hsRGB = cmsCreate_sRGBProfile();\n    \n    xform = cmsCreateTransform(hsRGB, TYPE_RGB_FLT, hsRGB, TYPE_RGBA_FLT, INTENT_PERCEPTUAL, cmsFLAGS_COPY_ALPHA);\n    cmsCloseProfile(hsRGB);\n\n    if (xform != NULL)\n        Fail(\"Copy alpha with mismatched channels should not succeed\");\n\n    cmsSetLogErrorHandler(FatalErrorQuit);\n}",
          "fn_code_pos": [
            [
              1144,
              0
            ],
            [
              1161,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckAlphaDetect",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckConversionFloat(void)\n{\n    trace(\"Check alpha detection.\");\n    CheckAlphaDetect();\n    trace(\"Ok\\n\");\n\n    trace(\"Crash test.\");\n    TryAllValuesFloatAlpha(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL, FALSE);\n\n    trace(\"..\");\n    TryAllValuesFloatAlpha(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL, TRUE);\n    trace(\"Ok\\n\");\n\n    trace(\"Crash (II) test.\");\n    TryAllValuesFloatAlpha(cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL, FALSE);\n    trace(\"..\");\n    TryAllValuesFloatAlpha(cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL, TRUE);\n    trace(\"Ok\\n\");\n\n    trace(\"Crash (III) test.\");\n    CheckUncommonValues(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"..\");\n    CheckUncommonValues(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"Ok\\n\");\n\n    trace(\"Checking conversion to Lab...\");\n    CheckToEncodedLab();\n    CheckToFloatLab();\n    CheckFloatToFloatLab();\n    trace(\"Ok\\n\");\n\n    // Matrix-shaper should be accurate \n    trace(\"Checking accuracy on Matrix-shaper...\");\n    TryAllValuesFloat(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"Ok\\n\");\n\n    // CLUT should be as 16 bits or better\n    trace(\"Checking accuracy of CLUT...\");\n    TryAllValuesFloatVs16(cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"Ok\\n\");\n\n    // Same profile should give same values (we test both methods)\n    trace(\"Checking accuracy on same profile ...\");\n    TryAllValuesFloatVs16(cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL);\n    TryAllValuesFloat(cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), cmsOpenProfileFromFile(PROFILES_DIR \"test0.icc\", \"r\"), INTENT_PERCEPTUAL);\n    trace(\"Ok\\n\");\n\n\n}",
          "fn_code_pos": [
            [
              1164,
              0
            ],
            [
              1213,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckConversionFloat",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsBool ValidFloat2(cmsFloat32Number a, cmsFloat32Number b)\n{\n    return fabsf(a - b) < 0.007;\n}",
          "fn_code_pos": [
            [
              1216,
              0
            ],
            [
              1220,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ValidFloat2",
            "parameters": {
              "a": "cmsFloat32Number",
              "b": "cmsFloat32Number"
            },
            "return_type": "cmsBool"
          }
        },
        {
          "fn_code": "static\ncmsFloat32Number distance(cmsFloat32Number rgb1[], cmsFloat32Number rgb2[])\n{\n    cmsFloat32Number dr = rgb2[0] - rgb1[0];\n    cmsFloat32Number dg = rgb2[1] - rgb1[1];\n    cmsFloat32Number db = rgb2[2] - rgb1[2];\n\n    return dr * dr + dg * dg + db * db;\n}",
          "fn_code_pos": [
            [
              1223,
              0
            ],
            [
              1231,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "distance",
            "parameters": {
              "rgb1": "cmsFloat32Number",
              "rgb2": "cmsFloat32Number"
            },
            "return_type": "cmsFloat32Number"
          }
        },
        {
          "fn_code": "static\nvoid CheckLab2RGB(void)\n{\n    cmsHPROFILE hLab = cmsCreateLab4Profile(NULL);\n    cmsHPROFILE hRGB = cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\");\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n    cmsHTRANSFORM hXformNoPlugin = cmsCreateTransformTHR(noPlugin, hLab, TYPE_Lab_FLT, hRGB, TYPE_RGB_FLT, INTENT_RELATIVE_COLORIMETRIC, cmsFLAGS_NOCACHE);\n    cmsHTRANSFORM hXformPlugin = cmsCreateTransformTHR(0, hLab, TYPE_Lab_FLT, hRGB, TYPE_RGB_FLT, INTENT_RELATIVE_COLORIMETRIC, cmsFLAGS_NOCACHE);\n\n    cmsFloat32Number Lab[3], RGB[3], RGB2[3];\n\n    cmsFloat32Number maxInside = 0, maxOutside = 0, L, a, b;\n\n    trace(\"Checking Lab -> RGB...\");\n    cmsCloseProfile(hLab);\n    cmsCloseProfile(hRGB);\n\n    for (L = 4; L <= 100; L++)\n    {\n        for (a = -30; a < +30; a++)\n            for (b = -30; b < +30; b++)\n            {\n                cmsFloat32Number d;\n\n                Lab[0] = L; Lab[1] = a; Lab[2] = b;\n                cmsDoTransform(hXformNoPlugin, Lab, RGB, 1);\n                cmsDoTransform(hXformPlugin, Lab, RGB2, 1);\n\n                d = distance(RGB, RGB2);\n                if (d > maxInside)\n                    maxInside = d;                   \n            }\n    }\n\n\n    for (L = 1; L <= 100; L += 5)\n    {\n        for (a = -100; a < +100; a += 5)\n            for (b = -100; b < +100; b += 5)\n            {\n                cmsFloat32Number d;\n\n                Lab[0] = L; Lab[1] = a; Lab[2] = b;\n                cmsDoTransform(hXformNoPlugin, Lab, RGB, 1);\n                cmsDoTransform(hXformPlugin, Lab, RGB2, 1);\n\n                d = distance(RGB, RGB2);\n                if (d > maxOutside)\n                    maxOutside = d;\n            }\n\n    }\n\n\n    trace(\"Max distance: Inside gamut %f, Outside gamut %f\\n\", sqrtf(maxInside), sqrtf(maxOutside));\n\n    cmsDeleteTransform(hXformNoPlugin);\n    cmsDeleteTransform(hXformPlugin);\n\n    cmsDeleteContext(noPlugin);    \n}",
          "fn_code_pos": [
            [
              1233,
              0
            ],
            [
              1294,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckLab2RGB",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckSoftProofing(void)\n{\n    cmsHPROFILE hRGB1 = cmsOpenProfileFromFile(PROFILES_DIR \"test5.icc\", \"r\");\n    cmsHPROFILE hRGB2 = cmsOpenProfileFromFile(PROFILES_DIR \"test3.icc\", \"r\");\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n    cmsHTRANSFORM hXformNoPlugin = cmsCreateProofingTransformTHR(noPlugin, hRGB1, TYPE_RGB_FLT, hRGB1, TYPE_RGB_FLT, hRGB2, INTENT_RELATIVE_COLORIMETRIC, INTENT_RELATIVE_COLORIMETRIC, cmsFLAGS_GAMUTCHECK | cmsFLAGS_SOFTPROOFING);\n    cmsHTRANSFORM hXformPlugin = cmsCreateProofingTransformTHR(0,          hRGB1, TYPE_RGB_FLT, hRGB1, TYPE_RGB_FLT, hRGB2, INTENT_RELATIVE_COLORIMETRIC, INTENT_RELATIVE_COLORIMETRIC, cmsFLAGS_GAMUTCHECK | cmsFLAGS_SOFTPROOFING);\n\n    cmsUInt32Number Mb, j, r, g, b;\n\n    Scanline_rgbFloat* In;\n    Scanline_rgbFloat* Out1, *Out2;\n\n\n    trace(\"Checking soft proofing and gamut check ...\");\n\n    cmsCloseProfile(hRGB1);\n    cmsCloseProfile(hRGB2);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_rgbFloat);\n    In = (Scanline_rgbFloat*)malloc(Mb);\n    Out1 = (Scanline_rgbFloat*)malloc(Mb);\n    Out2 = (Scanline_rgbFloat*)malloc(Mb);\n\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++)\n            {\n\n                In[j].r = (cmsFloat32Number)r / 255.0f;\n                In[j].g = (cmsFloat32Number)g / 255.0f;\n                In[j].b = (cmsFloat32Number)b / 255.0f;\n                j++;\n            }\n\n\n    cmsDoTransform(hXformNoPlugin, In, Out1, 256 * 256 * 256);\n    cmsDoTransform(hXformPlugin,   In, Out2, 256 * 256 * 256);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                // Check for same values\n                if (!ValidFloat(Out1[j].r, Out2[j].r) ||\n                    !ValidFloat(Out1[j].g, Out2[j].g) ||\n                    !ValidFloat(Out1[j].b, Out2[j].b))\n                    Fail(\"Conversion failed at (%f %f %f) != (%f %f %f)\", Out1[j].r, Out1[j].g, Out1[j].b,\n                        Out2[j].r, Out2[j].g, Out2[j].b);\n\n                j++;\n            }\n\n    free(In); free(Out1); free(Out2);\n    cmsDeleteTransform(hXformNoPlugin);\n    cmsDeleteTransform(hXformPlugin);\n\n    cmsDeleteContext(noPlugin);\n\n    trace(\"Ok\\n\");\n}",
          "fn_code_pos": [
            [
              1298,
              0
            ],
            [
              1363,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckSoftProofing",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid CheckPremultiplied(void)\n{\n    uint8_t BGRA8[4] = { 255, 192, 160, 128 };    \n    uint8_t bgrA8_1[4], bgrA8_2[4];\n\n    cmsHPROFILE srgb1 = cmsCreate_sRGBProfile();\n    cmsHPROFILE srgb2 = cmsCreate_sRGBProfile();\n\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n    cmsHTRANSFORM xform1 = cmsCreateTransformTHR(noPlugin,\n        srgb1, TYPE_BGRA_8,\n        srgb2, TYPE_BGRA_8_PREMUL,\n        INTENT_PERCEPTUAL, cmsFLAGS_COPY_ALPHA);\n\n    cmsHTRANSFORM xform2 = cmsCreateTransformTHR(0,\n        srgb1, TYPE_BGRA_8,\n        srgb2, TYPE_BGRA_8_PREMUL,\n        INTENT_PERCEPTUAL, cmsFLAGS_COPY_ALPHA);\n\n    int i;\n\n    cmsCloseProfile(srgb1);\n    cmsCloseProfile(srgb2);\n\n    cmsDoTransform(xform1, BGRA8, bgrA8_1, 1);\n    cmsDoTransform(xform2, BGRA8, bgrA8_2, 1);\n\n    cmsDeleteTransform(xform1);\n    cmsDeleteTransform(xform2);\n\n    for (i = 0; i < 4; i++)\n    {\n        if (bgrA8_1[i] != bgrA8_2[i])\n            Fail(\"Premultiplied failed at (%d %d %d) != (%d %d %d)\",\n                bgrA8_1[0], bgrA8_1[1], bgrA8_1[2],\n                bgrA8_2[0], bgrA8_2[1], bgrA8_2[2]);\n    }    \n}",
          "fn_code_pos": [
            [
              1365,
              0
            ],
            [
              1404,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "CheckPremultiplied",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static \ncmsFloat64Number MPixSec(cmsFloat64Number diff)\n{\n       cmsFloat64Number seconds = (cmsFloat64Number)diff / (cmsFloat64Number)CLOCKS_PER_SEC;\n       return (256.0 * 256.0 * 256.0) / (1024.0*1024.0*seconds);\n}",
          "fn_code_pos": [
            [
              1413,
              0
            ],
            [
              1418,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "MPixSec",
            "parameters": {
              "diff": "cmsFloat64Number"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid PerformanceHeader(void)\n{\n       trace(\"                                  MPixel/sec.   MByte/sec.\\n\");\n}",
          "fn_code_pos": [
            [
              1423,
              0
            ],
            [
              1427,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "PerformanceHeader",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsHPROFILE loadProfile(const char* name)\n{\n    if (*name == '*')\n    {\n        if (strcmp(name, \"*lab\") == 0)\n        {\n            return cmsCreateLab4Profile(NULL);\n        }\n        else\n            if (strcmp(name, \"*xyz\") == 0)\n            {\n                return cmsCreateXYZProfile();\n            }\n            else\n                if (strcmp(name, \"*curves\") == 0)\n                {\n                    return CreateCurves();\n                }\n                else\n                    Fail(\"Unknown builtin '%s'\", name);\n\n    }\n    \n    return cmsOpenProfileFromFile(name, \"r\");\n}",
          "fn_code_pos": [
            [
              1430,
              0
            ],
            [
              1455,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "loadProfile",
            "parameters": {
              "name": "char"
            },
            "return_type": "cmsHPROFILE"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number Performance(const char* Title, perf_fn fn, cmsContext ct, const char* inICC, const char* outICC, size_t sz, cmsFloat64Number prev)\n{\n       cmsHPROFILE hlcmsProfileIn = loadProfile(inICC);\n       cmsHPROFILE hlcmsProfileOut = loadProfile(outICC);\n                 \n       cmsFloat64Number n = fn(ct, hlcmsProfileIn, hlcmsProfileOut);\n\n       trace(\"%-30s: \", Title); fflush(stdout);\n       trace(\"%-12.2f %-12.2f\", n, n * sz);\n\n       if (prev > 0.0) {\n\n              cmsFloat64Number imp = n / prev;\n              if (imp > 1)\n                   trace(\" (x %-2.1f)\",  imp);\n       }\n\n       trace(\"\\n\"); fflush(stdout);\n       return n;\n}",
          "fn_code_pos": [
            [
              1458,
              0
            ],
            [
              1478,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Performance",
            "parameters": {
              "Title": "char",
              "fn": "perf_fn",
              "ct": "cmsContext",
              "inICC": "char",
              "outICC": "char",
              "sz": "size_t",
              "prev": "cmsFloat64Number"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid ComparativeCt(cmsContext ct1, cmsContext ct2, const char* Title, perf_fn fn1, perf_fn fn2, const char* inICC, const char* outICC)\n{\n       cmsHPROFILE hlcmsProfileIn;\n       cmsHPROFILE hlcmsProfileOut;\n\n       if (inICC == NULL)\n              hlcmsProfileIn = CreateCurves();\n       else\n              hlcmsProfileIn = cmsOpenProfileFromFile(inICC, \"r\");\n\n       if (outICC == NULL)\n              hlcmsProfileOut = CreateCurves();\n       else\n              hlcmsProfileOut = cmsOpenProfileFromFile(outICC, \"r\");\n\n\n       cmsFloat64Number n1 = fn1(ct1, hlcmsProfileIn, hlcmsProfileOut);\n\n       if (inICC == NULL)\n              hlcmsProfileIn = CreateCurves();\n       else\n              hlcmsProfileIn = cmsOpenProfileFromFile(inICC, \"r\");\n\n       if (outICC == NULL)\n              hlcmsProfileOut = CreateCurves();\n       else\n              hlcmsProfileOut = cmsOpenProfileFromFile(outICC, \"r\");\n\n       cmsFloat64Number n2 = fn2(ct2, hlcmsProfileIn, hlcmsProfileOut);\n\n\n       trace(\"%-30s: \", Title); fflush(stdout);\n       trace(\"%-12.2f %-12.2f\\n\", n1, n2);\n}",
          "fn_code_pos": [
            [
              1481,
              0
            ],
            [
              1515,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ComparativeCt",
            "parameters": {
              "ct1": "cmsContext",
              "ct2": "cmsContext",
              "Title": "char",
              "fn1": "perf_fn",
              "fn2": "perf_fn",
              "inICC": "char",
              "outICC": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid Comparative(const char* Title, perf_fn fn1, perf_fn fn2, const char* inICC, const char* outICC)\n{\n       ComparativeCt(0, 0, Title, fn1, fn2, inICC, outICC);\n}",
          "fn_code_pos": [
            [
              1517,
              0
            ],
            [
              1521,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "Comparative",
            "parameters": {
              "Title": "char",
              "fn1": "perf_fn",
              "fn2": "perf_fn",
              "inICC": "char",
              "outICC": "char"
            },
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitsRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       Scanline_rgb8bits *In;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGB_8, hlcmsProfileOut, TYPE_RGB_8, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       Mb = 256 * 256 * 256 * sizeof(Scanline_rgb8bits);\n       In = (Scanline_rgb8bits*)malloc(Mb);\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n                            In[j].r = (cmsUInt8Number)r;\n                            In[j].g = (cmsUInt8Number)g;\n                            In[j].b = (cmsUInt8Number)b;\n\n                            j++;\n                     }\n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n\n       return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              1524,
              0
            ],
            [
              1566,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitsRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitsRGBA(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       Scanline_rgba8bits *In;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       Mb = 256 * 256 * 256 * sizeof(Scanline_rgba8bits);\n       In = (Scanline_rgba8bits*)malloc(Mb);\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n                            In[j].r = (cmsUInt8Number)r;\n                            In[j].g = (cmsUInt8Number)g;\n                            In[j].b = (cmsUInt8Number)b;\n                            In[j].a = 0;\n\n                            j++;\n                     }\n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n       return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              1568,
              0
            ],
            [
              1611,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitsRGBA",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest15bitsRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       Scanline_rgb15bits *In;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGB_15, hlcmsProfileOut, TYPE_RGB_15, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       Mb = 256 * 256 * 256 * sizeof(Scanline_rgb15bits);\n       In = (Scanline_rgb15bits*)malloc(Mb);\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              In[j].r = (cmsUInt16Number)r;\n              In[j].g = (cmsUInt16Number)g;\n              In[j].b = (cmsUInt16Number)b;\n\n              j++;\n      }\n      \n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n       diff = clock() - atime;\n       free(In);\n       \n       cmsDeleteTransform(hlcmsxform);\n\n       return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              1615,
              0
            ],
            [
              1657,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest15bitsRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest15bitsRGBA(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       Scanline_rgba15bits *In;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_15, hlcmsProfileOut, TYPE_RGBA_15, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       Mb = 256 * 256 * 256 * sizeof(Scanline_rgba15bits);\n       In = (Scanline_rgba15bits*)malloc(Mb);\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              In[j].r = (cmsUInt16Number)r;\n              In[j].g = (cmsUInt16Number)g;\n              In[j].b = (cmsUInt16Number)b;\n              In[j].a = 0;\n\n              j++;\n       }      \n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n       return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              1659,
              0
            ],
            [
              1702,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest15bitsRGBA",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest15bitsCMYK(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       Scanline_cmyk15bits *In;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_CMYK_15, hlcmsProfileOut, TYPE_CMYK_15, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       Mb = 256 * 256 * 256 * sizeof(Scanline_cmyk15bits);\n       In = (Scanline_cmyk15bits*)malloc(Mb);\n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              In[j].r = (cmsUInt16Number)r;\n              In[j].g = (cmsUInt16Number)g;\n              In[j].b = (cmsUInt16Number)b;\n              In[j].a = (cmsUInt16Number)0;\n\n              j++;\n       }\n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n       return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              1704,
              0
            ],
            [
              1747,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest15bitsCMYK",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest16bitsRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number r, g, b, j;\n    clock_t atime;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_rgb16bits *In;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGB_16, hlcmsProfileOut, TYPE_RGB_16, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_rgb16bits);\n    In = (Scanline_rgb16bits*)malloc(Mb);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In[j].r = (cmsUInt16Number)FROM_8_TO_16(r);\n                In[j].g = (cmsUInt16Number)FROM_8_TO_16(g);\n                In[j].b = (cmsUInt16Number)FROM_8_TO_16(b);\n\n                j++;\n            }\n\n    atime = clock();\n\n    cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n    diff = clock() - atime;\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n\n    return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              1750,
              0
            ],
            [
              1792,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest16bitsRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest16bitsCMYK(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n\n    cmsInt32Number r, g, b, j;\n    clock_t atime;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_cmyk16bits* In;\n    cmsUInt32Number Mb;\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_CMYK_16, hlcmsProfileOut, TYPE_CMYK_16, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 256 * 256 * 256 * sizeof(Scanline_cmyk16bits);\n    In = (Scanline_cmyk16bits*)malloc(Mb);\n\n    j = 0;\n    for (r = 0; r < 256; r++)\n        for (g = 0; g < 256; g++)\n            for (b = 0; b < 256; b++) {\n\n                In[j].c = (cmsUInt16Number)r;\n                In[j].m = (cmsUInt16Number)g;\n                In[j].y = (cmsUInt16Number)b;\n                In[j].k = (cmsUInt16Number)r;\n\n                j++;\n            }\n\n    atime = clock();\n\n    cmsDoTransform(hlcmsxform, In, In, 256 * 256 * 256);\n\n    diff = clock() - atime;\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n    return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              1794,
              0
            ],
            [
              1837,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest16bitsCMYK",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid SpeedTest8(void)\n{\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n    cmsFloat64Number t[10];\n\n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S   8 B I T S  (D E F A U L T)\\n\");\n    trace(\"==============================================================\\n\\n\");\n    fflush(stdout);\n\n    PerformanceHeader();\n    t[0] = Performance(\"8 bits on CLUT profiles  \", SpeedTest8bitsRGB, noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgb8bits), 0);\n    t[1] = Performance(\"8 bits on Matrix-Shaper  \", SpeedTest8bitsRGB, noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), 0);\n    t[2] = Performance(\"8 bits on same MatrixSh  \", SpeedTest8bitsRGB, noPlugin, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), 0);\n    t[3] = Performance(\"8 bits on curves         \", SpeedTest8bitsRGB, noPlugin, \"*curves\",   \"*curves\",   sizeof(Scanline_rgb8bits), 0);\n\n    // Note that context 0 has the plug-in installed\n\n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S  8 B I T S  (P L U G I N)\\n\");\n    trace(\"===========================================================\\n\\n\");\n    fflush(stdout);\n\n    PerformanceHeader();\n    Performance(\"8 bits on CLUT profiles  \", SpeedTest8bitsRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgb8bits), t[0]);\n    Performance(\"8 bits on Matrix-Shaper  \", SpeedTest8bitsRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), t[1]);\n    Performance(\"8 bits on same MatrixSh  \", SpeedTest8bitsRGB, 0, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb8bits), t[2]);\n    Performance(\"8 bits on curves         \", SpeedTest8bitsRGB, 0, \"*curves\",   \"*curves\",   sizeof(Scanline_rgb8bits), t[3]);\n\n    cmsDeleteContext(noPlugin);\n}",
          "fn_code_pos": [
            [
              1841,
              0
            ],
            [
              1873,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid SpeedTest15(void)\n{\n       trace(\"\\n\\nP E R F O R M A N C E   T E S T S   1 5  B I T S  (P L U G I N)\\n\");\n       trace(    \"===============================================================\\n\\n\");\n       \n       PerformanceHeader();\n       Performance(\"15 bits on CLUT profiles         \", SpeedTest15bitsRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\",  sizeof(Scanline_rgb15bits), 0);\n       Performance(\"15 bits on Matrix-Shaper profiles\", SpeedTest15bitsRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\",  sizeof(Scanline_rgb15bits), 0);\n       Performance(\"15 bits on same Matrix-Shaper    \", SpeedTest15bitsRGB, 0, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\",  sizeof(Scanline_rgb15bits), 0);\n       Performance(\"15 bits on curves                \", SpeedTest15bitsRGB, 0, \"*curves\",   \"*curves\",    sizeof(Scanline_rgb15bits), 0);\n       Performance(\"15 bits on CMYK CLUT profiles    \", SpeedTest15bitsCMYK, 0, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\", sizeof(Scanline_rgba15bits), 0);\n}",
          "fn_code_pos": [
            [
              1875,
              0
            ],
            [
              1887,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest15",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid SpeedTest16(void)\n{\n    cmsContext noPlugin = cmsCreateContext(0, 0);\n\n\n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S   1 6  B I T S  (D E F A U L T)\\n\");\n    trace(\"=================================================================\\n\\n\");\n    \n    PerformanceHeader();\n    Performance(\"16 bits on CLUT profiles         \", SpeedTest16bitsRGB,  noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\",  sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on Matrix-Shaper profiles\", SpeedTest16bitsRGB,  noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\",  sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on same Matrix-Shaper    \", SpeedTest16bitsRGB,  noPlugin, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\",  sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on curves                \", SpeedTest16bitsRGB,  noPlugin, \"*curves\",   \"*curves\",    sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on CMYK CLUT profiles    \", SpeedTest16bitsCMYK, noPlugin, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\",  sizeof(Scanline_cmyk16bits), 0);\n    \n    trace(\"\\n\\n\");\n    trace(\"P E R F O R M A N C E   T E S T S   1 6  B I T S  (P L U G I N)\\n\");\n    trace(\"===============================================================\\n\\n\");\n\n    PerformanceHeader();\n    Performance(\"16 bits on CLUT profiles         \", SpeedTest16bitsRGB,  0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on Matrix-Shaper profiles\", SpeedTest16bitsRGB,  0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on same Matrix-Shaper    \", SpeedTest16bitsRGB,  0, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on curves                \", SpeedTest16bitsRGB,  0, \"*curves\",   \"*curves\",   sizeof(Scanline_rgb16bits), 0);\n    Performance(\"16 bits on CMYK CLUT profiles    \", SpeedTest16bitsCMYK, 0, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\", sizeof(Scanline_cmyk16bits), 0);\n\n    cmsDeleteContext(noPlugin);\n}",
          "fn_code_pos": [
            [
              1889,
              0
            ],
            [
              1918,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest16",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTestFloatRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       void *In;\n       cmsUInt32Number size, Mb;\n       cmsUInt32Number inFormatter=0, outFormatter=0;\n       cmsFloat64Number seconds;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n           Fail(\"Unable to open profiles\");\n\n\n       switch (cmsGetColorSpace(hlcmsProfileIn))\n       {\n       case cmsSigRgbData: inFormatter = TYPE_RGB_FLT; break;\n       case cmsSigLabData: inFormatter = TYPE_Lab_FLT; break;\n       \n       default:\n           Fail(\"Invalid colorspace\");\n       }\n\n       switch (cmsGetColorSpace(hlcmsProfileOut))\n       {\n       case cmsSigRgbData:  outFormatter = TYPE_RGB_FLT; break;\n       case cmsSigLabData:  outFormatter = TYPE_Lab_FLT; break;\n       case cmsSigXYZData:  outFormatter = TYPE_XYZ_FLT; break;\n\n       default:\n           Fail(\"Invalid colorspace\");\n       }\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, inFormatter, hlcmsProfileOut, outFormatter, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n \n\n       j = 0;\n\n       if (inFormatter == TYPE_RGB_FLT)\n       {\n           cmsInt32Number r, g, b;\n           Scanline_rgbFloat* fill;\n           \n           size = 256 * 256 * 256;\n           Mb = size * sizeof(Scanline_rgbFloat);\n           In = malloc(Mb);\n           fill = (Scanline_rgbFloat*)In;\n\n           for (r = 0; r < 256; r++)\n               for (g = 0; g < 256; g++)\n                   for (b = 0; b < 256; b++) {\n\n                       fill[j].r = (cmsFloat32Number)r / 255.0f;\n                       fill[j].g = (cmsFloat32Number)g / 255.0f;\n                       fill[j].b = (cmsFloat32Number)b / 255.0f;\n\n                       j++;\n                   }\n\n       }\n       else\n       {\n           cmsFloat32Number L, a, b;\n           Scanline_LabFloat* fill;\n\n           size = 100 * 256 * 256;\n           Mb =  size * sizeof(Scanline_LabFloat);\n           In = malloc(Mb);\n           fill = (Scanline_LabFloat*)In;\n\n           for (L = 0; L < 100; L++)\n               for (a = -127.0; a < 127.0; a++)\n                   for (b = -127.0; b < +127.0; b++) {\n\n                       fill[j].L = L;\n                       fill[j].a = a;\n                       fill[j].b = b;\n\n                       j++;\n                   }\n       }\n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, size);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n       \n       seconds = (cmsFloat64Number)diff / (cmsFloat64Number)CLOCKS_PER_SEC;\n       return ((cmsFloat64Number)size) / (1024.0 * 1024.0 * seconds);       \n}",
          "fn_code_pos": [
            [
              1921,
              0
            ],
            [
              2019,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTestFloatRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTestFloatCMYK(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number c, m, y, k, j;\n    clock_t atime;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    Scanline_cmykFloat* In;\n    cmsUInt32Number Mb;\n    \n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n    \n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_CMYK_FLT, hlcmsProfileOut, TYPE_CMYK_FLT, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    Mb = 64 * 64 * 64 * 64 * sizeof(Scanline_cmykFloat);\n    In = (Scanline_cmykFloat*)malloc(Mb);\n\n    j = 0;\n    for (c = 0; c < 256; c += 4)\n        for (m = 0; m < 256; m += 4)\n            for (y = 0; y < 256; y += 4)\n                for (k = 0; k < 256; k += 4) {\n\n                In[j].c = (cmsFloat32Number)c / 255.0f;\n                In[j].m = (cmsFloat32Number)m / 255.0f;\n                In[j].y = (cmsFloat32Number)y / 255.0f;\n                In[j].k = (cmsFloat32Number)k / 255.0f;\n\n                j++;\n            }\n\n    atime = clock();\n\n    cmsDoTransform(hlcmsxform, In, In, 64 * 64 * 64 * 64);\n\n    diff = clock() - atime;\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n    return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              2022,
              0
            ],
            [
              2066,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTestFloatCMYK",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTestFloatLab(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n    cmsInt32Number j;\n    clock_t atime;\n    cmsFloat64Number diff;\n    cmsHTRANSFORM hlcmsxform;\n    void* In;\n    cmsUInt32Number size, Mb;\n    cmsUInt32Number  outFormatter = 0;\n    cmsFloat64Number seconds;\n    cmsFloat32Number L, a, b;\n    Scanline_LabFloat* fill;\n\n\n    if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n        Fail(\"Unable to open profiles\");\n\n\n    if (cmsGetColorSpace(hlcmsProfileIn) != cmsSigLabData)\n    {\n        Fail(\"Invalid colorspace\");\n    }\n\n    switch (cmsGetColorSpace(hlcmsProfileOut))\n    {\n    case cmsSigRgbData:  outFormatter = TYPE_RGB_FLT; break;\n    case cmsSigLabData:  outFormatter = TYPE_Lab_FLT; break;\n    case cmsSigXYZData:  outFormatter = TYPE_XYZ_FLT; break;\n\n    default:\n        Fail(\"Invalid colorspace\");\n    }\n\n    hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_Lab_FLT, hlcmsProfileOut, outFormatter, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n    cmsCloseProfile(hlcmsProfileIn);\n    cmsCloseProfile(hlcmsProfileOut);\n\n    j = 0;\n\n    size = 100 * 256 * 256;\n    Mb = size * sizeof(Scanline_LabFloat);\n    In = malloc(Mb);\n    fill = (Scanline_LabFloat*)In;\n\n    for (L = 0; L < 100; L++)\n        for (a = -127.0; a < 127.0; a++)\n            for (b = -127.0; b < +127.0; b++) {\n\n                fill[j].L = L;\n                fill[j].a = a;\n                fill[j].b = b;\n\n                j++;\n            }\n    \n\n    atime = clock();\n\n    cmsDoTransform(hlcmsxform, In, In, size);\n\n    diff = clock() - atime;\n    free(In);\n\n    cmsDeleteTransform(hlcmsxform);\n\n    seconds = (cmsFloat64Number)diff / (cmsFloat64Number)CLOCKS_PER_SEC;\n    return ((cmsFloat64Number)size) / (1024.0 * 1024.0 * seconds);\n}",
          "fn_code_pos": [
            [
              2069,
              0
            ],
            [
              2137,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTestFloatLab",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid SpeedTestFloat(void)\n{\n       cmsContext noPlugin = cmsCreateContext(0, 0);\n       \n       cmsFloat64Number t[10] = { 0 };\n\n       trace(\"\\n\\n\");\n       trace(\"P E R F O R M A N C E   T E S T S   F L O A T  (D E F A U L T)\\n\");\n       trace(\"==============================================================\\n\\n\");\n       fflush(stdout);\n\n       PerformanceHeader();\n       t[0] = Performance(\"Floating point on CLUT profiles  \", SpeedTestFloatRGB, noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgbFloat), 0);\n       t[1] = Performance(\"Floating point on Matrix-Shaper  \", SpeedTestFloatRGB, noPlugin, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgbFloat), 0);\n       t[2] = Performance(\"Floating point on same MatrixSh  \", SpeedTestFloatRGB, noPlugin, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgbFloat), 0);\n       t[3] = Performance(\"Floating point on curves         \", SpeedTestFloatRGB, noPlugin, \"*curves\", \"*curves\",     sizeof(Scanline_rgbFloat), 0);\n       t[4] = Performance(\"Floating point on RGB->Lab       \", SpeedTestFloatRGB, noPlugin, PROFILES_DIR \"test5.icc\", \"*lab\",      sizeof(Scanline_rgbFloat), 0);\n       t[5] = Performance(\"Floating point on RGB->XYZ       \", SpeedTestFloatRGB, noPlugin, PROFILES_DIR \"test3.icc\", \"*xyz\",      sizeof(Scanline_rgbFloat), 0);\n       t[6] = Performance(\"Floating point on CMYK->CMYK     \", SpeedTestFloatCMYK, noPlugin, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\",sizeof(Scanline_cmykFloat), 0);\n       t[7] = Performance(\"Floating point on Lab->RGB       \", SpeedTestFloatLab,  noPlugin, \"*lab\",                   PROFILES_DIR \"test3.icc\", sizeof(Scanline_LabFloat), 0);\n\n\n       // Note that context 0 has the plug-in installed\n\n       trace(\"\\n\\n\");\n       trace(\"P E R F O R M A N C E   T E S T S  F L O A T  (P L U G I N)\\n\");\n       trace(\"===========================================================\\n\\n\");\n       fflush(stdout);\n\n       PerformanceHeader();                   \n       Performance(\"Floating point on CLUT profiles  \", SpeedTestFloatRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\", sizeof(Scanline_rgbFloat), t[0]);\n       Performance(\"Floating point on Matrix-Shaper  \", SpeedTestFloatRGB, 0, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgbFloat), t[1]);\n       Performance(\"Floating point on same MatrixSh  \", SpeedTestFloatRGB, 0, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\", sizeof(Scanline_rgbFloat), t[2]);\n       Performance(\"Floating point on curves         \", SpeedTestFloatRGB, 0, \"*curves\", \"*curves\",     sizeof(Scanline_rgbFloat), t[3]);\n       Performance(\"Floating point on RGB->Lab       \", SpeedTestFloatRGB, 0, PROFILES_DIR \"test5.icc\", \"*lab\",      sizeof(Scanline_rgbFloat), t[4]);\n       Performance(\"Floating point on RGB->XYZ       \", SpeedTestFloatRGB, 0, PROFILES_DIR \"test3.icc\", \"*xyz\",      sizeof(Scanline_rgbFloat), t[5]);\n       Performance(\"Floating point on CMYK->CMYK     \", SpeedTestFloatCMYK, 0, PROFILES_DIR \"test1.icc\", PROFILES_DIR \"test2.icc\", sizeof(Scanline_cmykFloat), t[6]);\n       Performance(\"Floating point on Lab->RGB       \", SpeedTestFloatLab,  0, \"*lab\",                   PROFILES_DIR \"test3.icc\", sizeof(Scanline_LabFloat), t[7]);\n\n       cmsDeleteContext(noPlugin);\n}",
          "fn_code_pos": [
            [
              2141,
              0
            ],
            [
              2182,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTestFloat",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTestFloatByUsing16BitsRGB(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM xform16;\n       Scanline_rgbFloat *In;\n       Scanline_rgb16bits *tmp16;       \n       cmsUInt32Number MbFloat, Mb16;\n\n       UNUSED_PARAMETER(ct);\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       xform16    = cmsCreateTransformTHR(0, hlcmsProfileIn, TYPE_RGB_16, hlcmsProfileOut, TYPE_RGB_16, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       MbFloat = 256 * 256 * 256 * sizeof(Scanline_rgbFloat);\n       Mb16    = 256 * 256 * 256 * sizeof(Scanline_rgb16bits);\n\n       In    = (Scanline_rgbFloat*)malloc(MbFloat);       \n       tmp16 = (Scanline_rgb16bits*)malloc(Mb16);\n       \n\n       j = 0;\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n              In[j].r = (cmsFloat32Number)r / 255.0f;\n              In[j].g = (cmsFloat32Number)g / 255.0f;\n              In[j].b = (cmsFloat32Number)b / 255.0f;\n\n              j++;\n       }\n      \n\n       atime = clock();\n\n       \n       for (j = 0; j < 256 * 256 * 256; j++) {\n\n              tmp16[j].r = (cmsUInt16Number)floor(In[j].r * 65535.0 + 0.5);\n              tmp16[j].g = (cmsUInt16Number)floor(In[j].g * 65535.0 + 0.5);\n              tmp16[j].b = (cmsUInt16Number)floor(In[j].b * 65535.0 + 0.5);\n\n              j++;\n       }\n\n       cmsDoTransform(xform16, tmp16, tmp16, 256 * 256 * 256);\n\n       for (j = 0; j < 256 * 256 * 256; j++) {\n\n              In[j].r = (cmsFloat32Number) (tmp16[j].r / 65535.0 );\n              In[j].g = (cmsFloat32Number) (tmp16[j].g / 65535.0);\n              In[j].b = (cmsFloat32Number) (tmp16[j].b / 65535.0);\n\n              j++;\n       }\n\n       diff = clock() - atime;\n       free(In); free(tmp16);\n      \n       cmsDeleteTransform(xform16);\n       return MPixSec(diff);\n}",
          "fn_code_pos": [
            [
              2185,
              0
            ],
            [
              2254,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTestFloatByUsing16BitsRGB",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid ComparativeFloatVs16bits(void)\n{\n       trace(\"\\n\\n\");\n       trace(\"C O M P A R A T I V E  converting to 16 bit vs. using float plug-in.\\n\");\n       trace(\"                              values given in MegaPixels per second.\\n\");\n       trace(\"====================================================================\\n\");       \n       trace(\"                                  16 bits tmp.  Float plugin\\n\");\n       fflush(stdout);\n\n       Comparative(\"Floating point on CLUT profiles  \", SpeedTestFloatByUsing16BitsRGB, SpeedTestFloatRGB,  PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\");\n       Comparative(\"Floating point on Matrix-Shaper  \", SpeedTestFloatByUsing16BitsRGB, SpeedTestFloatRGB,  PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\");\n       Comparative(\"Floating point on same MatrixSh  \", SpeedTestFloatByUsing16BitsRGB, SpeedTestFloatRGB,  PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\");\n       Comparative(\"Floating point on curves         \", SpeedTestFloatByUsing16BitsRGB, SpeedTestFloatRGB,  NULL, NULL);\n}",
          "fn_code_pos": [
            [
              2260,
              0
            ],
            [
              2274,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ComparativeFloatVs16bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitDoTransform(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b, j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       big_bitmap* In;\n       big_bitmap* Out;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n\n       // Our test bitmap is 256 x 256 padded lines\n       Mb = sizeof(big_bitmap);\n\n       In = (big_bitmap*)malloc(Mb);\n       Out = (big_bitmap*)malloc(Mb);\n\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n                            In->line[r].pixels[g][b].r = (cmsUInt8Number)r;\n                            In->line[r].pixels[g][b].g = (cmsUInt8Number)g;\n                            In->line[r].pixels[g][b].b = (cmsUInt8Number)b;\n                            In->line[r].pixels[g][b].a = 0;\n                     }\n\n       atime = clock();\n\n       for (j = 0; j < 256; j++) {\n\n              cmsDoTransform(hlcmsxform, In->line[j].pixels, Out->line[j].pixels, 256 * 256);\n       }\n\n       diff = clock() - atime;\n       free(In); free(Out);\n\n       cmsDeleteTransform(hlcmsxform);\n       return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              2295,
              0
            ],
            [
              2343,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitDoTransform",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\ncmsFloat64Number SpeedTest8bitLineStride(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)\n{\n       cmsInt32Number r, g, b;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       big_bitmap* In;\n       big_bitmap* Out;\n       cmsUInt32Number Mb;\n\n       if (hlcmsProfileIn == NULL || hlcmsProfileOut == NULL)\n              Fail(\"Unable to open profiles\");\n\n       hlcmsxform = cmsCreateTransformTHR(ct, hlcmsProfileIn, TYPE_RGBA_8, hlcmsProfileOut, TYPE_RGBA_8, INTENT_PERCEPTUAL, cmsFLAGS_NOCACHE);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n\n       // Our test bitmap is 256 x 256 padded lines\n       Mb = sizeof(big_bitmap);\n\n       In = (big_bitmap*)malloc(Mb);\n       Out = (big_bitmap*)malloc(Mb);\n\n       for (r = 0; r < 256; r++)\n              for (g = 0; g < 256; g++)\n                     for (b = 0; b < 256; b++) {\n\n                            In->line[r].pixels[g][b].r = (cmsUInt8Number)r;\n                            In->line[r].pixels[g][b].g = (cmsUInt8Number)g;\n                            In->line[r].pixels[g][b].b = (cmsUInt8Number)b;\n                            In->line[r].pixels[g][b].a = 0;\n                     }\n\n       atime = clock();\n       \n       cmsDoTransformLineStride(hlcmsxform, In, Out, 256*256, 256, sizeof(padded_line), sizeof(padded_line), 0, 0);\n       \n       diff = clock() - atime;\n       free(In); free(Out);\n\n       cmsDeleteTransform(hlcmsxform);\n       return MPixSec(diff);\n\n}",
          "fn_code_pos": [
            [
              2346,
              0
            ],
            [
              2391,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "SpeedTest8bitLineStride",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        },
        {
          "fn_code": "static\nvoid ComparativeLineStride8bits(void)\n{\n       cmsContext NoPlugin, Plugin;\n\n       trace(\"\\n\\n\");\n       trace(\"C O M P A R A T I V E cmsDoTransform() vs. cmsDoTransformLineStride()\\n\");\n       trace(\"                              values given in MegaPixels per second.\\n\");\n       trace(\"====================================================================\\n\");\n\n       fflush(stdout);\n\n       NoPlugin = cmsCreateContext(NULL, NULL);\n       Plugin = cmsCreateContext(cmsFastFloatExtensions(), NULL);\n\n       ComparativeCt(NoPlugin, Plugin, \"CLUT profiles  \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"CLUT 16 bits   \", SpeedTest16bitsRGB,       SpeedTest16bitsRGB,      PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test3.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"Matrix-Shaper  \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, PROFILES_DIR \"test5.icc\", PROFILES_DIR \"test0.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"same MatrixSh  \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, PROFILES_DIR \"test0.icc\", PROFILES_DIR \"test0.icc\");\n       ComparativeCt(NoPlugin, Plugin, \"curves         \", SpeedTest8bitDoTransform, SpeedTest8bitLineStride, NULL, NULL);\n\n       cmsDeleteContext(Plugin);\n       cmsDeleteContext(NoPlugin);\n}",
          "fn_code_pos": [
            [
              2393,
              0
            ],
            [
              2416,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "ComparativeLineStride8bits",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid TestGrayTransformPerformance()\n{\n       cmsInt32Number j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       float *In;\n\n       cmsInt32Number pixels;\n       cmsUInt32Number Mb;\n       cmsToneCurve* gamma18;\n       cmsToneCurve* gamma22;\n\n       cmsHPROFILE hlcmsProfileIn;\n       cmsHPROFILE hlcmsProfileOut;\n\n\n       gamma18 = cmsBuildGamma(0, 1.8);\n       gamma22 = cmsBuildGamma(0, 2.2);\n\n       hlcmsProfileIn = cmsCreateGrayProfile(NULL, gamma18);\n       hlcmsProfileOut = cmsCreateGrayProfile(NULL, gamma22);\n\n\n       cmsFreeToneCurve(gamma18);\n       cmsFreeToneCurve(gamma22);\n\n       hlcmsxform = cmsCreateTransform(hlcmsProfileIn, TYPE_GRAY_FLT | EXTRA_SH(1), hlcmsProfileOut, TYPE_GRAY_FLT|EXTRA_SH(1), INTENT_PERCEPTUAL, 0);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       pixels = 256 * 256 * 256;\n       Mb = pixels* 2*sizeof(float);\n       In = (float*) malloc(Mb);\n\n       for (j = 0; j < pixels*2; j++)\n              In[j] = (j % 256) / 255.0f;\n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, pixels);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n       trace(\"Gray conversion using two gray profiles\\t %-12.2f MPixels/Sec.\\n\", MPixSec(diff));\n}",
          "fn_code_pos": [
            [
              2420,
              0
            ],
            [
              2468,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TestGrayTransformPerformance",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid TestGrayTransformPerformance1()\n{\n       cmsInt32Number j;\n       clock_t atime;\n       cmsFloat64Number diff;\n       cmsHTRANSFORM hlcmsxform;\n       float *In;\n\n       cmsInt32Number pixels;\n       cmsUInt32Number Mb;\n       cmsToneCurve* gamma18;\n       cmsToneCurve* gamma22;\n\n       cmsHPROFILE hlcmsProfileIn;\n       cmsHPROFILE hlcmsProfileOut;\n\n\n       gamma18 = cmsBuildGamma(0, 1.8);\n       gamma22 = cmsBuildGamma(0, 1./2.2);\n\n       hlcmsProfileIn = cmsCreateLinearizationDeviceLink(cmsSigGrayData, &gamma18);\n       hlcmsProfileOut = cmsCreateLinearizationDeviceLink(cmsSigGrayData, &gamma22);\n\n\n       cmsFreeToneCurve(gamma18);\n       cmsFreeToneCurve(gamma22);\n\n       hlcmsxform = cmsCreateTransform(hlcmsProfileIn, TYPE_GRAY_FLT, hlcmsProfileOut, TYPE_GRAY_FLT, INTENT_PERCEPTUAL, 0);\n       cmsCloseProfile(hlcmsProfileIn);\n       cmsCloseProfile(hlcmsProfileOut);\n\n       pixels = 256 * 256 * 256;\n       Mb = pixels* sizeof(float);\n       In = (float*) malloc(Mb);\n\n       for (j = 0; j < pixels; j++)\n              In[j] = (j % 256) / 255.0f;\n\n       atime = clock();\n\n       cmsDoTransform(hlcmsxform, In, In, pixels);\n\n       diff = clock() - atime;\n       free(In);\n\n       cmsDeleteTransform(hlcmsxform);\n       trace(\"Gray conversion using two devicelinks\\t %-12.2f MPixels/Sec.\\n\", MPixSec(diff));\n}",
          "fn_code_pos": [
            [
              2470,
              0
            ],
            [
              2518,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "TestGrayTransformPerformance1",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main()\n{\n\n#ifdef _MSC_VER\n    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);\n#endif\n\n       trace(\"FastFloating point extensions testbed - 1.6\\n\");\n       trace(\"Copyright (c) 1998-2024 Marti Maria Saguer, all rights reserved\\n\");\n       \n       trace(\"\\nInstalling error logger ... \");\n       cmsSetLogErrorHandler(FatalErrorQuit);\n       trace(\"done.\\n\");\n\n       trace(\"Installing plug-in ... \");\n       cmsPlugin(cmsFastFloatExtensions());\n       trace(\"done.\\n\\n\");                     \n\n       CheckComputeIncrements();\n\n       CheckPremultiplied();\n\n       // 15 bit functionality\n       CheckFormatters15();\n       Check15bitsConversions();    \n \n       // 16 bits functionality\n       CheckAccuracy16Bits(); \n\n       // Lab to whatever\n       CheckLab2RGB();\n\n       // Change format\n       CheckChangeFormat();\n \n       // Soft proofing\n       CheckSoftProofing();\n    \n       // Floating point functionality\n       CheckConversionFloat();  \n       trace(\"All floating point tests passed OK\\n\");\n                       \n       SpeedTest8();\n       SpeedTest16();\n       SpeedTest15();\n       SpeedTestFloat();\n\n       ComparativeFloatVs16bits();\n       ComparativeLineStride8bits();\n\n       // Test gray performance\n       trace(\"\\n\\n\");\n       trace(\"F L O A T   G R A Y   conversions performance.\\n\");\n       trace(\"====================================================================\\n\");\n       TestGrayTransformPerformance();\n       TestGrayTransformPerformance1();\n       \n       trace(\"\\nAll tests passed OK\\n\");\n\n       cmsDeleteContext(0);\n\n       return 0;\n}",
          "fn_code_pos": [
            [
              2521,
              0
            ],
            [
              2583,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [
        {
          "fn_code": "(*perf_fn)(cmsContext ct, cmsHPROFILE hlcmsProfileIn, cmsHPROFILE hlcmsProfileOut)",
          "fn_dec_pos": [
            [
              1420,
              24
            ],
            [
              1420,
              106
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "",
            "parameters": {
              "ct": "cmsContext",
              "hlcmsProfileIn": "cmsHPROFILE",
              "hlcmsProfileOut": "cmsHPROFILE"
            },
            "return_type": "cmsFloat64Number"
          }
        }
      ],
      "class_node_list": {},
      "struct_node_list": [
        [
          "typedef struct { cmsUInt8Number  r, g, b;    }  Scanline_rgb8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgb8bits",
          [
            36,
            0
          ],
          [
            36,
            66
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  r, g, b, a; }  Scanline_rgba8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgba8bits",
          [
            37,
            0
          ],
          [
            37,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  c, m, y, k; }  Scanline_cmyk8bits;",
          {
            "c": "cmsUInt8Number"
          },
          "Scanline_cmyk8bits",
          [
            38,
            0
          ],
          [
            38,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b;    }  Scanline_rgb16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgb16bits",
          [
            39,
            0
          ],
          [
            39,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_rgba16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgba16bits",
          [
            40,
            0
          ],
          [
            40,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number c, m, y, k; }  Scanline_cmyk16bits;",
          {
            "c": "cmsUInt16Number"
          },
          "Scanline_cmyk16bits",
          [
            41,
            0
          ],
          [
            41,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b;    }  Scanline_rgb15bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgb15bits",
          [
            42,
            0
          ],
          [
            42,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_rgba15bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgba15bits",
          [
            43,
            0
          ],
          [
            43,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_cmyk15bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_cmyk15bits",
          [
            44,
            0
          ],
          [
            44,
            68
          ]
        ],
        [
          "typedef struct { cmsFloat32Number r, g, b;    }  Scanline_rgbFloat;",
          {
            "r": "cmsFloat32Number"
          },
          "Scanline_rgbFloat",
          [
            45,
            0
          ],
          [
            45,
            67
          ]
        ],
        [
          "typedef struct { cmsFloat32Number r, g, b, a; }  Scanline_rgbaFloat;",
          {
            "r": "cmsFloat32Number"
          },
          "Scanline_rgbaFloat",
          [
            46,
            0
          ],
          [
            46,
            68
          ]
        ],
        [
          "typedef struct { cmsFloat32Number c, m, y, k; }  Scanline_cmykFloat;",
          {
            "c": "cmsFloat32Number"
          },
          "Scanline_cmykFloat",
          [
            47,
            0
          ],
          [
            47,
            68
          ]
        ],
        [
          "typedef struct { cmsFloat32Number L, a, b; }     Scanline_LabFloat;",
          {
            "L": "cmsFloat32Number"
          },
          "Scanline_LabFloat",
          [
            48,
            0
          ],
          [
            48,
            67
          ]
        ],
        [
          "typedef struct\n{\n       Scanline_rgba8bits pixels[256][256];\n       cmsUInt8Number     padding[4];\n\n} padded_line;",
          {
            "pixels[256][256]": "Scanline_rgba8bits",
            "padding[4]": "cmsUInt8Number"
          },
          "padded_line",
          [
            2282,
            0
          ],
          [
            2287,
            14
          ]
        ],
        [
          "typedef struct\n{\n       padded_line line[256];\n} big_bitmap;",
          {
            "line[256]": "padded_line"
          },
          "big_bitmap",
          [
            2289,
            0
          ],
          [
            2292,
            13
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  r, g, b;    }  Scanline_rgb8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgb8bits",
          [
            36,
            0
          ],
          [
            36,
            66
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  r, g, b, a; }  Scanline_rgba8bits;",
          {
            "r": "cmsUInt8Number"
          },
          "Scanline_rgba8bits",
          [
            37,
            0
          ],
          [
            37,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt8Number  c, m, y, k; }  Scanline_cmyk8bits;",
          {
            "c": "cmsUInt8Number"
          },
          "Scanline_cmyk8bits",
          [
            38,
            0
          ],
          [
            38,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b;    }  Scanline_rgb16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgb16bits",
          [
            39,
            0
          ],
          [
            39,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_rgba16bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgba16bits",
          [
            40,
            0
          ],
          [
            40,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number c, m, y, k; }  Scanline_cmyk16bits;",
          {
            "c": "cmsUInt16Number"
          },
          "Scanline_cmyk16bits",
          [
            41,
            0
          ],
          [
            41,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b;    }  Scanline_rgb15bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgb15bits",
          [
            42,
            0
          ],
          [
            42,
            67
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_rgba15bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_rgba15bits",
          [
            43,
            0
          ],
          [
            43,
            68
          ]
        ],
        [
          "typedef struct { cmsUInt16Number r, g, b, a; }  Scanline_cmyk15bits;",
          {
            "r": "cmsUInt16Number"
          },
          "Scanline_cmyk15bits",
          [
            44,
            0
          ],
          [
            44,
            68
          ]
        ],
        [
          "typedef struct { cmsFloat32Number r, g, b;    }  Scanline_rgbFloat;",
          {
            "r": "cmsFloat32Number"
          },
          "Scanline_rgbFloat",
          [
            45,
            0
          ],
          [
            45,
            67
          ]
        ],
        [
          "typedef struct { cmsFloat32Number r, g, b, a; }  Scanline_rgbaFloat;",
          {
            "r": "cmsFloat32Number"
          },
          "Scanline_rgbaFloat",
          [
            46,
            0
          ],
          [
            46,
            68
          ]
        ],
        [
          "typedef struct { cmsFloat32Number c, m, y, k; }  Scanline_cmykFloat;",
          {
            "c": "cmsFloat32Number"
          },
          "Scanline_cmykFloat",
          [
            47,
            0
          ],
          [
            47,
            68
          ]
        ],
        [
          "typedef struct { cmsFloat32Number L, a, b; }     Scanline_LabFloat;",
          {
            "L": "cmsFloat32Number"
          },
          "Scanline_LabFloat",
          [
            48,
            0
          ],
          [
            48,
            67
          ]
        ],
        [
          "struct _cmstransform_struct",
          {},
          "",
          [
            149,
            23
          ],
          [
            149,
            50
          ]
        ],
        [
          "struct _cmstransform_struct",
          {},
          "",
          [
            151,
            23
          ],
          [
            151,
            50
          ]
        ],
        [
          "typedef struct\n{\n       Scanline_rgba8bits pixels[256][256];\n       cmsUInt8Number     padding[4];\n\n} padded_line;",
          {
            "pixels[256][256]": "Scanline_rgba8bits",
            "padding[4]": "cmsUInt8Number"
          },
          "padded_line",
          [
            2282,
            0
          ],
          [
            2287,
            14
          ]
        ],
        [
          "typedef struct\n{\n       padded_line line[256];\n} big_bitmap;",
          {
            "line[256]": "padded_line"
          },
          "big_bitmap",
          [
            2289,
            0
          ],
          [
            2292,
            13
          ]
        ]
      ],
      "include_list": [
        [
          "#include \"fast_float_internal.h\"\n",
          [
            21,
            0
          ],
          [
            22,
            0
          ]
        ],
        [
          "#include <stdlib.h>\n",
          [
            23,
            0
          ],
          [
            24,
            0
          ]
        ],
        [
          "#include <memory.h>\n",
          [
            24,
            0
          ],
          [
            25,
            0
          ]
        ],
        [
          "#    include \"crtdbg.h\"\n",
          [
            28,
            0
          ],
          [
            29,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    },
    "/home/xuhanxiang/project/Fuzzing/oss-fuzz-modified/docker_shared/source_code/lcms/testbed/alpha_test.c": {
      "fn_def_list": [
        {
          "fn_code": "uint8_t to_premul8_float(uint8_t rgb8, uint8_t a8)\n{\t\n    double alpha_factor, rgb;\n\n    if (a8 == 0) return rgb8;\n    alpha_factor = (double) a8 / 255.0;\n    rgb = ((double) rgb8 * alpha_factor);\n\n    return (uint8_t)round(rgb);\n}",
          "fn_code_pos": [
            [
              20,
              0
            ],
            [
              29,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "to_premul8_float",
            "parameters": {
              "rgb8": "uint8_t",
              "a8": "uint8_t"
            },
            "return_type": "uint8_t"
          }
        },
        {
          "fn_code": "uint8_t from_premul8_float(uint8_t rgb8, uint8_t a8)\n{\n    double alpha_factor, rgb;\n\n    if (a8 == 0) return rgb8;\n    alpha_factor = 255.0 / (double)a8;\n    rgb = ((double)rgb8 * alpha_factor);\n    if (rgb > 255.0) rgb = 255.0;\n    return (uint8_t)round(rgb);\n}",
          "fn_code_pos": [
            [
              31,
              0
            ],
            [
              40,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "from_premul8_float",
            "parameters": {
              "rgb8": "uint8_t",
              "a8": "uint8_t"
            },
            "return_type": "uint8_t"
          }
        },
        {
          "fn_code": "uint16_t to_premul16_float(uint16_t rgb16, uint16_t a16)\n{\n    double alpha_factor, rgb;\n\n    if (a16 == 0) return rgb16;\n    alpha_factor = (double)a16 / 65535.0;\n    rgb = ((double)rgb16 * alpha_factor);\n    return (uint16_t)round(rgb);\n}",
          "fn_code_pos": [
            [
              42,
              0
            ],
            [
              50,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "to_premul16_float",
            "parameters": {
              "rgb16": "uint16_t",
              "a16": "uint16_t"
            },
            "return_type": "uint16_t"
          }
        },
        {
          "fn_code": "uint16_t from_premul16_float(uint16_t rgb16, uint16_t a16)\n{\n    double alpha_factor, rgb;\n\n    if (a16 == 0) return rgb16;\n    alpha_factor = 65535.0 / (double)a16;\n    rgb = ((double)rgb16 * alpha_factor);\n    if (rgb > 65535.0) rgb = 65535.0;\n    return (uint16_t)round(rgb);\n}",
          "fn_code_pos": [
            [
              52,
              0
            ],
            [
              61,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "from_premul16_float",
            "parameters": {
              "rgb16": "uint16_t",
              "a16": "uint16_t"
            },
            "return_type": "uint16_t"
          }
        },
        {
          "fn_code": "uint16_t to_premul16(uint16_t rgb16, uint16_t a16)\n{\n    uint32_t alpha_factor, rgb;\n\n    if (a16 == 0) return rgb16;\t\n    alpha_factor = _cmsToFixedDomain(a16);\n    rgb = ((uint32_t) rgb16 * alpha_factor + 0x8000) >> 16;\n\n    return (uint16_t)rgb;\n}",
          "fn_code_pos": [
            [
              73,
              0
            ],
            [
              82,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "to_premul16",
            "parameters": {
              "rgb16": "uint16_t",
              "a16": "uint16_t"
            },
            "return_type": "uint16_t"
          }
        },
        {
          "fn_code": "uint16_t from_premul16(uint16_t rgb16, uint16_t a16)\n{\n    uint32_t alpha_factor, rgb;\n\n    if (a16 == 0) return rgb16;\n    alpha_factor = _cmsToFixedDomain(a16);    \n    rgb = (((uint32_t) rgb16) << 16) / alpha_factor;\n    if (rgb > 0xffff) rgb = 0xffff;\n\n    return (uint16_t)rgb;\n}",
          "fn_code_pos": [
            [
              84,
              0
            ],
            [
              94,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "from_premul16",
            "parameters": {
              "rgb16": "uint16_t",
              "a16": "uint16_t"
            },
            "return_type": "uint16_t"
          }
        },
        {
          "fn_code": "uint8_t to_premul8(uint8_t rgb8, uint8_t a8)\n{\n    uint32_t alpha_factor, rgb;\n\n    if (a8 == 0) return rgb8;\n    alpha_factor = _cmsToFixedDomain(FROM_8_TO_16(a8));\n    rgb = ((uint32_t)rgb8 * alpha_factor + 0x8000) >> 16;\n    return (uint8_t)rgb;\n}",
          "fn_code_pos": [
            [
              97,
              0
            ],
            [
              105,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "to_premul8",
            "parameters": {
              "rgb8": "uint8_t",
              "a8": "uint8_t"
            },
            "return_type": "uint8_t"
          }
        },
        {
          "fn_code": "uint8_t from_premul8(uint8_t rgb8, uint8_t a8)\n{\n    uint32_t alpha_factor, rgb;\n\n    if (a8 == 0) return rgb8;\n    alpha_factor = _cmsToFixedDomain(FROM_8_TO_16(a8));\n    rgb = (((uint32_t)rgb8) << 16) / alpha_factor;\n    if (rgb > 0xff) rgb = 0xff;\n    return (uint8_t)rgb;\n}",
          "fn_code_pos": [
            [
              108,
              0
            ],
            [
              117,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "from_premul8",
            "parameters": {
              "rgb8": "uint8_t",
              "a8": "uint8_t"
            },
            "return_type": "uint8_t"
          }
        },
        {
          "fn_code": "static\nvoid dif16to(void)\n{\n    int32_t gpremul, gpremul1;\n    int32_t max, max1, max2, a, g;\n    \n    printf(\"Premul TO diff\\n\");\n    max = max1 = max2 = 0;\n    for (a = 0; a < 65536; a += 255)\n        for (g = 0; g < 65536; g++)\n        {\n            gpremul = to_premul16_float(g, a);\n            gpremul1 = to_premul16(g, a);\n            \n            if (gpremul != gpremul1)\n            {\n                int32_t dif = abs(gpremul - gpremul1);\n                if (dif > max)\n                {\n                    max = dif;\n                    max1 = gpremul;\n                    max2 = gpremul1;\n                }\n\n            }\n        }\n\n    printf(\"Error max=%d on pre:%d pre1:%d\\n\", max, max1, max2);\n\n}",
          "fn_code_pos": [
            [
              120,
              0
            ],
            [
              149,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "dif16to",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid dif16from(void)\n{\n    int32_t gpremul, gpremul1;\n    int32_t max, max1, max2, maxa, maxg, a, g;\n\n    printf(\"Premul FROM diff\\n\");\n    max = max1 = max2 = maxa = maxg = 0;\n    for (a = 0; a < 65536; a += 255)\n        for (g = 0; g < 65536; g++)\n        {\n            gpremul = from_premul16_float(g, a);\n            gpremul1 = from_premul16(g, a);\n\n            if (gpremul != gpremul1)\n            {\n                int32_t dif = abs(gpremul - gpremul1);\n                if (dif > max)\n                {\n                    max = dif;\n                    max1 = gpremul;\n                    max2 = gpremul1;\n                    maxa = a;\n                    maxg = g;\n                }\n\n            }\n        }\n\n    printf(\"Error max=%d on pre:%d pre1:%d (a:%d g:%d)\\n\", max, max1, max2, maxa, maxg);\n\n    from_premul16_float(maxg, maxa);\n    from_premul16(maxg, maxa);\n}",
          "fn_code_pos": [
            [
              152,
              0
            ],
            [
              185,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "dif16from",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid dif8to(void)\n{\n    int32_t gpremul, gpremul1;\n    int32_t max, max1, max2, a, g;\n\n    printf(\"Premul TO8 diff\\n\");\n    max = max1 = max2 = 0;\n    for (a = 0; a < 256; a++)\n        for (g = 0; g < 256; g++)\n        {\n            gpremul = to_premul8_float(g, a);\n            gpremul1 = to_premul8(g, a);\n\n            if (gpremul != gpremul1)\n            {\n                int32_t dif = abs(gpremul - gpremul1);\n                if (dif > max)\n                {\n                    max = dif;\n                    max1 = gpremul;\n                    max2 = gpremul1;\n                }\n\n            }\n        }\n\n    printf(\"Error max=%d on pre:%d pre1:%d\\n\", max, max1, max2);\n\n}",
          "fn_code_pos": [
            [
              187,
              0
            ],
            [
              216,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "dif8to",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid dif8from(void)\n{\n    int32_t gpremul, gpremul1;\n    int32_t max, max1, max2, maxa, maxg, a, g;\n\n    printf(\"Premul FROM8 diff\\n\");\n    max = max1 = max2 = maxa = maxg = 0;\n    for (a = 0; a < 256; a++)\n        for (g = 0; g < 256; g++)\n        {\n            gpremul = from_premul8_float(g, a);\n            gpremul1 = from_premul8(g, a);\n\n            if (gpremul != gpremul1)\n            {\n                int32_t dif = abs(gpremul - gpremul1);\n                if (dif > max)\n                {\n                    max = dif;\n                    max1 = gpremul;\n                    max2 = gpremul1;\n                    maxa = a;\n                    maxg = g;\n                }\n\n            }\n        }\n\n    printf(\"Error max=%d on pre:%d pre1:%d (a:%d g:%d)\\n\", max, max1, max2, maxa, maxg);    \n\n    from_premul8_float(maxg, maxa);\n    from_premul8(maxg, maxa);\n}",
          "fn_code_pos": [
            [
              219,
              0
            ],
            [
              252,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "dif8from",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid toFixedDomain(void)\n{\n    int32_t g;\n\n    for (g = 0; g < 65536; g++)\n    {\n        uint32_t a = _cmsToFixedDomain(g);\n        uint32_t b = (uint32_t)round(((double)g / 65535.0) * 65536.0);\n\n        if (a != b)\n            printf(\"%d != %d\\n\", a, b);\n    }\n}",
          "fn_code_pos": [
            [
              259,
              0
            ],
            [
              272,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "toFixedDomain",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "static\nvoid fromFixedDomain(void)\n{\n    int32_t g;\n\n    for (g = 0; g <= 65536; g++)\n    {\n        uint32_t a = _cmsFromFixedDomain(g);\n        uint32_t b = (uint32_t)round(((double)g / 65536.0) * 65535.0);\n\n        if (a != b)\n            printf(\"%d != %d\\n\", a, b);\n    }\n}",
          "fn_code_pos": [
            [
              274,
              0
            ],
            [
              287,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "fromFixedDomain",
            "parameters": {},
            "return_type": "void"
          }
        },
        {
          "fn_code": "int main()\n{\n    toFixedDomain();\n    fromFixedDomain();\n\n    dif8from();\n    dif8to();\n\n    dif16from();\n    dif16to();\n\n    \n    return 0;\n    \n\n}",
          "fn_code_pos": [
            [
              290,
              0
            ],
            [
              305,
              1
            ]
          ],
          "class_code": "",
          "class_node_pos": [],
          "fn_meta": {
            "identifier": "main",
            "parameters": {},
            "return_type": "int"
          }
        }
      ],
      "fn_declaraion": [],
      "class_node_list": {},
      "struct_node_list": [],
      "include_list": [
        [
          "#include <stdio.h>\n",
          [
            2,
            0
          ],
          [
            3,
            0
          ]
        ],
        [
          "#include <stdint.h>\n",
          [
            3,
            0
          ],
          [
            4,
            0
          ]
        ],
        [
          "#include <math.h>\n",
          [
            4,
            0
          ],
          [
            5,
            0
          ]
        ],
        [
          "#include \"lcms2_internal.h\"\n",
          [
            6,
            0
          ],
          [
            7,
            0
          ]
        ]
      ],
      "global_variables": [],
      "enumerate_node_list": []
    }
  },
  "head": {}
}