"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"cmsSliceSpaceFloat","_cmsQuantizeVal","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,739,739,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsBool","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsBool","int","_cmsQuantizeVal(cmsFloat64Number, cmsUInt32Number) -> cmsUInt16Number","cmsFloat64Number i, cmsUInt32Number MaxSamples","cmsUInt16Number","unsigned short"
"cmsSliceSpaceFloat","_cmsQuantizeVal","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,739,739,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsBool","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsInt32Number","int","_cmsQuantizeVal(cmsFloat64Number, cmsUInt32Number) -> cmsUInt16Number","cmsFloat64Number i, cmsUInt32Number MaxSamples","cmsUInt16Number","unsigned short"
"cmsSliceSpaceFloat","_cmsQuantizeVal","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,739,739,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsInt32Number","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsBool","int","_cmsQuantizeVal(cmsFloat64Number, cmsUInt32Number) -> cmsUInt16Number","cmsFloat64Number i, cmsUInt32Number MaxSamples","cmsUInt16Number","unsigned short"
"cmsSliceSpaceFloat","_cmsQuantizeVal","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,739,739,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsInt32Number","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsInt32Number","int","_cmsQuantizeVal(cmsFloat64Number, cmsUInt32Number) -> cmsUInt16Number","cmsFloat64Number i, cmsUInt32Number MaxSamples","cmsUInt16Number","unsigned short"
"cmsSliceSpaceFloat","CubeSize","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,467,467,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsBool","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsBool","int","CubeSize(const cmsUInt32Number[], cmsUInt32Number) -> cmsUInt32Number","const cmsUInt32Number[] Dims, cmsUInt32Number b","cmsUInt32Number","unsigned int"
"cmsSliceSpaceFloat","CubeSize","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,467,467,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsBool","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsInt32Number","int","CubeSize(const cmsUInt32Number[], cmsUInt32Number) -> cmsUInt32Number","const cmsUInt32Number[] Dims, cmsUInt32Number b","cmsUInt32Number","unsigned int"
"cmsSliceSpaceFloat","CubeSize","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,467,467,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsInt32Number","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsBool","int","CubeSize(const cmsUInt32Number[], cmsUInt32Number) -> cmsUInt32Number","const cmsUInt32Number[] Dims, cmsUInt32Number b","cmsUInt32Number","unsigned int"
"cmsSliceSpaceFloat","CubeSize","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",909,936,467,467,"cmsSliceSpaceFloat(cmsUInt32Number, const cmsUInt32Number[], cmsSAMPLERFLOAT, void *) -> cmsInt32Number","cmsUInt32Number nInputs, const cmsUInt32Number[] clutPoints, cmsSAMPLERFLOAT Sampler, void * Cargo","cmsInt32Number","int","CubeSize(const cmsUInt32Number[], cmsUInt32Number) -> cmsUInt32Number","const cmsUInt32Number[] Dims, cmsUInt32Number b","cmsUInt32Number","unsigned int"
