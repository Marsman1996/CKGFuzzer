"caller","callee","caller_src","callee_src","start_body_start_line","start_body_end_line","end_body_start_line","end_body_end_line","caller_signature","caller_parameter_string","caller_return_type","caller_return_type_inferred","callee_signature","callee_parameter_string","callee_return_type","callee_return_type_inferred"
"cmsPipelineEvalReverseFloat","cmsPipelineEvalFloat","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",1749,1841,1447,1447,"cmsPipelineEvalReverseFloat(cmsFloat32Number[], cmsFloat32Number[], cmsFloat32Number[], const cmsPipeline *) -> cmsBool","cmsFloat32Number[] Target, cmsFloat32Number[] Result, cmsFloat32Number[] Hint, const cmsPipeline * lut","cmsBool","int","cmsPipelineEvalFloat(const cmsFloat32Number[], cmsFloat32Number[], const cmsPipeline *) -> void","const cmsFloat32Number[] In, cmsFloat32Number[] Out, const cmsPipeline * lut","void","void"
"cmsPipelineEvalReverseFloat","_cmsMAT3solve","/src/lcms/src/cmslut.c","/src/lcms/src/cmsmtrx.c",1749,1841,156,156,"cmsPipelineEvalReverseFloat(cmsFloat32Number[], cmsFloat32Number[], cmsFloat32Number[], const cmsPipeline *) -> cmsBool","cmsFloat32Number[] Target, cmsFloat32Number[] Result, cmsFloat32Number[] Hint, const cmsPipeline * lut","cmsBool","int","_cmsMAT3solve(cmsVEC3 *, cmsMAT3 *, cmsVEC3 *) -> cmsBool","cmsVEC3 * x, cmsMAT3 * a, cmsVEC3 * b","cmsBool","int"
"cmsPipelineEvalReverseFloat","EuclideanDistance","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",1749,1841,1722,1722,"cmsPipelineEvalReverseFloat(cmsFloat32Number[], cmsFloat32Number[], cmsFloat32Number[], const cmsPipeline *) -> cmsBool","cmsFloat32Number[] Target, cmsFloat32Number[] Result, cmsFloat32Number[] Hint, const cmsPipeline * lut","cmsBool","int","EuclideanDistance(cmsFloat32Number[], cmsFloat32Number[], int) -> cmsFloat32Number","cmsFloat32Number[] a, cmsFloat32Number[] b, int n","cmsFloat32Number","float"
"cmsPipelineEvalReverseFloat","IncDelta","/src/lcms/src/cmslut.c","/src/lcms/src/cmslut.c",1749,1841,1707,1707,"cmsPipelineEvalReverseFloat(cmsFloat32Number[], cmsFloat32Number[], cmsFloat32Number[], const cmsPipeline *) -> cmsBool","cmsFloat32Number[] Target, cmsFloat32Number[] Result, cmsFloat32Number[] Hint, const cmsPipeline * lut","cmsBool","int","IncDelta(cmsFloat32Number *) -> void","cmsFloat32Number * Val","void","void"
